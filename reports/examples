Run options: --seed 10452

# Running:

....SS..........................................................................................................

Finished in 0.364638s, 307.1540 runs/s, 33937.7786 assertions/s.

112 runs, 12375 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.00 0.00 0.00 1/97 17717

#
# Try out Binary-, Ternary-, and QuaternaryTree
#

[32, 19, 13, 57, 79, 80, 11, 40, 2, 88, 55, 97, 81, 84, 91, 14, 53, 17, 73, 73, 93, 29, 96, 85, 4, 79, 66, 51, 28, 29]
#<CompSci::PushTree:0x005574b1348138 @root=#<CompSci::ChildFlexNode:0x2aba589a413ci @value=32 @children=[19, 13]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2aba589a3a34i @value=91 @children=[29]>>
                                       32                                       
                   19                                      13                   
         57                  79                  80                  11         
    40         2        88        55        97        81        84        91    
  14   53   17   73   73   93   29   96   85   4    79   66   51   28   29   _  

df_search visited: 32 19 57 40 14 53 2 17 73 79 88 73 93 55 29 96 13 80 97 85 4 81 79 66 11 84 51 28 91 29


push: [28, 2, 42, 74, 73, 17, 90, 45, 79, 60, 88, 4, 53, 92, 97, 49, 34, 65, 66, 90, 27, 29, 43, 82, 22, 66, 11, 46, 82, 52]

                                       32                                       
                   19                                      13                   
         57                  79                  80                  11         
    40         2        88        55        97        81        84        91    
  14   53   17   73   73   93   29   96   85   4    79   66   51   28   29   28 
2 42 74 73 17 90 45 79 60 88 4 53 92 97 49 34 65 66 90 27 29 43 82 22 66 11 46 82 52 _ _ _ 


[32, 19, 13, 57, 79, 80, 11, 40, 2, 88, 55, 97, 81, 84, 91, 14, 53, 17, 73, 73, 93, 29, 96, 85, 4, 79, 66, 51, 28, 29]
#<CompSci::PushTree:0x005574b12f09b0 @root=#<CompSci::ChildFlexNode:0x2aba58978550i @value=32 @children=[19, 13, 57]>, @child_slots=3, @open_parent=#<CompSci::ChildFlexNode:0x2aba58977ec0i @value=88 @children=[28, 29]>>
                                       32                                       
            19                        13                        57            
   79      80      11      40       2      88      55      97      81   
84 91 14 53 17 73 73 93 29 96 85 4 79 66 51 28 29 _ _ _ _ _ _ _ _ _ _ 

df_search visited: 32 19 79 84 91 14 80 53 17 73 11 73 93 29 13 40 96 85 4 2 79 66 51 88 28 29 57 55 97 81


push: [94, 28, 3, 94, 53, 71, 38, 6, 57, 33, 59, 74, 63, 84, 23, 83, 49, 3, 49, 36, 39, 67, 93, 54, 56, 48, 17, 42, 48, 65]

                                       32                                       
            19                        13                        57            
   79      80      11      40       2      88      55      97      81   
84 91 14 53 17 73 73 93 29 96 85 4 79 66 51 28 29 94 28 3 94 53 71 38 6 57 33 
59 74 63 84 23 83 49 3 49 36 39 67 93 54 56 48 17 42 48 65 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


[32, 19, 13, 57, 79, 80, 11, 40, 2, 88, 55, 97, 81, 84, 91, 14, 53, 17, 73, 73, 93, 29, 96, 85, 4, 79, 66, 51, 28, 29]
#<CompSci::PushTree:0x005574b11b7f08 @root=#<CompSci::ChildFlexNode:0x2aba588dc240i @value=32 @children=[19, 13, 57, 79]>, @child_slots=4, @open_parent=#<CompSci::ChildFlexNode:0x2aba588db4f8i @value=40 @children=[29]>>
                                       32                                       
         19                  13                  57                  79         
  80   11   40   2    88   55   97   81   84   91   14   53   17   73   73   93 
29 96 85 4 79 66 51 28 29 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

df_search visited: 32 19 80 29 96 85 4 11 79 66 51 28 40 29 2 13 88 55 97 81 57 84 91 14 53 79 17 73 73 93


push: [1, 66, 29, 58, 49, 60, 32, 51, 49, 75, 90, 15, 44, 11, 68, 45, 9, 32, 17, 64, 4, 59, 79, 59, 70, 96, 96, 41, 35, 1]

                                       32                                       
         19                  13                  57                  79         
  80   11   40   2    88   55   97   81   84   91   14   53   17   73   73   93 
29 96 85 4 79 66 51 28 29 1 66 29 58 49 60 32 51 49 75 90 15 44 11 68 45 9 32 17 64 4 59 79 59 70 96 96 41 35 1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


ruby -Ilib examples/complete_tree.rb


#
# Print CompleteBinary-, Ternary-, and QuaternaryTree
#

[74, 62, 71, 79, 31, 32, 70, 57, 34, 69, 74, 32, 80, 70, 66, 86, 58, 20, 5, 0, 55, 92, 31, 43, 23, 21, 28, 42, 41, 21]
#<CompSci::CompleteBinaryTree:0x0055944f784360 @array=[74, 62, 71, 79, 31, 32, 70, 57, 34, 69, 74, 32, 80, 70, 66, 86, 58, 20, 5, 0, 55, 92, 31, 43, 23, 21, 28, 42, 41, 21], @child_slots=2>
                                       74                                       
                   62                                      71                   
         79                  31                  32                  70         
    57        34        69        74        32        80        70        66    
  86   58   20   5    0    55   92   31   43   23   21   28   42   41   21 



push: [83, 36, 32, 25, 48, 19, 37, 3, 13, 16, 63, 55, 79, 68, 40, 68, 38, 88, 58, 2, 24, 40, 23, 43, 14, 88, 53, 47, 27, 14]
                                       74                                       
                   62                                      71                   
         79                  31                  32                  70         
    57        34        69        74        32        80        70        66    
  86   58   20   5    0    55   92   31   43   23   21   28   42   41   21   83 
36 32 25 48 19 37 3 13 16 63 55 79 68 40 68 38 88 58 2 24 40 23 43 14 88 53 47 27 14 



[74, 62, 71, 79, 31, 32, 70, 57, 34, 69, 74, 32, 80, 70, 66, 86, 58, 20, 5, 0, 55, 92, 31, 43, 23, 21, 28, 42, 41, 21]
#<CompSci::CompleteTernaryTree:0x0055944f77b9e0 @array=[74, 62, 71, 79, 31, 32, 70, 57, 34, 69, 74, 32, 80, 70, 66, 86, 58, 20, 5, 0, 55, 92, 31, 43, 23, 21, 28, 42, 41, 21], @child_slots=3>
                                       74                                       
            62                        71                        79            
   31      32      70      57      34      69      74      32      80   
70 66 86 58 20 5 0 55 92 31 43 23 21 28 42 41 21 



push: [37, 78, 87, 36, 18, 97, 27, 66, 12, 47, 27, 77, 98, 49, 7, 81, 93, 26, 64, 44, 93, 64, 70, 20, 81, 54, 55, 26, 65, 62]
                                       74                                       
            62                        71                        79            
   31      32      70      57      34      69      74      32      80   
70 66 86 58 20 5 0 55 92 31 43 23 21 28 42 41 21 37 78 87 36 18 97 27 66 12 47 
27 77 98 49 7 81 93 26 64 44 93 64 70 20 81 54 55 26 65 62 



[74, 62, 71, 79, 31, 32, 70, 57, 34, 69, 74, 32, 80, 70, 66, 86, 58, 20, 5, 0, 55, 92, 31, 43, 23, 21, 28, 42, 41, 21]
#<CompSci::CompleteQuaternaryTree:0x0055944f6797b8 @array=[74, 62, 71, 79, 31, 32, 70, 57, 34, 69, 74, 32, 80, 70, 66, 86, 58, 20, 5, 0, 55, 92, 31, 43, 23, 21, 28, 42, 41, 21], @child_slots=4>
                                       74                                       
         62                  71                  79                  31         
  32   70   57   34   69   74   32   80   70   66   86   58   20   5    0    55 
92 31 43 23 21 28 42 41 21 



push: [52, 29, 81, 38, 57, 38, 18, 96, 27, 40, 1, 37, 57, 67, 94, 26, 10, 58, 33, 24, 97, 58, 92, 12, 17, 39, 90, 53, 71, 92]
                                       74                                       
         62                  71                  79                  31         
  32   70   57   34   69   74   32   80   70   66   86   58   20   5    0    55 
92 31 43 23 21 28 42 41 21 52 29 81 38 57 38 18 96 27 40 1 37 57 67 94 26 10 58 33 24 97 58 92 12 17 39 90 53 71 92 



ruby -Ilib examples/binary_search_tree.rb


[:edward, :nuts, :sugar, :monkey, :willie, :orange, :uncle, :queenie, :zebra, :duff, :xerxes, :charlie, :robert, :butter, :london, :freddy, :apples, :ink, :vinegar, :tommy, :johnnie, :harry, :yellow, :george, :king, :pudding]
[5, 57, 95, 39, 62, 97, 54, 75, 77, 17, 80, 47, 34, 90, 28, 46, 32, 87, 31, 69, 50, 58, 6, 89, 55, 88]
                                    5:edward                                    
                    _                                    57:nuts                
          _                   _               39:monkey           95:sugar      
     _         _         _         _      17:duff  54:uncle 62:willie 97:orange 
  _    _    _    _    _    _    _    _  6:yellow 34:robert 47:charlie 55:king 58:harry 75:queenie   _    _  
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 28:london _ 46:freddy 50:johnnie _ _ _ _ 69:tommy 77:zebra _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 32:apples _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 80:xerxes _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 31:vinegar _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 90:butter _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 87:ink _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
george _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pudding _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
ruby -Ilib examples/tree_push.rb


#
# 30 inserts, puts, df_search
#

[84, 60, 9, 7, 82, 1, 88, 27, 64, 29, 63, 84, 21, 77, 94, 53, 77, 48, 39, 98, 29, 52, 68, 64, 39, 27, 48, 39, 96, 92]
                                       84                                       
                   60                                       9                   
          7                  82                   1                  88         
    27        64        29        63        84        21        77        94    
  53   77   48   39   98   29   52   68   64   39   27   48   39   96   92   _  
#<CompSci::PushTree:0x0055df9376a2f0 @root=#<CompSci::ChildFlexNode:0x2aefc9bb51c8i @value=84 @children=[60, 9]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2aefc9bb4bc4i @value=94 @children=[92]>>

visited 84
visited 60
visited 7
visited 27
visited 53
visited 77
visited 64
visited 48
visited 39
visited 82
visited 29
visited 98
visited 29
visited 63
visited 52
visited 68
visited 9
visited 1
visited 84
visited 64
visited 39
visited 21
visited 27
visited 48
visited 88
visited 77
visited 39
visited 96
visited 94
visited 92

push: [19, 63, 42, 34, 85, 52, 35, 38, 31, 64, 6, 38, 84, 74, 1, 91, 27, 40, 75, 60, 39, 68, 35, 1, 81, 85, 56, 59, 53, 14]
                                       84                                       
                   60                                       9                   
          7                  82                   1                  88         
    27        64        29        63        84        21        77        94    
  53   77   48   39   98   29   52   68   64   39   27   48   39   96   92   19 
63 42 34 85 52 35 38 31 64 6 38 84 74 1 91 27 40 75 60 39 68 35 1 81 85 56 59 53 14 _ _ _ 

#
# 5 seconds worth of pushes
#

100th push: 0.00000289 s
200th push: 0.00000243 s
300th push: 0.00000314 s
400th push: 0.00000290 s
500th push: 0.00000314 s
600th push: 0.00000298 s
700th push: 0.00000302 s
800th push: 0.00000358 s
900th push: 0.00000349 s
1000th push: 0.00000380 s
-----------
    1k push: 0.0569 s (17583 push / s)

1100th push: 0.00000366 s
1200th push: 0.00000425 s
1300th push: 0.00000376 s
1400th push: 0.00000358 s
1500th push: 0.00000361 s
1600th push: 0.00000377 s
1700th push: 0.00000367 s
1800th push: 0.00000399 s
1900th push: 0.00000450 s
2000th push: 0.00000452 s
-----------
    1k push: 0.2077 s (4814 push / s)

2100th push: 0.00000406 s
2200th push: 0.00000513 s
2300th push: 0.00000507 s
2400th push: 0.00000747 s
2500th push: 0.00000586 s
2600th push: 0.00000531 s
2700th push: 0.00000557 s
2800th push: 0.00000578 s
2900th push: 0.00000586 s
3000th push: 0.00000570 s
-----------
    1k push: 0.4444 s (2250 push / s)

3100th push: 0.00000574 s
3200th push: 0.00000684 s
3300th push: 0.00000610 s
3400th push: 0.00000582 s
3500th push: 0.00000596 s
3600th push: 0.00000684 s
3700th push: 0.00000577 s
3800th push: 0.00000624 s
3900th push: 0.00000600 s
4000th push: 0.00000665 s
-----------
    1k push: 0.7402 s (1350 push / s)

4100th push: 0.00000696 s
4200th push: 0.00000662 s
4300th push: 0.00000649 s
4400th push: 0.00000651 s
4500th push: 0.00000672 s
4600th push: 0.00000647 s
4700th push: 0.00000610 s
4800th push: 0.00000647 s
4900th push: 0.00000665 s
5000th push: 0.00000647 s
-----------
    1k push: 1.1436 s (874 push / s)

5100th push: 0.00000780 s
5200th push: 0.00000645 s
5300th push: 0.00003813 s
5400th push: 0.00000678 s
5500th push: 0.00000634 s
5600th push: 0.00000646 s
5700th push: 0.00000691 s
5800th push: 0.00000632 s
5900th push: 0.00000616 s
6000th push: 0.00001452 s
-----------
    1k push: 1.7088 s (585 push / s)

6100th push: 0.00000667 s
6200th push: 0.00000703 s
6300th push: 0.00000660 s
pushed 6331 items in 5.0 s

ruby -Ilib examples/heap_push.rb


#
# 3 seconds worth of pushes
#

10000th push: 0.00000332 s
20000th push: 0.00000429 s
30000th push: 0.00000284 s
40000th push: 0.00000418 s
50000th push: 0.00000279 s
60000th push: 0.00000246 s
70000th push: 0.00000566 s
80000th push: 0.00000277 s
90000th push: 0.00000385 s
100000th push: 0.00000281 s
-------------
    100k push: 0.18203144 s (549k push / s)

110000th push: 0.00000234 s
120000th push: 0.00000246 s
130000th push: 0.00000292 s
140000th push: 0.00000280 s
150000th push: 0.00000438 s
160000th push: 0.00000308 s
170000th push: 0.00000374 s
180000th push: 0.00000457 s
190000th push: 0.00001335 s
200000th push: 0.00000473 s
-------------
    100k push: 0.19740187 s (506k push / s)

210000th push: 0.00000275 s
220000th push: 0.00000319 s
230000th push: 0.00000227 s
240000th push: 0.00000339 s
250000th push: 0.00000276 s
260000th push: 0.00000230 s
270000th push: 0.00000358 s
280000th push: 0.00000245 s
290000th push: 0.00000246 s
300000th push: 0.00000322 s
-------------
    100k push: 0.18507667 s (540k push / s)

310000th push: 0.00000466 s
320000th push: 0.00000231 s
330000th push: 0.00000279 s
340000th push: 0.00000407 s
350000th push: 0.00000233 s
360000th push: 0.00000282 s
370000th push: 0.00002527 s
380000th push: 0.00000231 s
390000th push: 0.00000361 s
400000th push: 0.00000329 s
-------------
    100k push: 0.18395025 s (543k push / s)

410000th push: 0.00001263 s
420000th push: 0.00000353 s
430000th push: 0.00000294 s
440000th push: 0.00000323 s
450000th push: 0.00000243 s
460000th push: 0.00000372 s
470000th push: 0.00000429 s
480000th push: 0.00000324 s
490000th push: 0.00000321 s
500000th push: 0.00000415 s
-------------
    100k push: 0.18809427 s (531k push / s)

510000th push: 0.00000232 s
520000th push: 0.00000239 s
530000th push: 0.00000223 s
540000th push: 0.00000256 s
550000th push: 0.00000409 s
560000th push: 0.00000245 s
570000th push: 0.00000242 s
580000th push: 0.00000334 s
590000th push: 0.00000265 s
600000th push: 0.00000223 s
-------------
    100k push: 0.18286669 s (546k push / s)

610000th push: 0.00000241 s
620000th push: 0.00000273 s
630000th push: 0.00000426 s
640000th push: 0.00000292 s
650000th push: 0.00000305 s
660000th push: 0.00000303 s
670000th push: 0.00000408 s
680000th push: 0.00000313 s
690000th push: 0.00000231 s
700000th push: 0.00000245 s
-------------
    100k push: 0.18969969 s (527k push / s)

710000th push: 0.00000430 s
720000th push: 0.00000342 s
730000th push: 0.00000237 s
740000th push: 0.00000296 s
750000th push: 0.00000207 s
760000th push: 0.00000239 s
770000th push: 0.00000291 s
780000th push: 0.00000299 s
790000th push: 0.00000242 s
800000th push: 0.00000232 s
-------------
    100k push: 0.18647849 s (536k push / s)

810000th push: 0.00000424 s
820000th push: 0.00000248 s
830000th push: 0.00000243 s
840000th push: 0.00000220 s
850000th push: 0.00000439 s
860000th push: 0.00000322 s
870000th push: 0.00000293 s
880000th push: 0.00000277 s
890000th push: 0.00000342 s
900000th push: 0.00000380 s
-------------
    100k push: 0.18541949 s (539k push / s)

910000th push: 0.00000200 s
920000th push: 0.00000365 s
930000th push: 0.00000332 s
940000th push: 0.00000218 s
950000th push: 0.00000575 s
960000th push: 0.00000274 s
970000th push: 0.00000463 s
980000th push: 0.00000285 s
990000th push: 0.00000332 s
1000000th push: 0.00000240 s
-------------
    100k push: 0.18783674 s (532k push / s)

1010000th push: 0.00000362 s
1020000th push: 0.00000232 s
1030000th push: 0.00000228 s
1040000th push: 0.00000229 s
1050000th push: 0.00000357 s
1060000th push: 0.00000344 s
1070000th push: 0.00000226 s
1080000th push: 0.00000366 s
1090000th push: 0.00000299 s
1100000th push: 0.00000282 s
-------------
    100k push: 0.18596164 s (537k push / s)

1110000th push: 0.00000250 s
1120000th push: 0.00000358 s
1130000th push: 0.00000331 s
1140000th push: 0.00000233 s
1150000th push: 0.00000326 s
1160000th push: 0.00000285 s
1170000th push: 0.00000682 s
1180000th push: 0.00000297 s
1190000th push: 0.00000227 s
1200000th push: 0.00000232 s
-------------
    100k push: 0.18607548 s (537k push / s)

1210000th push: 0.00000326 s
1220000th push: 0.00000321 s
1230000th push: 0.00000251 s
1240000th push: 0.00000266 s
1250000th push: 0.00000582 s
1260000th push: 0.00002198 s
1270000th push: 0.00000243 s
1280000th push: 0.00000287 s
1290000th push: 0.00000234 s
1300000th push: 0.00000388 s
-------------
    100k push: 0.18785979 s (532k push / s)

1310000th push: 0.00000518 s
1320000th push: 0.00000462 s
1330000th push: 0.00000365 s
1340000th push: 0.00000330 s
1350000th push: 0.00000301 s
1360000th push: 0.00000226 s
1370000th push: 0.00000313 s
1380000th push: 0.00000508 s
1390000th push: 0.00000334 s
1400000th push: 0.00000560 s
-------------
    100k push: 0.18876758 s (529k push / s)

1410000th push: 0.00000302 s
1420000th push: 0.00000213 s
1430000th push: 0.00000234 s
1440000th push: 0.00000226 s
1450000th push: 0.00000426 s
1460000th push: 0.00002038 s
1470000th push: 0.00000294 s
1480000th push: 0.00000240 s
1490000th push: 0.00000459 s
1500000th push: 0.00000332 s
-------------
    100k push: 0.18604618 s (537k push / s)

1510000th push: 0.00000241 s
1520000th push: 0.00000273 s
1530000th push: 0.00000282 s
1540000th push: 0.00000243 s
1550000th push: 0.00000220 s
1560000th push: 0.00000469 s
1570000th push: 0.00000296 s
1580000th push: 0.00000221 s
1590000th push: 0.00000473 s
1600000th push: 0.00000228 s
-------------
    100k push: 0.18745375 s (533k push / s)

pushed 1604800 items in 3.0 s

still a heap with 1604816 items? YES - 1.603 sec

ruby -Ilib examples/heap.rb


#
# display the results of TernaryHeap push and pop
#

push: 25 29 79 29 69 72 20 56 73 76 98 3 61 25 86 47 43 16 94 75 39 34 61 88 75 87 79 10 77 1
array: [98, 94, 88, 79, 72, 86, 75, 76, 87, 77, 29, 3, 61, 25, 25, 47, 43, 16, 69, 20, 39, 34, 29, 61, 75, 56, 79, 10, 73, 1]
heap: true
                                       98                                       
            94                        88                        79            
   72      86      75      76      87      77      29       3      61   
25 25 47 43 16 69 20 39 34 29 61 75 56 79 10 73 1 


pop: 98
array: [94, 86, 88, 79, 72, 69, 75, 76, 87, 77, 29, 3, 61, 25, 25, 47, 43, 16, 1, 20, 39, 34, 29, 61, 75, 56, 79, 10, 73]
heap: true
                                       94                                       
            86                        88                        79            
   72      69      75      76      87      77      29       3      61   
25 25 47 43 16 1 20 39 34 29 61 75 56 79 10 73 


pop: 94 88 87 86 79 79 77 76 75
array: [75, 72, 73, 61, 47, 69, 39, 61, 34, 29, 29, 3, 56, 25, 25, 10, 43, 16, 1, 20]
heap: true
                                       75                                       
            72                        73                        61            
   47      69      39      61      34      29      29       3      56   
25 25 10 43 16 1 20 


push: 21 92 86 38 55 46 64 29 70 18 14 61 46 21 50 87 76 35 2 25 5 88 49 79 60 76 91 44 59 3
array: [92, 91, 86, 87, 88, 69, 72, 73, 64, 70, 61, 76, 56, 49, 76, 79, 43, 16, 1, 20, 21, 39, 61, 38, 55, 34, 46, 29, 29, 18, 14, 29, 46, 21, 3, 50, 61, 35, 2, 25, 5, 25, 47, 25, 60, 75, 10, 44, 59, 3]
heap: true
                                       92                                       
            91                        86                        87            
   88      69      72      73      64      70      61      76      56   
49 76 79 43 16 1 20 21 39 61 38 55 34 46 29 29 18 14 29 46 21 3 50 61 35 2 25 
5 25 47 25 60 75 10 44 59 3 


