Run options: --seed 59767

# Running:

............................................................................................S..S..

Finished in 0.370413s, 264.5694 runs/s, 33208.8553 assertions/s.

98 runs, 12301 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.09 0.07 0.03 1/84 2996

#
# Try out Binary-, Ternary-, and QuaternaryTree
#

[57, 19, 33, 50, 40, 88, 73, 38, 72, 84, 97, 41, 17, 18, 75, 17, 82, 29, 36, 79, 39, 86, 81, 25, 15, 11, 18, 28, 34, 75]
#<CompSci::BinaryTree:0x0056503e688f28 @root=#<CompSci::ChildFlexNode:0x2b281f344758i @value=57 @children=[19, 33]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2b281f3440a0i @value=75 @children=[75]>>
                                       57                                       
                   19                                      33                   
         50                  40                  88                  73         
    38        72        84        97        41        17        18        75    
  17   82   29   36   79   39   86   81   25   15   11   18   28   34   75 

df_search visited: 57 19 50 38 17 82 72 29 36 40 84 79 39 97 86 81 33 88 41 25 15 17 11 18 73 18 28 34 75 75


push: [56, 16, 76, 72, 55, 46, 10, 41, 87, 90, 60, 36, 53, 97, 81, 6, 79, 65, 10, 11, 63, 75, 46, 63, 2, 16, 72, 19, 61, 68]

                                       57                                       
                   19                                      33                   
         50                  40                  88                  73         
    38        72        84        97        41        17        18        75    
  17   82   29   36   79   39   86   81   25   15   11   18   28   34   75   56 
16 76 72 55 46 10 41 87 90 60 36 53 97 81 6 79 65 10 11 63 75 46 63 2 16 72 19 61 68 


[57, 19, 33, 50, 40, 88, 73, 38, 72, 84, 97, 41, 17, 18, 75, 17, 82, 29, 36, 79, 39, 86, 81, 25, 15, 11, 18, 28, 34, 75]
#<CompSci::TernaryTree:0x0056503e6348d8 @root=#<CompSci::ChildFlexNode:0x2b281f31a458i @value=57 @children=[19, 33, 50]>, @child_slots=3, @open_parent=#<CompSci::ChildFlexNode:0x2b281f31a174i @value=84 @children=[34, 75]>>
                                       57                                       
            19                        33                        50            
   40      88      73      38      72      84      97      41      17   
18 75 17 82 29 36 79 39 86 81 25 15 11 18 28 34 75 

df_search visited: 57 19 40 18 75 17 88 82 29 36 73 79 39 86 33 38 81 25 15 72 11 18 28 84 34 75 50 97 41 17


push: [46, 57, 26, 47, 90, 95, 48, 63, 34, 82, 96, 73, 66, 93, 83, 39, 28, 23, 86, 63, 77, 45, 80, 74, 49, 60, 97, 87, 1, 23]

                                       57                                       
            19                        33                        50            
   40      88      73      38      72      84      97      41      17   
18 75 17 82 29 36 79 39 86 81 25 15 11 18 28 34 75 46 57 26 47 90 95 48 63 34 82 
96 73 66 93 83 39 28 23 86 63 77 45 80 74 49 60 97 87 1 23 


[57, 19, 33, 50, 40, 88, 73, 38, 72, 84, 97, 41, 17, 18, 75, 17, 82, 29, 36, 79, 39, 86, 81, 25, 15, 11, 18, 28, 34, 75]
#<CompSci::QuaternaryTree:0x0056503e61a550 @root=#<CompSci::ChildFlexNode:0x2b281f30d244i @value=57 @children=[19, 33, 50, 40]>, @child_slots=4, @open_parent=#<CompSci::ChildFlexNode:0x2b281f30cefci @value=38 @children=[75]>>
                                       57                                       
         19                  33                  50                  40         
  88   73   38   72   84   97   41   17   18   75   17   82   29   36   79   39 
86 81 25 15 11 18 28 34 75 

df_search visited: 57 19 88 86 81 25 15 73 11 18 28 34 38 75 72 33 84 97 41 17 50 18 75 17 82 40 29 36 79 39


push: [78, 6, 76, 21, 41, 34, 87, 47, 22, 94, 32, 45, 54, 2, 30, 26, 21, 52, 80, 48, 21, 6, 64, 63, 46, 4, 53, 13, 64, 53]

                                       57                                       
         19                  33                  50                  40         
  88   73   38   72   84   97   41   17   18   75   17   82   29   36   79   39 
86 81 25 15 11 18 28 34 75 78 6 76 21 41 34 87 47 22 94 32 45 54 2 30 26 21 52 80 48 21 6 64 63 46 4 53 13 64 53 


ruby -Ilib examples/complete_tree.rb


#
# Print CompleteBinary-, Ternary-, and QuaternaryTree
#

[17, 54, 85, 63, 41, 63, 75, 73, 75, 83, 49, 41, 40, 78, 6, 54, 86, 73, 51, 61, 52, 0, 16, 81, 22, 6, 9, 29, 35, 18]
#<CompSci::CompleteBinaryTree:0x00558b97da02c8 @array=[17, 54, 85, 63, 41, 63, 75, 73, 75, 83, 49, 41, 40, 78, 6, 54, 86, 73, 51, 61, 52, 0, 16, 81, 22, 6, 9, 29, 35, 18], @child_slots=2>
                                       17                                       
                   54                                      85                   
         63                  41                  63                  75         
    73        75        83        49        41        40        78         6    
  54   86   73   51   61   52   0    16   81   22   6    9    29   35   18 



push: [24, 10, 77, 79, 92, 2, 42, 91, 76, 87, 49, 62, 88, 72, 80, 33, 88, 60, 44, 3, 31, 76, 19, 18, 8, 40, 31, 37, 39, 86]
                                       17                                       
                   54                                      85                   
         63                  41                  63                  75         
    73        75        83        49        41        40        78         6    
  54   86   73   51   61   52   0    16   81   22   6    9    29   35   18   24 
10 77 79 92 2 42 91 76 87 49 62 88 72 80 33 88 60 44 3 31 76 19 18 8 40 31 37 39 86 



[17, 54, 85, 63, 41, 63, 75, 73, 75, 83, 49, 41, 40, 78, 6, 54, 86, 73, 51, 61, 52, 0, 16, 81, 22, 6, 9, 29, 35, 18]
#<CompSci::CompleteTernaryTree:0x00558b97d97970 @array=[17, 54, 85, 63, 41, 63, 75, 73, 75, 83, 49, 41, 40, 78, 6, 54, 86, 73, 51, 61, 52, 0, 16, 81, 22, 6, 9, 29, 35, 18], @child_slots=3>
                                       17                                       
            54                        85                        63            
   41      63      75      73      75      83      49      41      40   
78 6 54 86 73 51 61 52 0 16 81 22 6 9 29 35 18 



push: [32, 48, 91, 84, 79, 37, 98, 9, 0, 69, 29, 19, 82, 62, 58, 68, 9, 82, 45, 77, 9, 16, 41, 62, 21, 46, 0, 90, 45, 10]
                                       17                                       
            54                        85                        63            
   41      63      75      73      75      83      49      41      40   
78 6 54 86 73 51 61 52 0 16 81 22 6 9 29 35 18 32 48 91 84 79 37 98 9 0 69 
29 19 82 62 58 68 9 82 45 77 9 16 41 62 21 46 0 90 45 10 



[17, 54, 85, 63, 41, 63, 75, 73, 75, 83, 49, 41, 40, 78, 6, 54, 86, 73, 51, 61, 52, 0, 16, 81, 22, 6, 9, 29, 35, 18]
#<CompSci::CompleteQuaternaryTree:0x00558b97c95680 @array=[17, 54, 85, 63, 41, 63, 75, 73, 75, 83, 49, 41, 40, 78, 6, 54, 86, 73, 51, 61, 52, 0, 16, 81, 22, 6, 9, 29, 35, 18], @child_slots=4>
                                       17                                       
         54                  85                  63                  41         
  63   75   73   75   83   49   41   40   78   6    54   86   73   51   61   52 
0 16 81 22 6 9 29 35 18 



push: [22, 58, 86, 84, 9, 67, 37, 69, 55, 20, 1, 26, 73, 82, 58, 26, 23, 16, 87, 18, 46, 18, 7, 78, 2, 21, 51, 96, 93, 86]
                                       17                                       
         54                  85                  63                  41         
  63   75   73   75   83   49   41   40   78   6    54   86   73   51   61   52 
0 16 81 22 6 9 29 35 18 22 58 86 84 9 67 37 69 55 20 1 26 73 82 58 26 23 16 87 18 46 18 7 78 2 21 51 96 93 86 



ruby -Ilib examples/binary_search_tree.rb


[20, 79, 15, 40, 89, 63, 33, 22, 41, 42, 75, 83, 72, 45, 91]
                                       20                                       
                   15                                      79                   
          _                   _                  40                  89         
     _         _         _         _        33        63        83        91    
  _    _    _    _    _    _    _    _    22   _    41   75   _    _    _    _  
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 42 72 _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 45 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
ruby -Ilib examples/tree_push.rb


#
# 3 seconds worth of pushes
#

100th push: 0.00000294 s
200th push: 0.00000247 s
300th push: 0.00000248 s
400th push: 0.00000330 s
500th push: 0.00000342 s
600th push: 0.00000298 s
700th push: 0.00000319 s
800th push: 0.00000304 s
900th push: 0.00000324 s
1000th push: 0.00000344 s
-----------
    1k push: 0.0533 s (18764 push / s)

1100th push: 0.00000334 s
1200th push: 0.00000327 s
1300th push: 0.00000352 s
1400th push: 0.00000368 s
1500th push: 0.00000332 s
1600th push: 0.00000336 s
1700th push: 0.00000361 s
1800th push: 0.00000374 s
1900th push: 0.00000365 s
2000th push: 0.00000376 s
-----------
    1k push: 0.1938 s (5158 push / s)

2100th push: 0.00000367 s
2200th push: 0.00000478 s
2300th push: 0.00000509 s
2400th push: 0.00000542 s
2500th push: 0.00000518 s
2600th push: 0.00000540 s
2700th push: 0.00000546 s
2800th push: 0.00000554 s
2900th push: 0.00000588 s
3000th push: 0.00000557 s
-----------
    1k push: 0.4173 s (2396 push / s)

3100th push: 0.00000769 s
3200th push: 0.00000621 s
3300th push: 0.00000579 s
3400th push: 0.00000772 s
3500th push: 0.00000644 s
3600th push: 0.00000658 s
3700th push: 0.00000654 s
3800th push: 0.00000556 s
3900th push: 0.00000642 s
4000th push: 0.00000657 s
-----------
    1k push: 0.7019 s (1424 push / s)

4100th push: 0.00000637 s
4200th push: 0.00000622 s
4300th push: 0.00002822 s
4400th push: 0.00000608 s
4500th push: 0.00000609 s
4600th push: 0.00000646 s
4700th push: 0.00000570 s
4800th push: 0.00000692 s
4900th push: 0.00002028 s
5000th push: 0.00000684 s
-----------
    1k push: 1.1331 s (882 push / s)

5100th push: 0.00000634 s
5200th push: 0.00000658 s
5300th push: 0.00000730 s
pushed 5351 items in 3.0 s

#
# 30 inserts, puts, df_search
#

[49, 30, 45, 32, 90, 73, 88, 32, 13, 60, 67, 45, 17, 24, 36, 14, 88, 84, 35, 37, 95, 5, 98, 0, 9, 54, 69, 79, 8, 73]
                                       49                                       
                   30                                      45                   
         32                  90                  73                  88         
    32        13        60        67        45        17        24        36    
  14   88   84   35   37   95   5    98   0    9    54   69   79   8    73 
#<CompSci::BinaryTree:0x005577d3379740 @root=#<CompSci::ChildFlexNode:0x2abbe99bca88i @value=49 @children=[30, 45]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2abbe99bacd8i @value=36 @children=[73]>>

visited 49
visited 30
visited 32
visited 32
visited 14
visited 88
visited 13
visited 84
visited 35
visited 90
visited 60
visited 37
visited 95
visited 67
visited 5
visited 98
visited 45
visited 73
visited 45
visited 0
visited 9
visited 17
visited 54
visited 69
visited 88
visited 24
visited 79
visited 8
visited 36
visited 73

push: [65, 90, 21, 40, 98, 57, 2, 20, 10, 26, 74, 33, 72, 28, 88, 86, 70, 36, 79, 97, 51, 62, 50, 5, 73, 52, 28, 6, 7, 62]
                                       49                                       
                   30                                      45                   
         32                  90                  73                  88         
    32        13        60        67        45        17        24        36    
  14   88   84   35   37   95   5    98   0    9    54   69   79   8    73   65 
90 21 40 98 57 2 20 10 26 74 33 72 28 88 86 70 36 79 97 51 62 50 5 73 52 28 6 7 62 

ruby -Ilib examples/heap_push.rb


#
# 3 seconds worth of pushes
#

10000th push: 0.00000370 s
20000th push: 0.00000186 s
30000th push: 0.00000231 s
40000th push: 0.00000234 s
50000th push: 0.00000132 s
60000th push: 0.00000314 s
70000th push: 0.00000243 s
80000th push: 0.00000198 s
90000th push: 0.00000193 s
100000th push: 0.00000209 s
-------------
    100k push: 0.18387642 s (543k push / s)

110000th push: 0.00000183 s
120000th push: 0.00000130 s
130000th push: 0.00000127 s
140000th push: 0.00000138 s
150000th push: 0.00000236 s
160000th push: 0.00000141 s
170000th push: 0.00000136 s
180000th push: 0.00000137 s
190000th push: 0.00000135 s
200000th push: 0.00000186 s
-------------
    100k push: 0.18158469 s (550k push / s)

210000th push: 0.00000194 s
220000th push: 0.00000237 s
230000th push: 0.00000185 s
240000th push: 0.00000182 s
250000th push: 0.00000382 s
260000th push: 0.00000164 s
270000th push: 0.00000129 s
280000th push: 0.00000183 s
290000th push: 0.00000226 s
300000th push: 0.00000129 s
-------------
    100k push: 0.18202058 s (549k push / s)

310000th push: 0.00000121 s
320000th push: 0.00000131 s
330000th push: 0.00000135 s
340000th push: 0.00000228 s
350000th push: 0.00000138 s
360000th push: 0.00000124 s
370000th push: 0.00000193 s
380000th push: 0.00000143 s
390000th push: 0.00000155 s
400000th push: 0.00000132 s
-------------
    100k push: 0.18062888 s (553k push / s)

410000th push: 0.00000184 s
420000th push: 0.00000387 s
430000th push: 0.00000179 s
440000th push: 0.00000132 s
450000th push: 0.00000267 s
460000th push: 0.00000174 s
470000th push: 0.00000231 s
480000th push: 0.00000227 s
490000th push: 0.00000129 s
500000th push: 0.00000194 s
-------------
    100k push: 0.18222464 s (548k push / s)

510000th push: 0.00000201 s
520000th push: 0.00000186 s
530000th push: 0.00000134 s
540000th push: 0.00000207 s
550000th push: 0.00000403 s
560000th push: 0.00000165 s
570000th push: 0.00000129 s
580000th push: 0.00000133 s
590000th push: 0.00000128 s
600000th push: 0.00000229 s
-------------
    100k push: 0.18337438 s (545k push / s)

610000th push: 0.00000182 s
620000th push: 0.00000158 s
630000th push: 0.00000125 s
640000th push: 0.00000190 s
650000th push: 0.00000130 s
660000th push: 0.00000245 s
670000th push: 0.00000184 s
680000th push: 0.00000144 s
690000th push: 0.00000182 s
700000th push: 0.00000188 s
-------------
    100k push: 0.18282750 s (546k push / s)

710000th push: 0.00000194 s
720000th push: 0.00000127 s
730000th push: 0.00000134 s
740000th push: 0.00000135 s
750000th push: 0.00000364 s
760000th push: 0.00000185 s
770000th push: 0.00000129 s
780000th push: 0.00000147 s
790000th push: 0.00000187 s
800000th push: 0.00000182 s
-------------
    100k push: 0.18349610 s (544k push / s)

810000th push: 0.00000185 s
820000th push: 0.00000128 s
830000th push: 0.00000180 s
840000th push: 0.00000118 s
850000th push: 0.00000235 s
860000th push: 0.00000182 s
870000th push: 0.00000182 s
880000th push: 0.00000227 s
890000th push: 0.00000228 s
900000th push: 0.00000227 s
-------------
    100k push: 0.18344814 s (545k push / s)

910000th push: 0.00000137 s
920000th push: 0.00000127 s
930000th push: 0.00000181 s
940000th push: 0.00000133 s
950000th push: 0.00000129 s
960000th push: 0.00000291 s
970000th push: 0.00000136 s
980000th push: 0.00000129 s
990000th push: 0.00000127 s
1000000th push: 0.00000192 s
-------------
    100k push: 0.18311341 s (546k push / s)

1010000th push: 0.00000252 s
1020000th push: 0.00000128 s
1030000th push: 0.00000186 s
1040000th push: 0.00000127 s
1050000th push: 0.00000264 s
1060000th push: 0.00000319 s
1070000th push: 0.00000129 s
1080000th push: 0.00000187 s
1090000th push: 0.00000185 s
1100000th push: 0.00000202 s
-------------
    100k push: 0.18346230 s (545k push / s)

1110000th push: 0.00000138 s
1120000th push: 0.00000136 s
1130000th push: 0.00000141 s
1140000th push: 0.00000199 s
1150000th push: 0.00000138 s
1160000th push: 0.00000132 s
1170000th push: 0.00000274 s
1180000th push: 0.00000134 s
1190000th push: 0.00000141 s
1200000th push: 0.00000273 s
-------------
    100k push: 0.18825069 s (531k push / s)

1210000th push: 0.00000314 s
1220000th push: 0.00000144 s
1230000th push: 0.00000301 s
1240000th push: 0.00000296 s
1250000th push: 0.00000148 s
1260000th push: 0.00000208 s
1270000th push: 0.00000127 s
1280000th push: 0.00000140 s
1290000th push: 0.00000192 s
1300000th push: 0.00001243 s
-------------
    100k push: 0.18823782 s (531k push / s)

1310000th push: 0.00000294 s
1320000th push: 0.00000121 s
1330000th push: 0.00000183 s
1340000th push: 0.00000180 s
1350000th push: 0.00000122 s
1360000th push: 0.00000126 s
1370000th push: 0.00000232 s
1380000th push: 0.00000270 s
1390000th push: 0.00000623 s
1400000th push: 0.00000190 s
-------------
    100k push: 0.18387418 s (543k push / s)

1410000th push: 0.00000219 s
1420000th push: 0.00000136 s
1430000th push: 0.00000193 s
1440000th push: 0.00000185 s
1450000th push: 0.00000188 s
1460000th push: 0.00001712 s
1470000th push: 0.00000181 s
1480000th push: 0.00000135 s
1490000th push: 0.00000134 s
1500000th push: 0.00000132 s
-------------
    100k push: 0.18773533 s (532k push / s)

1510000th push: 0.00000125 s
1520000th push: 0.00000133 s
1530000th push: 0.00000193 s
1540000th push: 0.00000134 s
1550000th push: 0.00000182 s
1560000th push: 0.00000179 s
1570000th push: 0.00000121 s
1580000th push: 0.00000133 s
1590000th push: 0.00000224 s
1600000th push: 0.00000126 s
-------------
    100k push: 0.18485081 s (540k push / s)

1610000th push: 0.00000267 s
1620000th push: 0.00000182 s
1630000th push: 0.00000322 s
pushed 1631201 items in 3.0 s

still a heap with 1631217 items? YES - 1.625 sec

ruby -Ilib examples/heap.rb


#
# display the results of TernaryHeap push and pop
#

push: 39 10 72 69 18 78 55 15 31 72 27 17 81 40 69 51 83 27 2 33 2 47 59 31 59 84 88 3 18 63
array: [88, 81, 84, 78, 69, 72, 55, 59, 83, 63, 27, 17, 69, 10, 40, 51, 18, 27, 2, 33, 2, 47, 15, 31, 59, 31, 72, 3, 18, 39]
heap: true
                                       88                                       
            81                        84                        78            
   69      72      55      59      83      63      27      17      69   
10 40 51 18 27 2 33 2 47 15 31 59 31 72 3 18 39 


pop: 88
array: [84, 81, 83, 78, 69, 72, 55, 59, 72, 63, 27, 17, 69, 10, 40, 51, 18, 27, 2, 33, 2, 47, 15, 31, 59, 31, 39, 3, 18]
heap: true
                                       84                                       
            81                        83                        78            
   69      72      55      59      72      63      27      17      69   
10 40 51 18 27 2 33 2 47 15 31 59 31 39 3 18 


pop: 84 83 81 78 72 72 69 69 63
array: [59, 59, 47, 31, 51, 27, 55, 2, 39, 31, 27, 17, 18, 10, 40, 15, 18, 3, 2, 33]
heap: true
                                       59                                       
            59                        47                        31            
   51      27      55       2      39      31      27      17      18   
10 40 15 18 3 2 33 


push: 82 52 23 93 23 80 19 7 51 91 72 85 17 59 3 37 7 43 57 72 93 91 30 68 0 85 97 1 58 63
array: [97, 93, 91, 85, 93, 63, 59, 47, 80, 82, 59, 37, 72, 59, 85, 91, 27, 3, 2, 33, 55, 52, 2, 23, 23, 39, 19, 7, 31, 51, 72, 27, 17, 31, 3, 17, 7, 18, 43, 57, 10, 51, 30, 40, 0, 68, 15, 1, 58, 18]
heap: true
                                       97                                       
            93                        91                        85            
   93      63      59      47      80      82      59      37      72   
59 85 91 27 3 2 33 55 52 2 23 23 39 19 7 31 51 72 27 17 31 3 17 7 18 43 57 
10 51 30 40 0 68 15 1 58 18 


