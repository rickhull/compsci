Run options: --seed 32849

# Running:

..................................S.S............................................................................

Finished in 0.364410s, 310.0901 runs/s, 33972.6985 assertions/s.

113 runs, 12380 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.00 0.01 0.00 1/94 18031


#
# Fill up and display some trees
#

vals: [9, 33, 71, 83, 97, 39, 14, 1, 30, 90, 84, 94, 90, 27, 60, 84, 31, 49, 1, 27, 29, 39, 86, 77, 53, 9, 73, 9, 24, 48]

#
# Children: 2
#

#<CompSci::Node:0x2b24a69835a0i @value=9 @children=[33, 71]>

                                        9                                       
                   33                                      71                   
         83                  97                  39                  14         
     1        30        90        84        94        90        27        60    
  84   31   49   1    27   29   39   86   77   53   9    73   9    24   48      


#
# Children: 3
#

#<CompSci::Node:0x2b24a6980b84i @value=9 @children=[33, 71, 83]>

                                        9                                       
            33                        71                        83            
   97      39      14       1      30      90      84      94      90   
27 60 84 31 49 1 27 29 39 86 77 53 9 73 9 24 48                     


#
# Children: 4
#

#<CompSci::Node:0x2b24a6901014i @value=9 @children=[33, 71, 83, 97]>

                                        9                                       
         33                  71                  83                  97         
  39   14   1    30   90   84   94   90   27   60   84   31   49   1    27   29 
39 86 77 53 9 73 9 24 48                                                        

ruby -Ilib examples/ternary_search_tree.rb



#
# Insert 50 nodes into a ternary search tree (random keys)
#

31:21
37:22
47:25
25:48
21:39
12:5
45:26
5:29
37:13
1:11
31:26
48:0
36:46
23:2
0:13
22:24
47:38
15:11
12:11
27:20
43:35
41:13
46:11
44:6
16:32
9:14
41:37
30:16
34:33
10:31
9:9
24:1
33:16
33:15
49:20
19:15
4:8
12:39
39:38
29:5
19:41
19:26
4:15
27:26
14:23
30:15
22:3
9:12
7:12
41:19
                                      32:25                                     
           31:21                       _                       37:22          
  25:48   31:26     _       _       _       _     36:46   37:13   47:25 
21:39 _ 27:20 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 34:33 _ _ _ _ _ 45:26 47:38 48:0 
12:5 _ 23:2 _ _ _ _ 27:26 30:16 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 33:16 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 43:35 _ 46:11 _ _ _ _ _ 49:20 




nodes.size = 6561; abort render

#
# Search for 50 keys in order
#

search 0: 13
search 1: 11
search 2: 
search 3: 
search 4: 8 15
search 5: 29
search 6: 
search 7: 12
search 8: 
search 9: 14 9 12
search 10: 31
search 11: 
search 12: 5 11 39
search 13: 
search 14: 23
search 15: 11
search 16: 32
search 17: 
search 18: 
search 19: 15 41 26
search 20: 
search 21: 39
search 22: 24 3
search 23: 2
search 24: 1
search 25: 48
search 26: 
search 27: 20 26
search 28: 
search 29: 5
search 30: 16 15
search 31: 21 26
search 32: 25
search 33: 16 15
search 34: 33
search 35: 
search 36: 46
search 37: 22 13
search 38: 
search 39: 38
search 40: 
search 41: 13 37 19
search 42: 
search 43: 35
search 44: 6
search 45: 26
search 46: 11
search 47: 25 38
search 48: 0
search 49: 20
ruby -Ilib examples/complete_tree.rb



#
# Print CompSci::CompleteBinaryTree filled with static vals
#

initial vals: [54, 0, 84, 34, 17, 0, 71, 23, 20, 9, 84, 71, 94, 82, 4, 44, 39, 39, 35, 24, 30, 87, 43, 80, 77, 95, 83, 27, 36, 19]
#<CompSci::CompleteBinaryTree:0x0055620afff2c8 @array=[54, 0, 84, 34, 17, 0, 71, 23, 20, 9, 84, 71, 94, 82, 4, 44, 39, 39, 35, 24, 30, 87, 43, 80, 77, 95, 83, 27, 36, 19], @child_slots=2>

                                       54                                       
                    0                                      84                   
         34                  17                   0                  71         
    23        20         9        84        71        94        82         4    
  44   39   39   35   24   30   87   43   80   77   95   83   27   36   19 


#
# Push random vals and print again
#

new vals: [73, 55, 5, 58, 40, 30, 18, 2, 91, 54, 73, 68, 33, 8, 44, 41, 11, 0, 18, 89, 43, 17, 16, 55, 7, 52, 74, 90, 18, 39]

                                       54                                       
                    0                                      84                   
         34                  17                   0                  71         
    23        20         9        84        71        94        82         4    
  44   39   39   35   24   30   87   43   80   77   95   83   27   36   19   73 
55 5 58 40 30 18 2 91 54 73 68 33 8 44 41 11 0 18 89 43 17 16 55 7 52 74 90 18 39 



#
# Print CompSci::CompleteTernaryTree filled with static vals
#

initial vals: [54, 0, 84, 34, 17, 0, 71, 23, 20, 9, 84, 71, 94, 82, 4, 44, 39, 39, 35, 24, 30, 87, 43, 80, 77, 95, 83, 27, 36, 19]
#<CompSci::CompleteTernaryTree:0x0055620aff6ba0 @array=[54, 0, 84, 34, 17, 0, 71, 23, 20, 9, 84, 71, 94, 82, 4, 44, 39, 39, 35, 24, 30, 87, 43, 80, 77, 95, 83, 27, 36, 19], @child_slots=3>

                                       54                                       
             0                        84                        34            
   17       0      71      23      20       9      84      71      94   
82 4 44 39 39 35 24 30 87 43 80 77 95 83 27 36 19 


#
# Push random vals and print again
#

new vals: [16, 18, 56, 33, 70, 82, 21, 49, 23, 20, 89, 62, 50, 30, 3, 23, 23, 44, 49, 55, 64, 80, 79, 49, 34, 10, 43, 84, 88, 34]

                                       54                                       
             0                        84                        34            
   17       0      71      23      20       9      84      71      94   
82 4 44 39 39 35 24 30 87 43 80 77 95 83 27 36 19 16 18 56 33 70 82 21 49 23 20 
89 62 50 30 3 23 23 44 49 55 64 80 79 49 34 10 43 84 88 34 



#
# Print CompSci::CompleteQuaternaryTree filled with static vals
#

initial vals: [54, 0, 84, 34, 17, 0, 71, 23, 20, 9, 84, 71, 94, 82, 4, 44, 39, 39, 35, 24, 30, 87, 43, 80, 77, 95, 83, 27, 36, 19]
#<CompSci::CompleteQuaternaryTree:0x0055620afedc58 @array=[54, 0, 84, 34, 17, 0, 71, 23, 20, 9, 84, 71, 94, 82, 4, 44, 39, 39, 35, 24, 30, 87, 43, 80, 77, 95, 83, 27, 36, 19], @child_slots=4>

                                       54                                       
          0                  84                  34                  17         
  0    71   23   20   9    84   71   94   82   4    44   39   39   35   24   30 
87 43 80 77 95 83 27 36 19 


#
# Push random vals and print again
#

new vals: [75, 13, 81, 20, 75, 52, 5, 17, 69, 26, 33, 29, 3, 86, 94, 45, 46, 19, 50, 22, 76, 56, 46, 20, 40, 13, 75, 6, 30, 4]

                                       54                                       
          0                  84                  34                  17         
  0    71   23   20   9    84   71   94   82   4    44   39   39   35   24   30 
87 43 80 77 95 83 27 36 19 75 13 81 20 75 52 5 17 69 26 33 29 3 86 94 45 46 19 50 22 76 56 46 20 40 13 75 6 30 4 


ruby -Ilib examples/binary_search_tree.rb



#
# Insert nodes into a BST (random keys, duplicates: true)
#

[:nuts, :apples, :xerxes, :robert, :ink, :monkey, :freddy, :queenie, :tommy, :zebra, :edward, :sugar, :pudding, :johnnie, :uncle, :butter, :vinegar, :london, :harry, :george, :orange, :yellow, :willie, :king, :charlie, :duff]
[43, 88, 12, 58, 69, 24, 33, 9, 37, 91, 61, 12, 26, 21, 80, 9, 37, 93, 44, 28, 86, 0, 27, 64, 85, 34]
                                     43:nuts                                    
                12:xerxes                               88:apples               
      9:queenie           24:monkey           58:robert           91:zebra      
 0:yellow  9:butter  12:sugar 33:freddy  44:harry   69:ink       _    93:london 
  _    _    _    _    _  21:johnnie 26:pudding 37:tommy   _    _  61:edward 80:uncle   _    _    _    _  
_ _ _ _ _ _ _ _ _ _ _ _ _ 28:george 34:duff 37:vinegar _ _ _ _ _ 64:king _ 86:orange _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 27:willie _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 85:charlie _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


#
# Insert 30 nodes into a BST (unique keys, duplicates: false)
#

                                      19:4                                      
                  9:43                                    22:75                 
        5:35                11:38               20:64               29:69       
   1:52      6:33      10:81     17:94       _       21:39     23:96     30:20  
  _  3:65   _  7:36   _    _  13:78 18:9   _    _    _    _    _  26:58   _    _  
_ _ 2:94 4:27 _ _ _ 8:67 _ _ _ _ 12:31 14:58 _ _ _ _ _ _ _ _ _ _ _ _ 25:69 27:15 _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 15:72 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 24:48 _ _ 28:44 _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 16:79 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

#
# Search for 30 different keys
#

found 1:52
found 2:94
found 3:65
found 4:27
found 5:35
found 6:33
found 7:36
found 8:67
found 9:43
found 10:81
found 11:38
found 12:31
found 13:78
found 14:58
found 15:72
found 16:79
found 17:94
found 18:9
found 19:4
found 20:64
found 21:39
found 22:75
found 23:96
found 24:48
found 25:69
found 26:58
found 27:15
found 28:44
found 29:69
found 30:20
ruby -Ilib examples/heap_push.rb



#
# 3 seconds worth of Heap pushes
#

10000th push: 0.00000347 s
20000th push: 0.00000305 s
30000th push: 0.00000440 s
40000th push: 0.00002257 s
50000th push: 0.00000357 s
60000th push: 0.00000363 s
70000th push: 0.00000375 s
80000th push: 0.00000353 s
90000th push: 0.00000320 s
100000th push: 0.00000309 s
-------------
    100k push: 0.19252476 s (519k push / s)

110000th push: 0.00000356 s
120000th push: 0.00000290 s
130000th push: 0.00000241 s
140000th push: 0.00000270 s
150000th push: 0.00000246 s
160000th push: 0.00000247 s
170000th push: 0.00000285 s
180000th push: 0.00000305 s
190000th push: 0.00000346 s
200000th push: 0.00000261 s
-------------
    100k push: 0.18921510 s (528k push / s)

210000th push: 0.00000350 s
220000th push: 0.00000388 s
230000th push: 0.00000346 s
240000th push: 0.00000552 s
250000th push: 0.00000245 s
260000th push: 0.00000445 s
270000th push: 0.00000236 s
280000th push: 0.00000297 s
290000th push: 0.00000241 s
300000th push: 0.00000297 s
-------------
    100k push: 0.19260201 s (519k push / s)

310000th push: 0.00000314 s
320000th push: 0.00000417 s
330000th push: 0.00000347 s
340000th push: 0.00000246 s
350000th push: 0.00000346 s
360000th push: 0.00000244 s
370000th push: 0.00000244 s
380000th push: 0.00000249 s
390000th push: 0.00000254 s
400000th push: 0.00000307 s
-------------
    100k push: 0.19218548 s (520k push / s)

410000th push: 0.00000330 s
420000th push: 0.00000278 s
430000th push: 0.00000399 s
440000th push: 0.00000269 s
450000th push: 0.00000297 s
460000th push: 0.00000310 s
470000th push: 0.00000333 s
480000th push: 0.00000366 s
490000th push: 0.00000361 s
500000th push: 0.00000318 s
-------------
    100k push: 0.19302900 s (518k push / s)

510000th push: 0.00000344 s
520000th push: 0.00000342 s
530000th push: 0.00000253 s
540000th push: 0.00000391 s
550000th push: 0.00000301 s
560000th push: 0.00000246 s
570000th push: 0.00000249 s
580000th push: 0.00000291 s
590000th push: 0.00000306 s
600000th push: 0.00000265 s
-------------
    100k push: 0.19376453 s (516k push / s)

610000th push: 0.00000243 s
620000th push: 0.00000250 s
630000th push: 0.00000309 s
640000th push: 0.00000300 s
650000th push: 0.00000225 s
660000th push: 0.00000230 s
670000th push: 0.00000324 s
680000th push: 0.00000301 s
690000th push: 0.00000332 s
700000th push: 0.00000307 s
-------------
    100k push: 0.19382357 s (515k push / s)

710000th push: 0.00000237 s
720000th push: 0.00000235 s
730000th push: 0.00000344 s
740000th push: 0.00000315 s
750000th push: 0.00000354 s
760000th push: 0.00000402 s
770000th push: 0.00000402 s
780000th push: 0.00000269 s
790000th push: 0.00000556 s
800000th push: 0.00000323 s
-------------
    100k push: 0.19380099 s (515k push / s)

810000th push: 0.00000349 s
820000th push: 0.00000237 s
830000th push: 0.00000258 s
840000th push: 0.00000327 s
850000th push: 0.00000427 s
860000th push: 0.00000359 s
870000th push: 0.00001641 s
880000th push: 0.00000391 s
890000th push: 0.00000296 s
900000th push: 0.00000409 s
-------------
    100k push: 0.19189419 s (521k push / s)

910000th push: 0.00000254 s
920000th push: 0.00000255 s
930000th push: 0.00000364 s
940000th push: 0.00000281 s
950000th push: 0.00000308 s
960000th push: 0.00000385 s
970000th push: 0.00000254 s
980000th push: 0.00000302 s
990000th push: 0.00000337 s
1000000th push: 0.00000334 s
-------------
    100k push: 0.19242366 s (519k push / s)

1010000th push: 0.00000253 s
1020000th push: 0.00000253 s
1030000th push: 0.00000582 s
1040000th push: 0.00000436 s
1050000th push: 0.00000404 s
1060000th push: 0.00000271 s
1070000th push: 0.00000328 s
1080000th push: 0.00000291 s
1090000th push: 0.00000393 s
1100000th push: 0.00000225 s
-------------
    100k push: 0.19197014 s (520k push / s)

1110000th push: 0.00000240 s
1120000th push: 0.00000282 s
1130000th push: 0.00000258 s
1140000th push: 0.00000240 s
1150000th push: 0.00000230 s
1160000th push: 0.00000239 s
1170000th push: 0.00000283 s
1180000th push: 0.00000251 s
1190000th push: 0.00000288 s
1200000th push: 0.00000239 s
-------------
    100k push: 0.19228729 s (520k push / s)

1210000th push: 0.00000242 s
1220000th push: 0.00000341 s
1230000th push: 0.00000269 s
1240000th push: 0.00000339 s
1250000th push: 0.00000301 s
1260000th push: 0.00000235 s
1270000th push: 0.00000446 s
1280000th push: 0.00000400 s
1290000th push: 0.00000246 s
1300000th push: 0.00000299 s
-------------
    100k push: 0.19128087 s (522k push / s)

1310000th push: 0.00000246 s
1320000th push: 0.00000268 s
1330000th push: 0.00000302 s
1340000th push: 0.00000369 s
1350000th push: 0.00000531 s
1360000th push: 0.00000355 s
1370000th push: 0.00000263 s
1380000th push: 0.00000287 s
1390000th push: 0.00000265 s
1400000th push: 0.00000246 s
-------------
    100k push: 0.19210117 s (520k push / s)

1410000th push: 0.00000244 s
1420000th push: 0.00000323 s
1430000th push: 0.00000291 s
1440000th push: 0.00000307 s
1450000th push: 0.00000343 s
1460000th push: 0.00001682 s
1470000th push: 0.00000232 s
1480000th push: 0.00000293 s
1490000th push: 0.00000517 s
1500000th push: 0.00000288 s
-------------
    100k push: 0.19459728 s (513k push / s)

1510000th push: 0.00000358 s
1520000th push: 0.00000239 s
1530000th push: 0.00000242 s
1540000th push: 0.00000301 s
1550000th push: 0.00000272 s
pushed 1558358 items in 3.0 s

still a heap with 1558373 items? YES - 1.616 sec

ruby -Ilib examples/heap.rb



#
# display the results of ternary Heap push and pop
#

push: 24 88 59 8 59 17 77 58 32 27 41 51 34 50 32 31 44 21 19 29 15 50 69 3 41 44 45 3 79 91
array: [91, 77, 88, 51, 50, 44, 59, 59, 45, 79, 8, 41, 34, 24, 32, 31, 17, 21, 19, 29, 15, 50, 58, 3, 41, 32, 44, 3, 27, 69]
heap: true
                                       91                                       
            77                        88                        51            
   50      44      59      59      45      79       8      41      34   
24 32 31 17 21 19 29 15 50 58 3 41 32 44 3 27 69 


pop: 91
array: [88, 77, 79, 51, 50, 44, 59, 59, 45, 69, 8, 41, 34, 24, 32, 31, 17, 21, 19, 29, 15, 50, 58, 3, 41, 32, 44, 3, 27]
heap: true
                                       88                                       
            77                        79                        51            
   50      44      59      59      45      69       8      41      34   
24 32 31 17 21 19 29 15 50 58 3 41 32 44 3 27 


pop: 88 79 77 69 59 59 58 51 50
array: [50, 44, 45, 41, 32, 21, 41, 44, 3, 27, 8, 32, 34, 24, 3, 31, 17, 15, 19, 29]
heap: true
                                       50                                       
            44                        45                        41            
   32      21      41      44       3      27       8      32      34   
24 3 31 17 15 19 29 


push: 28 73 88 71 78 15 70 31 33 35 93 96 61 41 67 2 88 89 33 33 81 51 81 34 62 27 28 88 92 29
array: [96, 92, 88, 93, 88, 29, 44, 73, 70, 78, 61, 88, 89, 51, 62, 81, 21, 15, 19, 29, 28, 41, 44, 45, 71, 3, 15, 31, 27, 33, 35, 8, 41, 41, 32, 2, 67, 34, 33, 33, 24, 32, 50, 3, 34, 27, 28, 31, 81, 17]
heap: true
                                       96                                       
            92                        88                        93            
   88      29      44      73      70      78      61      88      89   
51 62 81 21 15 19 29 28 41 44 45 71 3 15 31 27 33 35 8 41 41 32 2 67 34 33 33 
24 32 50 3 34 27 28 31 81 17 


#
# display the results of binary Heap push and pop
#

push: 69 91 62 87 3 7 76 81 20 76 97 45 79 46 32 26 25 5 70 20 88 42 95 45 80 36 7 6 48 28
array: [97, 95, 80, 81, 91, 79, 62, 69, 70, 87, 88, 76, 45, 48, 32, 26, 25, 5, 20, 3, 20, 42, 76, 7, 45, 36, 7, 6, 46, 28]
heap: true
                                       97                                       
                   95                                      80                   
         81                  91                  79                  62         
    69        70        87        88        76        45        48        32    
  26   25   5    20   3    20   42   76   7    45   36   7    6    46   28 


pop: 97
array: [95, 91, 80, 81, 88, 79, 62, 69, 70, 87, 76, 76, 45, 48, 32, 26, 25, 5, 20, 3, 20, 42, 28, 7, 45, 36, 7, 6, 46]
heap: true
                                       95                                       
                   91                                      80                   
         81                  88                  79                  62         
    69        70        87        76        76        45        48        32    
  26   25   5    20   3    20   42   28   7    45   36   7    6    46 


pop: 95 91 88 87 81 80 79 76 76
array: [70, 69, 62, 26, 46, 45, 48, 25, 20, 36, 42, 45, 7, 28, 32, 6, 20, 5, 7, 3]
heap: true
                                       70                                       
                   69                                      62                   
         26                  46                  45                  48         
    25        20        36        42        45         7        28        32    
  6    20   5    7    3  


push: 81 11 21 53 96 26 36 70 21 25 11 82 98 12 31 15 35 57 73 48 33 30 24 75 40 21 83 19 54 25
array: [98, 96, 81, 82, 83, 62, 70, 70, 73, 48, 75, 54, 36, 48, 32, 26, 31, 20, 57, 46, 36, 42, 69, 53, 45, 7, 26, 28, 21, 25, 11, 6, 25, 12, 20, 5, 15, 7, 35, 3, 33, 30, 24, 11, 40, 21, 21, 19, 45, 25]
heap: true
                                       98                                       
                   96                                      81                   
         82                  83                  62                  70         
    70        73        48        75        54        36        48        32    
  26   31   20   57   46   36   42   69   53   45   7    26   28   21   25   11 
6 25 12 20 5 15 7 35 3 33 30 24 11 40 21 21 19 45 25 

ruby -Ilib examples/push_tree.rb



#
# Try out Binary, Ternary, and Quaternary PushTrees
# Push the same vals to each
#

[4, 23, 21, 21, 37, 94, 80, 87, 20, 81, 60, 0, 49, 34, 49, 48, 15, 61, 0, 32, 71, 79, 9, 61, 67, 95, 88, 85, 96, 19]
#<CompSci::PushTree:0x00563980fe4740 @root=#<CompSci::ChildFlexNode:0x2b1cc07f2404i @value=4 @children=[23, 21]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2b1cc07ed60ci @value=49 @children=[19]>>
                                        4                                       
                   23                                      21                   
         21                  37                  94                  80         
    87        20        81        60         0        49        34        49    
  48   15   61   0    32   71   79   9    61   67   95   88   85   96   19   _  

df_search visited: 4 23 21 87 48 15 20 61 0 37 81 32 71 60 79 9 21 94 0 61 67 49 95 88 80 34 85 96 49 19


push: [13, 64, 75, 93, 53, 98, 62, 14, 72, 42, 41, 88, 17, 25, 42, 94, 43, 4, 41, 9, 74, 21, 51, 24, 3, 13, 22, 98, 87, 76]

                                        4                                       
                   23                                      21                   
         21                  37                  94                  80         
    87        20        81        60         0        49        34        49    
  48   15   61   0    32   71   79   9    61   67   95   88   85   96   19   13 
64 75 93 53 98 62 14 72 42 41 88 17 25 42 94 43 4 41 9 74 21 51 24 3 13 22 98 87 76 _ _ _ 


[4, 23, 21, 21, 37, 94, 80, 87, 20, 81, 60, 0, 49, 34, 49, 48, 15, 61, 0, 32, 71, 79, 9, 61, 67, 95, 88, 85, 96, 19]
#<CompSci::PushTree:0x00563980fc4648 @root=#<CompSci::ChildFlexNode:0x2b1cc07e202ci @value=4 @children=[23, 21, 21]>, @child_slots=3, @open_parent=#<CompSci::ChildFlexNode:0x2b1cc07e1b54i @value=81 @children=[96, 19]>>
                                        4                                       
            23                        21                        21            
   37      94      80      87      20      81      60       0      49   
34 49 48 15 61 0 32 71 79 9 61 67 95 88 85 96 19 _ _ _ _ _ _ _ _ _ _ 

df_search visited: 4 23 37 34 49 48 94 15 61 0 80 32 71 79 21 87 9 61 67 20 95 88 85 81 96 19 21 60 0 49


push: [97, 48, 76, 0, 53, 17, 80, 30, 41, 51, 70, 70, 78, 92, 90, 21, 45, 0, 10, 84, 70, 39, 7, 55, 50, 45, 90, 45, 49, 8]

                                        4                                       
            23                        21                        21            
   37      94      80      87      20      81      60       0      49   
34 49 48 15 61 0 32 71 79 9 61 67 95 88 85 96 19 97 48 76 0 53 17 80 30 41 51 
70 70 78 92 90 21 45 0 10 84 70 39 7 55 50 45 90 45 49 8 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


[4, 23, 21, 21, 37, 94, 80, 87, 20, 81, 60, 0, 49, 34, 49, 48, 15, 61, 0, 32, 71, 79, 9, 61, 67, 95, 88, 85, 96, 19]
#<CompSci::PushTree:0x00563981194720 @root=#<CompSci::ChildFlexNode:0x2b1cc08ca408i @value=4 @children=[23, 21, 21, 37]>, @child_slots=4, @open_parent=#<CompSci::ChildFlexNode:0x2b1cc08ca0c0i @value=87 @children=[19]>>
                                        4                                       
         23                  21                  21                  37         
  94   80   87   20   81   60   0    49   34   49   48   15   61   0    32   71 
79 9 61 67 95 88 85 96 19 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

df_search visited: 4 23 94 79 9 61 67 80 95 88 85 96 87 19 20 21 81 60 0 49 21 34 49 48 15 37 61 0 32 71


push: [0, 67, 54, 80, 3, 5, 73, 25, 73, 36, 87, 28, 98, 69, 15, 76, 97, 50, 89, 20, 55, 1, 34, 48, 80, 61, 10, 57, 94, 57]

                                        4                                       
         23                  21                  21                  37         
  94   80   87   20   81   60   0    49   34   49   48   15   61   0    32   71 
79 9 61 67 95 88 85 96 19 0 67 54 80 3 5 73 25 73 36 87 28 98 69 15 76 97 50 89 20 55 1 34 48 80 61 10 57 94 57 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 



#
# 30 PushTree pushes and df_search
#

[83, 45, 23, 77, 68, 61, 97, 31, 35, 13, 55, 57, 56, 85, 85, 54, 4, 85, 80, 2, 56, 89, 7, 93, 9, 3, 92, 40, 10, 95]
                                       83                                       
                   45                                      23                   
         77                  68                  61                  97         
    31        35        13        55        57        56        85        85    
  54   4    85   80   2    56   89   7    93   9    3    92   40   10   95   _  
#<CompSci::PushTree:0x0056398116c2e8 @root=#<CompSci::ChildFlexNode:0x2b1cc08b61d8i @value=83 @children=[45, 23]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2b1cc08abb98i @value=85 @children=[95]>>

visited 83
visited 45
visited 77
visited 31
visited 54
visited 4
visited 35
visited 85
visited 80
visited 68
visited 13
visited 2
visited 56
visited 55
visited 89
visited 7
visited 23
visited 61
visited 57
visited 93
visited 9
visited 56
visited 3
visited 92
visited 97
visited 85
visited 40
visited 10
visited 85
visited 95

push: [52, 21, 26, 88, 64, 34, 8, 70, 3, 87, 13, 74, 32, 17, 36, 94, 72, 90, 67, 84, 83, 64, 91, 69, 47, 42, 19, 51, 76, 14]
                                       83                                       
                   45                                      23                   
         77                  68                  61                  97         
    31        35        13        55        57        56        85        85    
  54   4    85   80   2    56   89   7    93   9    3    92   40   10   95   52 
21 26 88 64 34 8 70 3 87 13 74 32 17 36 94 72 90 67 84 83 64 91 69 47 42 19 51 76 14 _ _ _ 


#
# 3 seconds worth of PushTree pushes
#

100th push: 0.00000301 s
200th push: 0.00000251 s
300th push: 0.00000258 s
400th push: 0.00000283 s
500th push: 0.00000321 s
600th push: 0.00000310 s
700th push: 0.00000303 s
800th push: 0.00000320 s
900th push: 0.00000342 s
1000th push: 0.00000328 s
-----------
    1k push: 0.0565 s (17702 push / s)

1100th push: 0.00000336 s
1200th push: 0.00000324 s
1300th push: 0.00000346 s
1400th push: 0.00000337 s
1500th push: 0.00000348 s
1600th push: 0.00002850 s
1700th push: 0.00000377 s
1800th push: 0.00000391 s
1900th push: 0.00000370 s
2000th push: 0.00000420 s
-----------
    1k push: 0.2084 s (4798 push / s)

2100th push: 0.00000434 s
2200th push: 0.00000487 s
2300th push: 0.00003908 s
2400th push: 0.00000545 s
2500th push: 0.00000551 s
2600th push: 0.00000624 s
2700th push: 0.00000632 s
2800th push: 0.00000626 s
2900th push: 0.00000592 s
3000th push: 0.00000553 s
-----------
    1k push: 0.4772 s (2095 push / s)

3100th push: 0.00000601 s
3200th push: 0.00000622 s
3300th push: 0.00000636 s
3400th push: 0.00000552 s
3500th push: 0.00000608 s
3600th push: 0.00001588 s
3700th push: 0.00000644 s
3800th push: 0.00000789 s
3900th push: 0.00000552 s
4000th push: 0.00000850 s
-----------
    1k push: 0.8651 s (1155 push / s)

4100th push: 0.00003736 s
4200th push: 0.00000657 s
4300th push: 0.00000638 s
4400th push: 0.00000590 s
4500th push: 0.00000636 s
4600th push: 0.00000718 s
4700th push: 0.00000639 s
4800th push: 0.00000706 s
4900th push: 0.00000605 s
5000th push: 0.00000738 s
-----------
    1k push: 1.2718 s (786 push / s)

pushed 5079 items in 3.0 s


