Run options: --seed 21680

# Running:

................................SS.............................................................................

Finished in 0.359478s, 308.7810 runs/s, 34419.3496 assertions/s.

111 runs, 12373 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.30 0.22 0.09 1/99 28540

#
# Fill up and display some trees
#

[87, 53, 36, 83, 25, 16, 47, 95, 45, 75, 31, 33, 24, 6, 55, 3, 81, 91, 53, 12, 14, 86, 42, 8, 11, 86, 69, 64, 20, 88]

#<CompSci::Node:0x2acb15002958i @value=87 @children=[53, 36]>
                                       87                                       
                   53                                      36                   
         83                  25                  16                  47         
    95        45        75        31        33        24         6        55    
  3    81   91   53   12   14   86   42   8    11   86   69   64   20   88      



#<CompSci::Node:0x2acb150008eci @value=87 @children=[53, 36, 83]>
                                       87                                       
            53                        36                        83            
   25      16      47      95      45      75      31      33      24   
6 55 3 81 91 53 12 14 86 42 8 11 86 69 64 20 88                     



#<CompSci::Node:0x2acb14ffdae8i @value=87 @children=[53, 36, 83, 25]>
                                       87                                       
         53                  36                  83                  25         
  16   47   95   45   75   31   33   24   6    55   3    81   91   53   12   14 
86 42 8 11 86 69 64 20 88                                                        


ruby -Ilib examples/complete_tree.rb


#
# Print CompleteBinary-, Ternary-, and QuaternaryTree
#

[59, 52, 19, 4, 45, 39, 19, 65, 41, 64, 82, 92, 79, 54, 36, 43, 53, 42, 30, 47, 85, 79, 54, 29, 75, 88, 3, 20, 77, 87]
#<CompSci::CompleteBinaryTree:0x00563029206d68 @array=[59, 52, 19, 4, 45, 39, 19, 65, 41, 64, 82, 92, 79, 54, 36, 43, 53, 42, 30, 47, 85, 79, 54, 29, 75, 88, 3, 20, 77, 87], @child_slots=2>
                                       59                                       
                   52                                      19                   
          4                  45                  39                  19         
    65        41        64        82        92        79        54        36    
  43   53   42   30   47   85   79   54   29   75   88   3    20   77   87 



push: [58, 19, 21, 46, 4, 11, 53, 72, 59, 2, 55, 92, 25, 32, 55, 16, 89, 59, 28, 24, 59, 10, 58, 10, 47, 70, 42, 92, 68, 24]
                                       59                                       
                   52                                      19                   
          4                  45                  39                  19         
    65        41        64        82        92        79        54        36    
  43   53   42   30   47   85   79   54   29   75   88   3    20   77   87   58 
19 21 46 4 11 53 72 59 2 55 92 25 32 55 16 89 59 28 24 59 10 58 10 47 70 42 92 68 24 



[59, 52, 19, 4, 45, 39, 19, 65, 41, 64, 82, 92, 79, 54, 36, 43, 53, 42, 30, 47, 85, 79, 54, 29, 75, 88, 3, 20, 77, 87]
#<CompSci::CompleteTernaryTree:0x0056302908c640 @array=[59, 52, 19, 4, 45, 39, 19, 65, 41, 64, 82, 92, 79, 54, 36, 43, 53, 42, 30, 47, 85, 79, 54, 29, 75, 88, 3, 20, 77, 87], @child_slots=3>
                                       59                                       
            52                        19                         4            
   45      39      19      65      41      64      82      92      79   
54 36 43 53 42 30 47 85 79 54 29 75 88 3 20 77 87 



push: [96, 80, 97, 56, 36, 3, 1, 38, 8, 39, 18, 12, 67, 30, 59, 73, 80, 28, 77, 29, 39, 70, 78, 96, 95, 97, 97, 23, 10, 75]
                                       59                                       
            52                        19                         4            
   45      39      19      65      41      64      82      92      79   
54 36 43 53 42 30 47 85 79 54 29 75 88 3 20 77 87 96 80 97 56 36 3 1 38 8 39 
18 12 67 30 59 73 80 28 77 29 39 70 78 96 95 97 97 23 10 75 



[59, 52, 19, 4, 45, 39, 19, 65, 41, 64, 82, 92, 79, 54, 36, 43, 53, 42, 30, 47, 85, 79, 54, 29, 75, 88, 3, 20, 77, 87]
#<CompSci::CompleteQuaternaryTree:0x005630293c25d0 @array=[59, 52, 19, 4, 45, 39, 19, 65, 41, 64, 82, 92, 79, 54, 36, 43, 53, 42, 30, 47, 85, 79, 54, 29, 75, 88, 3, 20, 77, 87], @child_slots=4>
                                       59                                       
         52                  19                   4                  45         
  39   19   65   41   64   82   92   79   54   36   43   53   42   30   47   85 
79 54 29 75 88 3 20 77 87 



push: [59, 43, 17, 72, 6, 23, 77, 95, 65, 53, 90, 41, 94, 29, 77, 29, 83, 14, 35, 2, 19, 56, 44, 79, 33, 76, 70, 90, 9, 50]
                                       59                                       
         52                  19                   4                  45         
  39   19   65   41   64   82   92   79   54   36   43   53   42   30   47   85 
79 54 29 75 88 3 20 77 87 59 43 17 72 6 23 77 95 65 53 90 41 94 29 77 29 83 14 35 2 19 56 44 79 33 76 70 90 9 50 



ruby -Ilib examples/binary_search_tree.rb


[:willie, :duff, :ink, :london, :yellow, :johnnie, :xerxes, :king, :freddy, :charlie, :edward, :robert, :orange, :harry, :butter, :queenie, :monkey, :nuts, :apples, :sugar, :vinegar, :george, :zebra, :uncle, :pudding, :tommy]
[17, 9, 98, 13, 51, 51, 35, 94, 13, 33, 95, 12, 72, 40, 17, 55, 94, 64, 6, 36, 86, 41, 46, 18, 9, 90]
                                    17:willie                                   
                 9:duff                                  98:ink                 
      6:apples            13:london           51:yellow               _         
     _         _    12:robert      _    35:xerxes   94:king      _         _    
  _    _    _    _    _    _    _    _  33:charlie 40:harry 72:orange 95:edward   _    _    _    _  
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 18:uncle _ 36:sugar 41:george 55:queenie 86:vinegar _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 46:zebra _ 64:nuts _ 90:tommy _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
ruby -Ilib examples/heap_push.rb


#
# 3 seconds worth of pushes
#

10000th push: 0.00000383 s
20000th push: 0.00000306 s
30000th push: 0.00000398 s
40000th push: 0.00000377 s
50000th push: 0.00000297 s
60000th push: 0.00000412 s
70000th push: 0.00000332 s
80000th push: 0.00000269 s
90000th push: 0.00000250 s
100000th push: 0.00000347 s
-------------
    100k push: 0.18547440 s (539k push / s)

110000th push: 0.00000339 s
120000th push: 0.00000214 s
130000th push: 0.00000288 s
140000th push: 0.00000282 s
150000th push: 0.00000325 s
160000th push: 0.00000239 s
170000th push: 0.00000233 s
180000th push: 0.00000260 s
190000th push: 0.00000379 s
200000th push: 0.00000381 s
-------------
    100k push: 0.18380016 s (544k push / s)

210000th push: 0.00000434 s
220000th push: 0.00000452 s
230000th push: 0.00000523 s
240000th push: 0.00000289 s
250000th push: 0.00000234 s
260000th push: 0.00000273 s
270000th push: 0.00000237 s
280000th push: 0.00000239 s
290000th push: 0.00000263 s
300000th push: 0.00000324 s
-------------
    100k push: 0.18539308 s (539k push / s)

310000th push: 0.00000331 s
320000th push: 0.00000391 s
330000th push: 0.00000383 s
340000th push: 0.00000309 s
350000th push: 0.00000306 s
360000th push: 0.00000238 s
370000th push: 0.00000379 s
380000th push: 0.00000244 s
390000th push: 0.00000331 s
400000th push: 0.00000353 s
-------------
    100k push: 0.18518110 s (540k push / s)

410000th push: 0.00000285 s
420000th push: 0.00000244 s
430000th push: 0.00000247 s
440000th push: 0.00000258 s
450000th push: 0.00000240 s
460000th push: 0.00000260 s
470000th push: 0.00000443 s
480000th push: 0.00000330 s
490000th push: 0.00000339 s
500000th push: 0.00000300 s
-------------
    100k push: 0.18107622 s (552k push / s)

510000th push: 0.00000237 s
520000th push: 0.00000373 s
530000th push: 0.00000290 s
540000th push: 0.00000325 s
550000th push: 0.00000446 s
560000th push: 0.00000238 s
570000th push: 0.00000250 s
580000th push: 0.00000349 s
590000th push: 0.00000410 s
600000th push: 0.00000317 s
-------------
    100k push: 0.18468271 s (541k push / s)

610000th push: 0.00000295 s
620000th push: 0.00000293 s
630000th push: 0.00000293 s
640000th push: 0.00000338 s
650000th push: 0.00000280 s
660000th push: 0.00000258 s
670000th push: 0.00000282 s
680000th push: 0.00000290 s
690000th push: 0.00000246 s
700000th push: 0.00000300 s
-------------
    100k push: 0.18472793 s (541k push / s)

710000th push: 0.00000303 s
720000th push: 0.00000442 s
730000th push: 0.00000370 s
740000th push: 0.00000269 s
750000th push: 0.00000427 s
760000th push: 0.00000245 s
770000th push: 0.00000266 s
780000th push: 0.00000246 s
790000th push: 0.00000245 s
800000th push: 0.00000270 s
-------------
    100k push: 0.18648719 s (536k push / s)

810000th push: 0.00000294 s
820000th push: 0.00000489 s
830000th push: 0.00000319 s
840000th push: 0.00000422 s
850000th push: 0.00000398 s
860000th push: 0.00000342 s
870000th push: 0.00000355 s
880000th push: 0.00000261 s
890000th push: 0.00000257 s
900000th push: 0.00000341 s
-------------
    100k push: 0.18668158 s (535k push / s)

910000th push: 0.00000243 s
920000th push: 0.00000245 s
930000th push: 0.00000326 s
940000th push: 0.00000244 s
950000th push: 0.00000254 s
960000th push: 0.00000234 s
970000th push: 0.00000397 s
980000th push: 0.00000382 s
990000th push: 0.00000241 s
1000000th push: 0.00000294 s
-------------
    100k push: 0.18565503 s (538k push / s)

1010000th push: 0.00000293 s
1020000th push: 0.00000246 s
1030000th push: 0.00000247 s
1040000th push: 0.00000421 s
1050000th push: 0.00000292 s
1060000th push: 0.00000234 s
1070000th push: 0.00000347 s
1080000th push: 0.00000332 s
1090000th push: 0.00000289 s
1100000th push: 0.00000286 s
-------------
    100k push: 0.18767519 s (532k push / s)

1110000th push: 0.00000245 s
1120000th push: 0.00000253 s
1130000th push: 0.00000325 s
1140000th push: 0.00000381 s
1150000th push: 0.00000246 s
1160000th push: 0.00000238 s
1170000th push: 0.00000344 s
1180000th push: 0.00000385 s
1190000th push: 0.00000339 s
1200000th push: 0.00000240 s
-------------
    100k push: 0.18805284 s (531k push / s)

1210000th push: 0.00000313 s
1220000th push: 0.00000298 s
1230000th push: 0.00000245 s
1240000th push: 0.00000295 s
1250000th push: 0.00000240 s
1260000th push: 0.00000251 s
1270000th push: 0.00000303 s
1280000th push: 0.00000246 s
1290000th push: 0.00000426 s
1300000th push: 0.00000297 s
-------------
    100k push: 0.18685827 s (535k push / s)

1310000th push: 0.00000331 s
1320000th push: 0.00000243 s
1330000th push: 0.00000236 s
1340000th push: 0.00000413 s
1350000th push: 0.00000254 s
1360000th push: 0.00000246 s
1370000th push: 0.00000376 s
1380000th push: 0.00000299 s
1390000th push: 0.00000366 s
1400000th push: 0.00000249 s
-------------
    100k push: 0.18473988 s (541k push / s)

1410000th push: 0.00000325 s
1420000th push: 0.00000287 s
1430000th push: 0.00000352 s
1440000th push: 0.00000386 s
1450000th push: 0.00000290 s
1460000th push: 0.00001796 s
1470000th push: 0.00000256 s
1480000th push: 0.00000314 s
1490000th push: 0.00000437 s
1500000th push: 0.00000236 s
-------------
    100k push: 0.19046268 s (525k push / s)

1510000th push: 0.00000239 s
1520000th push: 0.00000255 s
1530000th push: 0.00000239 s
1540000th push: 0.00000331 s
1550000th push: 0.00000246 s
1560000th push: 0.00000391 s
1570000th push: 0.00000240 s
1580000th push: 0.00000297 s
1590000th push: 0.00000254 s
1600000th push: 0.00000297 s
-------------
    100k push: 0.18552229 s (539k push / s)

1610000th push: 0.00000381 s
pushed 1614753 items in 3.0 s

still a heap with 1614769 items? YES - 1.697 sec

ruby -Ilib examples/heap.rb


#
# display the results of TernaryHeap push and pop
#

push: 60 30 76 49 56 66 6 49 58 31 93 81 61 6 75 59 46 0 38 94 86 44 40 6 49 58 45 58 18 67
array: [94, 93, 67, 81, 66, 56, 86, 49, 58, 60, 49, 76, 61, 6, 30, 59, 46, 0, 38, 6, 75, 44, 40, 6, 49, 58, 45, 58, 18, 31]
heap: true
                                       94                                       
            93                        67                        81            
   66      56      86      49      58      60      49      76      61   
6 30 59 46 0 38 6 75 44 40 6 49 58 45 58 18 31 


pop: 94
array: [93, 86, 67, 81, 66, 56, 75, 49, 58, 60, 49, 76, 61, 6, 30, 59, 46, 0, 38, 6, 31, 44, 40, 6, 49, 58, 45, 58, 18]
heap: true
                                       93                                       
            86                        67                        81            
   66      56      75      49      58      60      49      76      61   
6 30 59 46 0 38 6 31 44 40 6 49 58 45 58 18 


pop: 93 86 81 76 75 67 66 61 60
array: [59, 58, 58, 58, 31, 56, 44, 49, 18, 49, 49, 40, 45, 6, 30, 6, 46, 0, 38, 6]
heap: true
                                       59                                       
            58                        58                        58            
   31      56      44      49      18      49      49      40      45   
6 30 6 46 0 38 6 


push: 10 94 79 47 54 67 85 14 83 45 2 44 42 41 68 69 29 53 59 35 88 70 92 2 42 61 44 7 77 35
array: [94, 92, 85, 69, 88, 56, 58, 58, 79, 83, 49, 68, 59, 70, 61, 77, 46, 0, 38, 6, 10, 44, 49, 47, 54, 18, 67, 14, 49, 45, 2, 44, 42, 41, 40, 58, 29, 45, 53, 35, 6, 31, 59, 2, 30, 42, 6, 7, 44, 35]
heap: true
                                       94                                       
            92                        85                        69            
   88      56      58      58      79      83      49      68      59   
70 61 77 46 0 38 6 10 44 49 47 54 18 67 14 49 45 2 44 42 41 40 58 29 45 53 35 
6 31 59 2 30 42 6 7 44 35 

ruby -Ilib examples/push_tree.rb


#
# Try out Binary, Ternary, and Quaternary PushTrees
# Push the same vals to each
#

[45, 68, 57, 33, 76, 75, 63, 49, 43, 33, 7, 78, 50, 66, 42, 33, 87, 20, 95, 74, 87, 90, 92, 96, 64, 51, 30, 64, 43, 95]
#<CompSci::PushTree:0x0055b2c88df178 @root=#<CompSci::ChildFlexNode:0x2ad96446f920i @value=45 @children=[68, 57]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2ad96446f330i @value=42 @children=[95]>>
                                       45                                       
                   68                                      57                   
         33                  76                  75                  63         
    49        43        33         7        78        50        66        42    
  33   87   20   95   74   87   90   92   96   64   51   30   64   43   95   _  

df_search visited: 45 68 33 49 33 87 43 20 95 76 33 74 87 7 90 92 57 75 78 96 64 50 51 30 63 66 64 43 42 95


push: [40, 29, 49, 46, 93, 89, 73, 32, 26, 91, 77, 68, 25, 12, 98, 45, 17, 69, 17, 54, 35, 5, 51, 6, 44, 21, 78, 56, 23, 26]

                                       45                                       
                   68                                      57                   
         33                  76                  75                  63         
    49        43        33         7        78        50        66        42    
  33   87   20   95   74   87   90   92   96   64   51   30   64   43   95   40 
29 49 46 93 89 73 32 26 91 77 68 25 12 98 45 17 69 17 54 35 5 51 6 44 21 78 56 23 26 _ _ _ 


[45, 68, 57, 33, 76, 75, 63, 49, 43, 33, 7, 78, 50, 66, 42, 33, 87, 20, 95, 74, 87, 90, 92, 96, 64, 51, 30, 64, 43, 95]
#<CompSci::PushTree:0x0055b2c888de18 @root=#<CompSci::ChildFlexNode:0x2ad964446f84i @value=45 @children=[68, 57, 33]>, @child_slots=3, @open_parent=#<CompSci::ChildFlexNode:0x2ad964446b38i @value=33 @children=[43, 95]>>
                                       45                                       
            68                        57                        33            
   76      75      63      49      43      33       7      78      50   
66 42 33 87 20 95 74 87 90 92 96 64 51 30 64 43 95 _ _ _ _ _ _ _ _ _ _ 

df_search visited: 45 68 76 66 42 33 75 87 20 95 63 74 87 90 57 49 92 96 64 43 51 30 64 33 43 95 33 7 78 50


push: [23, 61, 32, 52, 6, 18, 73, 43, 16, 8, 44, 92, 59, 75, 67, 51, 22, 42, 41, 42, 93, 4, 11, 93, 19, 23, 36, 91, 8, 42]

                                       45                                       
            68                        57                        33            
   76      75      63      49      43      33       7      78      50   
66 42 33 87 20 95 74 87 90 92 96 64 51 30 64 43 95 23 61 32 52 6 18 73 43 16 8 
44 92 59 75 67 51 22 42 41 42 93 4 11 93 19 23 36 91 8 42 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


[45, 68, 57, 33, 76, 75, 63, 49, 43, 33, 7, 78, 50, 66, 42, 33, 87, 20, 95, 74, 87, 90, 92, 96, 64, 51, 30, 64, 43, 95]
#<CompSci::PushTree:0x0055b2c8718560 @root=#<CompSci::ChildFlexNode:0x2ad96438c10ci @value=45 @children=[68, 57, 33, 76]>, @child_slots=4, @open_parent=#<CompSci::ChildFlexNode:0x2ad96438a028i @value=49 @children=[95]>>
                                       45                                       
         68                  57                  33                  76         
  75   63   49   43   33   7    78   50   66   42   33   87   20   95   74   87 
90 92 96 64 51 30 64 43 95 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

df_search visited: 45 68 75 90 92 96 64 63 51 30 64 43 49 95 43 57 33 7 78 50 33 66 42 33 87 76 20 95 74 87


push: [94, 58, 88, 20, 65, 62, 20, 37, 5, 29, 9, 4, 22, 86, 16, 11, 54, 39, 40, 69, 6, 38, 88, 40, 56, 46, 1, 83, 33, 8]

                                       45                                       
         68                  57                  33                  76         
  75   63   49   43   33   7    78   50   66   42   33   87   20   95   74   87 
90 92 96 64 51 30 64 43 95 94 58 88 20 65 62 20 37 5 29 9 4 22 86 16 11 54 39 40 69 6 38 88 40 56 46 1 83 33 8 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


#
# 30 inserts, puts, df_search
#

[1, 67, 34, 23, 6, 21, 39, 49, 58, 85, 98, 45, 12, 3, 47, 11, 81, 95, 80, 68, 15, 73, 9, 89, 27, 70, 19, 42, 71, 7]
                                        1                                       
                   67                                      34                   
         23                   6                  21                  39         
    49        58        85        98        45        12         3        47    
  11   81   95   80   68   15   73   9    89   27   70   19   42   71   7    _  
#<CompSci::PushTree:0x0055b2c8a395a0 @root=#<CompSci::ChildFlexNode:0x2ad96451cb34i @value=1 @children=[67, 34]>, @child_slots=2, @open_parent=#<CompSci::ChildFlexNode:0x2ad96451c468i @value=47 @children=[7]>>

visited 1
visited 67
visited 23
visited 49
visited 11
visited 81
visited 58
visited 95
visited 80
visited 6
visited 85
visited 68
visited 15
visited 98
visited 73
visited 9
visited 34
visited 21
visited 45
visited 89
visited 27
visited 12
visited 70
visited 19
visited 39
visited 3
visited 42
visited 71
visited 47
visited 7

push: [54, 10, 20, 25, 49, 39, 63, 12, 0, 70, 79, 77, 47, 79, 40, 88, 27, 21, 81, 47, 21, 75, 30, 67, 96, 54, 36, 37, 3, 31]
                                        1                                       
                   67                                      34                   
         23                   6                  21                  39         
    49        58        85        98        45        12         3        47    
  11   81   95   80   68   15   73   9    89   27   70   19   42   71   7    54 
10 20 25 49 39 63 12 0 70 79 77 47 79 40 88 27 21 81 47 21 75 30 67 96 54 36 37 3 31 _ _ _ 

#
# 5 seconds worth of pushes
#

100th push: 0.00000380 s
200th push: 0.00000327 s
300th push: 0.00000301 s
400th push: 0.00000304 s
500th push: 0.00000332 s
600th push: 0.00000354 s
700th push: 0.00000348 s
800th push: 0.00000293 s
900th push: 0.00000328 s
1000th push: 0.00000413 s
-----------
    1k push: 0.0589 s (16985 push / s)

1100th push: 0.00000361 s
1200th push: 0.00000361 s
1300th push: 0.00000439 s
1400th push: 0.00000486 s
1500th push: 0.00000392 s
1600th push: 0.00000343 s
1700th push: 0.00000674 s
1800th push: 0.00000398 s
1900th push: 0.00001832 s
2000th push: 0.00000486 s
-----------
    1k push: 0.2167 s (4615 push / s)

2100th push: 0.00000493 s
2200th push: 0.00000471 s
2300th push: 0.00000569 s
2400th push: 0.00000575 s
2500th push: 0.00000588 s
2600th push: 0.00000597 s
2700th push: 0.00000512 s
2800th push: 0.00000578 s
2900th push: 0.00000641 s
3000th push: 0.00000563 s
-----------
    1k push: 0.4747 s (2106 push / s)

3100th push: 0.00000636 s
3200th push: 0.00000606 s
3300th push: 0.00000561 s
3400th push: 0.00000598 s
3500th push: 0.00000650 s
3600th push: 0.00000739 s
3700th push: 0.00002642 s
3800th push: 0.00000741 s
3900th push: 0.00000646 s
4000th push: 0.00000635 s
-----------
    1k push: 0.7514 s (1330 push / s)

4100th push: 0.00000660 s
4200th push: 0.00000642 s
4300th push: 0.00000619 s
4400th push: 0.00000689 s
4500th push: 0.00000646 s
4600th push: 0.00000705 s
4700th push: 0.00000594 s
4800th push: 0.00004485 s
4900th push: 0.00000676 s
5000th push: 0.00000772 s
-----------
    1k push: 1.1668 s (857 push / s)

5100th push: 0.00000667 s
5200th push: 0.00000766 s
5300th push: 0.00000891 s
5400th push: 0.00000702 s
5500th push: 0.00000637 s
5600th push: 0.00000699 s
5700th push: 0.00000678 s
5800th push: 0.00000694 s
5900th push: 0.00000615 s
6000th push: 0.00000660 s
-----------
    1k push: 1.6766 s (596 push / s)

6100th push: 0.00000727 s
6200th push: 0.00000631 s
6300th push: 0.00000674 s
pushed 6331 items in 5.0 s


