Run options: --seed 49697

# Running:

......................................................S..S......................................

Finished in 0.319957s, 300.0401 runs/s, 3216.0545 assertions/s.

96 runs, 1029 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
/proc/loadavg 0.16 0.11 0.06 1/80 1493
Warming up --------------------------------------
Fibonacci.classic(25)
                         7.000  i/100ms
Fibonacci.cache_recursive(25)
                        10.411k i/100ms
Fibonacci.cache_iterative(25)
                        25.807k i/100ms
Calculating -------------------------------------
Fibonacci.classic(25)
                         73.502  (± 2.7%) i/s -    224.000  in   3.050165s
Fibonacci.cache_recursive(25)
                        114.577k (± 3.1%) i/s -    343.563k in   3.001387s
Fibonacci.cache_iterative(25)
                        302.718k (± 2.3%) i/s -    929.052k in   3.070745s

Comparison:
Fibonacci.cache_iterative(25):   302717.8 i/s
Fibonacci.cache_recursive(25):   114577.0 i/s - 2.64x  slower
Fibonacci.classic(25):       73.5 i/s - 4118.52x  slower

Warming up --------------------------------------
Fibonacci.cache_iterative(500)
                       687.000  i/100ms
Fibonacci.dynamic(500)
                       738.000  i/100ms
Fibonacci.matrix(500)
                       868.000  i/100ms
Calculating -------------------------------------
Fibonacci.cache_iterative(500)
                          6.877k (± 4.3%) i/s -     20.610k in   3.002745s
Fibonacci.dynamic(500)
                          7.026k (± 4.8%) i/s -     21.402k in   3.053700s
Fibonacci.matrix(500)
                          8.389k (± 7.7%) i/s -     25.172k in   3.020133s

Comparison:
Fibonacci.matrix(500):     8389.0 i/s
Fibonacci.dynamic(500):     7026.0 i/s - 1.19x  slower
Fibonacci.cache_iterative(500):     6876.8 i/s - 1.22x  slower

Warming up --------------------------------------
        Simplex init   862.000  i/100ms
         init, solve    73.000  i/100ms
Calculating -------------------------------------
        Simplex init      8.201k (± 8.5%) i/s -     24.998k in   3.071551s
         init, solve    483.474  (±19.0%) i/s -      1.460k in   3.129478s

Comparison:
        Simplex init:     8200.8 i/s
         init, solve:      483.5 i/s - 16.96x  slower

SIMPLEX_PARAMS.size = 14
simplices.size = 14
memsize(SIMPLEX_PARAMS): 152
memsize(simplices): 152
memsize(simplices after solving): 152
memsize(results): 152
Warming up --------------------------------------
99x BinaryTree(ChildNode)#push
                       176.000  i/100ms
99x BinaryTree(Node)#push
                       120.000  i/100ms
99x TernaryTree(ChildNode)#push
                       329.000  i/100ms
99x TernaryTree(Node)#push
                       204.000  i/100ms
Calculating -------------------------------------
99x BinaryTree(ChildNode)#push
                          1.718k (± 6.6%) i/s -      5.280k in   3.088391s
99x BinaryTree(Node)#push
                          1.141k (± 9.9%) i/s -      3.480k in   3.079942s
99x TernaryTree(ChildNode)#push
                          3.089k (± 6.2%) i/s -      9.541k in   3.100838s
99x TernaryTree(Node)#push
                          2.172k (± 7.9%) i/s -      6.528k in   3.024995s

Comparison:
99x TernaryTree(ChildNode)#push:     3089.1 i/s
99x TernaryTree(Node)#push:     2172.4 i/s - 1.42x  slower
99x BinaryTree(ChildNode)#push:     1717.5 i/s - 1.80x  slower
99x BinaryTree(Node)#push:     1141.1 i/s - 2.71x  slower

Run options: --seed 14611

# Running:

bench_Heap_push_constant_0_9999_	 0.000055	 0.000025	 0.000172	 0.001345	 0.012823
.

Finished in 0.029822s, 33.5321 runs/s, 33.5321 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
