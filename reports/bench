Run options: --seed 519

# Running:

...........................................................................................S..S..................

Finished in 0.369154s, 306.1052 runs/s, 33536.1278 assertions/s.

113 runs, 12380 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
/proc/loadavg 0.15 0.04 0.01 1/97 7621

#
# timing CompleteTree(N)#push where N is the size of the tree
#

CompleteTree(10) push: 0.00000057
CompleteTree(100) push: 0.00000056
CompleteTree(1000) push: 0.00000055
CompleteTree(10000) push: 0.00000056
CompleteTree(100000) push: 0.00000056
best fit: power (0.239); a = 0.000001, b = -0.001656

#
# timing CompleteTree#push where N is the count of pushes
#

10x CompleteTree#push: 0.00000233
100x CompleteTree#push: 0.00001854
1000x CompleteTree#push: 0.00017822
10000x CompleteTree#push: 0.00175467
100000x CompleteTree#push: 0.01758794
best fit: linear (1.000); a = 0.000000, b = 0.000000
Warming up --------------------------------------
Fibonacci.classic(25)
                         7.000  i/100ms
Fibonacci.cache_recursive(25)
                        11.078k i/100ms
Fibonacci.cache_iterative(25)
                        26.540k i/100ms
Calculating -------------------------------------
Fibonacci.classic(25)
                         73.161  (± 1.4%) i/s -    224.000  in   3.061926s
Fibonacci.cache_recursive(25)
                        119.165k (± 0.8%) i/s -    365.574k in   3.068018s
Fibonacci.cache_iterative(25)
                        303.603k (± 1.1%) i/s -    928.900k in   3.059948s

Comparison:
Fibonacci.cache_iterative(25):   303602.9 i/s
Fibonacci.cache_recursive(25):   119164.7 i/s - 2.55x  slower
Fibonacci.classic(25):       73.2 i/s - 4149.79x  slower

Warming up --------------------------------------
Fibonacci.cache_iterative(500)
                       676.000  i/100ms
Fibonacci.dynamic(500)
                       681.000  i/100ms
Fibonacci.matrix(500)
                       878.000  i/100ms
Calculating -------------------------------------
Fibonacci.cache_iterative(500)
                          7.063k (± 1.1%) i/s -     21.632k in   3.063090s
Fibonacci.dynamic(500)
                          7.255k (± 0.9%) i/s -     21.792k in   3.004107s
Fibonacci.matrix(500)
                          9.038k (± 0.8%) i/s -     27.218k in   3.011691s

Comparison:
Fibonacci.matrix(500):     9038.0 i/s
Fibonacci.dynamic(500):     7254.7 i/s - 1.25x  slower
Fibonacci.cache_iterative(500):     7063.0 i/s - 1.28x  slower

Warming up --------------------------------------
99x BinaryTree(ChildFlexNode)#push
                       176.000  i/100ms
99x BinaryTree(FlexNode)#push
                       176.000  i/100ms
99x TernaryTree(ChildFlexNode)#push
                       328.000  i/100ms
99x TernaryTree(FlexNode)#push
                       225.000  i/100ms
Calculating -------------------------------------
99x BinaryTree(ChildFlexNode)#push
                          1.678k (± 6.3%) i/s -      5.104k in   3.053414s
99x BinaryTree(FlexNode)#push
                          1.754k (± 1.3%) i/s -      5.280k in   3.010519s
99x TernaryTree(ChildFlexNode)#push
                          3.266k (± 1.7%) i/s -      9.840k in   3.013327s
99x TernaryTree(FlexNode)#push
                          2.197k (± 5.3%) i/s -      6.750k in   3.081054s

Comparison:
99x TernaryTree(ChildFlexNode)#push:     3266.5 i/s
99x TernaryTree(FlexNode)#push:     2197.5 i/s - 1.49x  slower
99x BinaryTree(FlexNode)#push:     1754.1 i/s - 1.86x  slower
99x BinaryTree(ChildFlexNode)#push:     1678.4 i/s - 1.95x  slower

Warming up --------------------------------------
        Simplex init   874.000  i/100ms
         init, solve    76.000  i/100ms
Calculating -------------------------------------
        Simplex init      8.877k (± 1.3%) i/s -     27.094k in   3.052805s
         init, solve    470.063  (±14.7%) i/s -      1.444k in   3.140728s

Comparison:
        Simplex init:     8876.6 i/s
         init, solve:      470.1 i/s - 18.88x  slower

SIMPLEX_PARAMS.size = 14
simplices.size = 14
memsize(SIMPLEX_PARAMS): 152
memsize(simplices): 152
memsize(simplices after solving): 152
memsize(results): 152
Run options: --seed 5354

# Running:

bench_Heap_push_constant_0_9999_	 0.000018	 0.000027	 0.000271	 0.001404	 0.012411
.

Finished in 0.028794s, 34.7293 runs/s, 34.7293 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
