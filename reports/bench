Run options: --seed 515

# Running:

.....................S.S........................................................................

Finished in 0.322253s, 297.9024 runs/s, 3193.1410 assertions/s.

96 runs, 1029 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
/proc/loadavg 0.00 0.00 0.00 1/79 1653

#
# timing CompleteTree(N)#push where N is the size of the tree
#

CompleteTree(10) push: 0.00000068
CompleteTree(100) push: 0.00000064
CompleteTree(1000) push: 0.00000066
CompleteTree(10000) push: 0.00000061
CompleteTree(100000) push: 0.00000059
best fit: logarithmic (0.841); a = 0.000001, b = -0.000000

#
# timing CompleteTree#push where N is the count of pushes
#

10x CompleteTree#push: 0.00000234
100x CompleteTree#push: 0.00001888
1000x CompleteTree#push: 0.00018179
10000x CompleteTree#push: 0.00180838
100000x CompleteTree#push: 0.01812595
best fit: linear (1.000); a = -0.000001, b = 0.000000
Warming up --------------------------------------
Fibonacci.classic(25)
                         7.000  i/100ms
Fibonacci.cache_recursive(25)
                        11.078k i/100ms
Fibonacci.cache_iterative(25)
                        26.758k i/100ms
Calculating -------------------------------------
Fibonacci.classic(25)
                         73.449  (± 1.4%) i/s -    224.000  in   3.050197s
Fibonacci.cache_recursive(25)
                        120.855k (± 1.4%) i/s -    365.574k in   3.025466s
Fibonacci.cache_iterative(25)
                        300.921k (± 0.9%) i/s -    909.772k in   3.023555s

Comparison:
Fibonacci.cache_iterative(25):   300920.8 i/s
Fibonacci.cache_recursive(25):   120854.6 i/s - 2.49x  slower
Fibonacci.classic(25):       73.4 i/s - 4097.02x  slower

Warming up --------------------------------------
Fibonacci.cache_iterative(500)
                       627.000  i/100ms
Fibonacci.dynamic(500)
                       726.000  i/100ms
Fibonacci.matrix(500)
                       826.000  i/100ms
Calculating -------------------------------------
Fibonacci.cache_iterative(500)
                          6.420k (± 3.0%) i/s -     19.437k in   3.030542s
Fibonacci.dynamic(500)
                          7.252k (± 0.9%) i/s -     21.780k in   3.003442s
Fibonacci.matrix(500)
                          9.153k (± 0.9%) i/s -     28.084k in   3.068604s

Comparison:
Fibonacci.matrix(500):     9152.8 i/s
Fibonacci.dynamic(500):     7252.3 i/s - 1.26x  slower
Fibonacci.cache_iterative(500):     6419.9 i/s - 1.43x  slower

Warming up --------------------------------------
        Simplex init   922.000  i/100ms
         init, solve    77.000  i/100ms
Calculating -------------------------------------
        Simplex init      9.301k (± 0.8%) i/s -     28.582k in   3.073220s
         init, solve    490.271  (±20.8%) i/s -      1.463k in   3.104485s

Comparison:
        Simplex init:     9300.9 i/s
         init, solve:      490.3 i/s - 18.97x  slower

SIMPLEX_PARAMS.size = 14
simplices.size = 14
memsize(SIMPLEX_PARAMS): 152
memsize(simplices): 152
memsize(simplices after solving): 152
memsize(results): 152
Warming up --------------------------------------
99x BinaryTree(ChildNode)#push
                       179.000  i/100ms
99x BinaryTree(Node)#push
                       129.000  i/100ms
99x TernaryTree(ChildNode)#push
                       340.000  i/100ms
99x TernaryTree(Node)#push
                       244.000  i/100ms
Calculating -------------------------------------
99x BinaryTree(ChildNode)#push
                          1.811k (± 1.2%) i/s -      5.549k in   3.065218s
99x BinaryTree(Node)#push
                          1.320k (± 1.0%) i/s -      3.999k in   3.029995s
99x TernaryTree(ChildNode)#push
                          3.458k (± 0.9%) i/s -     10.540k in   3.048093s
99x TernaryTree(Node)#push
                          2.444k (± 1.4%) i/s -      7.564k in   3.095287s

Comparison:
99x TernaryTree(ChildNode)#push:     3458.2 i/s
99x TernaryTree(Node)#push:     2444.2 i/s - 1.41x  slower
99x BinaryTree(ChildNode)#push:     1810.6 i/s - 1.91x  slower
99x BinaryTree(Node)#push:     1319.9 i/s - 2.62x  slower

Run options: --seed 21667

# Running:

bench_Heap_push_constant_0_9999_	 0.000048	 0.000029	 0.000376	 0.001379	 0.012860
.

Finished in 0.028393s, 35.2200 runs/s, 35.2200 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
