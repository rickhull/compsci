Run options: --seed 53892

# Running:

..............................................................................................S.S.............

Finished in 0.381459s, 288.3661 runs/s, 32428.0837 assertions/s.

110 runs, 12370 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
/proc/loadavg 0.15 0.03 0.01 1/97 3439

#
# timing CompleteTree(N)#push where N is the size of the tree
#

CompleteTree(10) push: 0.00000058
CompleteTree(100) push: 0.00000057
CompleteTree(1000) push: 0.00000061
CompleteTree(10000) push: 0.00000060
CompleteTree(100000) push: 0.00000056
best fit: linear (0.253); a = 0.000001, b = -0.000000

#
# timing CompleteTree#push where N is the count of pushes
#

10x CompleteTree#push: 0.00000228
100x CompleteTree#push: 0.00001902
1000x CompleteTree#push: 0.00018655
10000x CompleteTree#push: 0.00185952
100000x CompleteTree#push: 0.01886066
best fit: linear (1.000); a = -0.000007, b = 0.000000
Warming up --------------------------------------
Fibonacci.classic(25)
                         7.000  i/100ms
Fibonacci.cache_recursive(25)
                        10.531k i/100ms
Fibonacci.cache_iterative(25)
                        23.678k i/100ms
Calculating -------------------------------------
Fibonacci.classic(25)
                         69.030  (± 4.3%) i/s -    210.000  in   3.048555s
Fibonacci.cache_recursive(25)
                        114.162k (± 2.5%) i/s -    347.523k in   3.046178s
Fibonacci.cache_iterative(25)
                        277.131k (± 1.7%) i/s -    852.408k in   3.076735s

Comparison:
Fibonacci.cache_iterative(25):   277130.6 i/s
Fibonacci.cache_recursive(25):   114162.4 i/s - 2.43x  slower
Fibonacci.classic(25):       69.0 i/s - 4014.65x  slower

Warming up --------------------------------------
Fibonacci.cache_iterative(500)
                       687.000  i/100ms
Fibonacci.dynamic(500)
                       670.000  i/100ms
Fibonacci.matrix(500)
                       843.000  i/100ms
Calculating -------------------------------------
Fibonacci.cache_iterative(500)
                          6.699k (± 3.8%) i/s -     20.610k in   3.081083s
Fibonacci.dynamic(500)
                          6.776k (± 4.5%) i/s -     20.770k in   3.071235s
Fibonacci.matrix(500)
                          8.455k (± 5.3%) i/s -     25.290k in   2.999980s

Comparison:
Fibonacci.matrix(500):     8454.5 i/s
Fibonacci.dynamic(500):     6776.3 i/s - 1.25x  slower
Fibonacci.cache_iterative(500):     6698.7 i/s - 1.26x  slower

Warming up --------------------------------------
99x BinaryTree(ChildFlexNode)#push
                       162.000  i/100ms
99x BinaryTree(FlexNode)#push
                       153.000  i/100ms
99x TernaryTree(ChildFlexNode)#push
                       293.000  i/100ms
99x TernaryTree(FlexNode)#push
                       204.000  i/100ms
Calculating -------------------------------------
99x BinaryTree(ChildFlexNode)#push
                          1.585k (± 7.3%) i/s -      4.860k in   3.083889s
99x BinaryTree(FlexNode)#push
                          1.684k (± 4.5%) i/s -      5.049k in   3.005850s
99x TernaryTree(ChildFlexNode)#push
                          3.155k (± 3.7%) i/s -      9.669k in   3.069089s
99x TernaryTree(FlexNode)#push
                          2.114k (± 7.1%) i/s -      6.324k in   3.006438s

Comparison:
99x TernaryTree(ChildFlexNode)#push:     3155.1 i/s
99x TernaryTree(FlexNode)#push:     2114.3 i/s - 1.49x  slower
99x BinaryTree(FlexNode)#push:     1683.5 i/s - 1.87x  slower
99x BinaryTree(ChildFlexNode)#push:     1584.6 i/s - 1.99x  slower

Warming up --------------------------------------
        Simplex init   891.000  i/100ms
         init, solve    75.000  i/100ms
Calculating -------------------------------------
        Simplex init      9.071k (± 0.7%) i/s -     27.621k in   3.045236s
         init, solve    490.722  (±19.0%) i/s -      1.425k in   3.008860s

Comparison:
        Simplex init:     9070.7 i/s
         init, solve:      490.7 i/s - 18.48x  slower

SIMPLEX_PARAMS.size = 14
simplices.size = 14
memsize(SIMPLEX_PARAMS): 152
memsize(simplices): 152
memsize(simplices after solving): 152
memsize(results): 152
Run options: --seed 32601

# Running:

bench_Heap_push_constant_0_9999_	 0.000050	 0.000025	 0.000143	 0.001381	 0.013437
.

Finished in 0.029176s, 34.2742 runs/s, 34.2742 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
