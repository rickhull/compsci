RUBYLIB=lib ruby-prof  examples/complete_tree.rb -- 
/proc/loadavg 0.64 0.28 0.13 1/95 7082

#
# Print CompSci::CompleteBinaryTree filled with static vals
#

initial vals: [82, 10, 10, 5, 50, 64, 55, 23, 61, 70, 76, 62, 62, 11, 63, 59, 33, 77, 92, 77, 67, 62, 36, 86, 64, 71, 4, 31, 50, 24]
#<CompSci::CompleteBinaryTree:0x0055bf3cb994b0 @array=[82, 10, 10, 5, 50, 64, 55, 23, 61, 70, 76, 62, 62, 11, 63, 59, 33, 77, 92, 77, 67, 62, 36, 86, 64, 71, 4, 31, 50, 24], @child_slots=2>

                                       82                                       
                   10                                      10                   
          5                  50                  64                  55         
    23        61        70        76        62        62        11        63    
  59   33   77   92   77   67   62   36   86   64   71   4    31   50   24 


#
# Push random vals and print again
#

new vals: [35, 26, 44, 28, 40, 27, 39, 10, 35, 94, 20, 18, 69, 53, 28, 9, 97, 46, 29, 98, 42, 70, 34, 43, 34, 19, 0, 96, 37, 38]

                                       82                                       
                   10                                      10                   
          5                  50                  64                  55         
    23        61        70        76        62        62        11        63    
  59   33   77   92   77   67   62   36   86   64   71   4    31   50   24   35 
26 44 28 40 27 39 10 35 94 20 18 69 53 28 9 97 46 29 98 42 70 34 43 34 19 0 96 37 38 



#
# Print CompSci::CompleteTernaryTree filled with static vals
#

initial vals: [82, 10, 10, 5, 50, 64, 55, 23, 61, 70, 76, 62, 62, 11, 63, 59, 33, 77, 92, 77, 67, 62, 36, 86, 64, 71, 4, 31, 50, 24]
#<CompSci::CompleteTernaryTree:0x0055bf3cb76e38 @array=[82, 10, 10, 5, 50, 64, 55, 23, 61, 70, 76, 62, 62, 11, 63, 59, 33, 77, 92, 77, 67, 62, 36, 86, 64, 71, 4, 31, 50, 24], @child_slots=3>

                                       82                                       
            10                        10                         5            
   50      64      55      23      61      70      76      62      62   
11 63 59 33 77 92 77 67 62 36 86 64 71 4 31 50 24 


#
# Push random vals and print again
#

new vals: [2, 40, 35, 32, 6, 21, 13, 5, 16, 17, 88, 83, 95, 73, 16, 2, 55, 60, 29, 59, 21, 45, 65, 79, 1, 0, 15, 15, 24, 66]

                                       82                                       
            10                        10                         5            
   50      64      55      23      61      70      76      62      62   
11 63 59 33 77 92 77 67 62 36 86 64 71 4 31 50 24 2 40 35 32 6 21 13 5 16 17 
88 83 95 73 16 2 55 60 29 59 21 45 65 79 1 0 15 15 24 66 



#
# Print CompSci::CompleteQuaternaryTree filled with static vals
#

initial vals: [82, 10, 10, 5, 50, 64, 55, 23, 61, 70, 76, 62, 62, 11, 63, 59, 33, 77, 92, 77, 67, 62, 36, 86, 64, 71, 4, 31, 50, 24]
#<CompSci::CompleteQuaternaryTree:0x0055bf3cb36450 @array=[82, 10, 10, 5, 50, 64, 55, 23, 61, 70, 76, 62, 62, 11, 63, 59, 33, 77, 92, 77, 67, 62, 36, 86, 64, 71, 4, 31, 50, 24], @child_slots=4>
RUBYLIB=lib ruby-prof  examples/heap.rb -- 

#
# display the results of ternary Heap push and pop
#

push: 76 8 30 90 18 72 46 68 54 70 34 89 4 6 66 17 70 91 79 45 23 24 6 95 71 50 5 59 57 8
array: [95, 90, 91, 89, 66, 79, 46, 71, 59, 68, 34, 76, 4, 6, 8, 17, 18, 70, 72, 45, 23, 24, 6, 30, 70, 50, 5, 54, 57, 8]
heap: true
                                       95                                       
            90                        91                        89            
   66      79      46      71      59      68      34      76       4   
6 8 17 18 70 72 45 23 24 6 30 70 50 5 54 57 8 


pop: 95
array: [91, 90, 71, 89, 66, 79, 46, 70, 59, 68, 34, 76, 4, 6, 8, 17, 18, 70, 72, 45, 23, 24, 6, 30, 8, 50, 5, 54, 57]
heap: true
                                       91                                       
            90                        71                        89            
   66      79      46      70      59      68      34      76       4   
6 8 17 18 70 72 45 23 24 6 30 8 50 5 54 57 


pop: 91 90 89 79 76 72 71 70 70
array: [68, 66, 59, 54, 24, 57, 46, 30, 23, 6, 34, 50, 4, 6, 8, 17, 18, 5, 8, 45]
heap: true
                                       68                                       
            66                        59                        54            
   24      57      46      30      23       6      34      50       4   
6 8 17 18 5 8 45 


push: 60 4 30 67 74 11 89 98 76 94 29 12 7 20 69 92 2 22 10 85 76 84 19 47 74 86 51 32 37 94
array: [98, 94, 94, 92, 84, 86, 60, 67, 74, 89, 34, 69, 85, 66, 76, 51, 57, 5, 8, 45, 46, 4, 30, 30, 59, 11, 23, 68, 6, 76, 29, 12, 7, 20, 50, 54, 2, 4, 10, 22, 6, 24, 19, 8, 47, 74, 17, 32, 37, 18]
heap: true
                                       98                                       
            94                        94                        92            
   84      86      60      67      74      89      34      69      85   
66 76 51 57 5 8 45 46 4 30 30 59 11 23 68 6 76 29 12 7 20 50 54 2 4 10 22 
6 24 19 8 47 74 17 32 37 18 


#
# display the results of binary Heap push and pop
#

push: 15 94 97 72 24 45 72 14 32 38 78 16 41 52 95 82 32 19 14 17 87 1 21 86 67 58 5 92 91 88
array: [97, 87, 95, 78, 82, 86, 94, 32, 19, 72, 38, 67, 58, 92, 88, 14, 32, 15, 14, 17, 24, 1, 21, 16, 45, 41, 5, 52, 91, 72]
heap: true
                                       97                                       
                   87                                      95                   
         78                  82                  86                  94         
    32        19        72        38        67        58        92        88    
  14   32   15   14   17   24   1    21   16   45   41   5    52   91   72 


pop: 97
array: [95, 87, 94, 78, 82, 86, 92, 32, 19, 72, 38, 67, 58, 91, 88, 14, 32, 15, 14, 17, 24, 1, 21, 16, 45, 41, 5, 52, 72]
heap: true
                                       95                                       
                   87                                      94                   
         78                  82                  86                  92         
    32        19        72        38        67        58        91        88    
  14   32   15   14   17   24   1    21   16   45   41   5    52   72 


pop: 95 94 92 91 88 87 86 82 78
array: [72, 72, 67, 32, 41, 58, 52, 32, 19, 24, 38, 45, 1, 5, 16, 14, 21, 15, 14, 17]
heap: true
                                       72                                       
                   72                                      67                   
         32                  41                  58                  52         
    32        19        24        38        45         1         5        16    
  14   21   15   14   17 


push: 92 84 21 67 15 12 1 41 28 40 45 90 4 61 65 26 22 63 0 32 33 11 58 39 30 47 80 39 62 49
array: [92, 90, 67, 84, 80, 67, 52, 65, 63, 58, 72, 62, 12, 41, 45, 32, 61, 22, 26, 33, 41, 39, 72, 58, 49, 1, 1, 5, 28, 16, 40, 14, 4, 21, 32, 15, 19, 14, 0, 17, 32, 11, 24, 38, 30, 21, 47, 39, 45, 15]
heap: true
                                       92                                       
                   90                                      67                   
         84                  80                  67                  52         
    65        63        58        72        62        12        41        45    
  32   61   22   26   33   41   39   72   58   49   1    1    5    28   16   40 
14 4 21 32 15 19 14 0 17 32 11 24 38 30 21 47 39 45 15 

Measure Mode: wall_time
Thread ID: 47331249552400
Fiber ID: 47331250963420
Total: 0.017463
Sort by: self_time

 %self      total      self      wait     child     calls  name
  8.66      0.011     0.002     0.000     0.009      604  *Array#each
  7.94      0.003     0.001     0.000     0.002      258   Kernel#loop
  5.28      0.002     0.001     0.000     0.001     1236   <Class::CompSci::CompleteTree>#parent_idx
  5.26      0.002     0.001     0.000     0.001      697   CompSci::Heap#heapish?
  4.16      0.005     0.001     0.000     0.005      342  *Array#initialize
  3.73      0.001     0.001     0.000     0.000     2942   Integer#+
  2.85      0.000     0.000     0.000     0.000     1752   Integer#/
  2.50      0.001     0.000     0.000     0.000      955   BasicObject#!=
  2.37      0.000     0.000     0.000     0.000     1849   Integer#<
  2.37      0.000     0.000     0.000     0.000     1736   Array#[]
  2.35      0.000     0.000     0.000     0.000     1532   Integer#*
  2.12      0.002     0.000     0.000     0.002      233  *CompSci::Heap#sift_up
  1.85      0.000     0.000     0.000     0.000     1356   Integer#-
  1.55      0.000     0.000     0.000     0.000      654   Integer#to_s
  1.46      0.003     0.000     0.000     0.003      258   <Class::CompSci::CompleteTree>#gen
  1.46      0.000     0.000     0.000     0.000      816   Kernel#class
  1.43      0.000     0.000     0.000     0.000     1033   Array#length
  1.43      0.000     0.000     0.000     0.000      288   String#+
  1.14      0.000     0.000     0.000     0.000      939   Integer#==
  1.09      0.002     0.000     0.000     0.002      336   <Class::CompSci::CompleteTree>#children_idx
  0.99      0.000     0.000     0.000     0.000      258   String#ljust
  0.96      0.002     0.000     0.000     0.002      120   CompSci::Heap#push
  0.91      0.000     0.000     0.000     0.000      258   String#rjust
  0.90      0.006     0.000     0.000     0.005      344  *Class#new
  0.89      0.000     0.000     0.000     0.000      697   Integer#<=>
  0.79      0.000     0.000     0.000     0.000      120   Kernel#rand
  0.77      0.000     0.000     0.000     0.000      342   Array#[]=
  0.74      0.000     0.000     0.000     0.000      516   String#size
  0.69      0.001     0.000     0.000     0.001       78   CompSci::Heap#heapiest
  0.64      0.000     0.000     0.000     0.000      258   Array#max
  0.63      0.000     0.000     0.000     0.000        6   Array#join
  0.57      0.017     0.000     0.000     0.017        2   Global#[No method]
  0.56      0.000     0.000     0.000     0.000        8   Array#inspect
  0.55      0.002     0.000     0.000     0.002      120   Kernel#tap
  0.54      0.006     0.000     0.000     0.006       48   IO#puts
  0.48      0.000     0.000     0.000     0.000      258   Integer#**
  0.47      0.002     0.000     0.000     0.002       78  *CompSci::Heap#sift_down
  0.45      0.000     0.000     0.000     0.000       80   IO#write
  0.43      0.000     0.000     0.000     0.000      300   BasicObject#!
  0.42      0.000     0.000     0.000     0.000      250   Array#<<
  0.32      0.000     0.000     0.000     0.000      120   Array#push
  0.31      0.000     0.000     0.000     0.000      233   Integer#<=
  0.27      0.002     0.000     0.000     0.002       20   CompSci::Heap#pop
  0.24      0.000     0.000     0.000     0.000       78   Integer#>=
  0.19      0.006     0.000     0.000     0.006       48   Kernel#puts
  0.17      0.000     0.000     0.000     0.000        6   IO#set_encoding
  0.16      0.000     0.000     0.000     0.000        8   String#%
  0.12      0.000     0.000     0.000     0.000       20   Array#unshift
  0.12      0.000     0.000     0.000     0.000       78   Array#first
RUBYLIB=lib ruby-prof  examples/heap_push.rb -- 

#
# 3 seconds worth of Heap pushes
#

10000th push: 0.00004071 s
20000th push: 0.00005363 s
30000th push: 0.00005164 s
40000th push: 0.00006866 s
50000th push: 0.00004395 s
60000th push: 0.00004164 s
70000th push: 0.00004170 s
80000th push: 0.00003068 s
90000th push: 0.00005249 s
pushed 94292 items in 3.0 s

still a heap with 94292 items? YES - 1.457 sec

Measure Mode: wall_time
Thread ID: 47407644195860
Fiber ID: 47407644134060
Total: 4.458738
Sort by: self_time

 %self      total      self      wait     child     calls  name
  9.95      1.000     0.444     0.000     0.556   310054   CompSci::Heap#heapish?
  6.55      1.940     0.292     0.000     1.648   215767  *CompSci::Heap#sift_up
  5.62      0.250     0.250     0.000     0.000   957350   Array#[]
  5.27      3.000     0.235     0.000     2.765        1   Kernel#loop
  4.27      0.344     0.190     0.000     0.153    94292   Array#initialize
  4.07      0.299     0.181     0.000     0.117   215763   <Class::CompSci::CompleteTree>#parent_idx
  3.37      0.233     0.150     0.000     0.083   310054   BasicObject#!=
  3.16      0.141     0.141     0.000     0.000   498638   Integer#*
  3.15      2.169     0.140     0.000     2.029    94292   CompSci::Heap#push
  3.11      0.250     0.139     0.000     0.112    94292   Object#number
  3.05      0.136     0.136     0.000     0.000   498647   Integer#==
  2.81      0.125     0.125     0.000     0.000   471460   Integer#+
  2.03      0.091     0.091     0.000     0.000   310056   Integer#-
  2.01      0.090     0.090     0.000     0.000   310055   Kernel#class
  1.90      0.227     0.085     0.000     0.143    94303   <Module::CompSci::Timer>#since
  1.87      0.084     0.084     0.000     0.000   282885   Integer#%
  1.84      0.082     0.082     0.000     0.000   282877   Array#length
  1.79      0.080     0.080     0.000     0.000   310054   Integer#<=>
  1.52      0.112     0.068     0.000     0.044    94315   <Module::CompSci::Timer>#now
  1.51      0.067     0.067     0.000     0.000   242950   Array#[]=
  1.45      0.065     0.065     0.000     0.000   215767   Integer#<=
  1.41      0.460     0.063     0.000     0.397    94292   <Class::CompSci::CompleteTree>#children_idx
  1.32      0.059     0.059     0.000     0.000   215763   BasicObject#!
  1.24      0.055     0.055     0.000     0.000   215763   Integer#/
  1.21      0.054     0.054     0.000     0.000   188584   Integer#<
  1.20      0.397     0.053     0.000     0.344    94293   Class#new
  0.98      0.044     0.044     0.000     0.000    94315   <Module::Process>#clock_gettime
  0.79      0.035     0.035     0.000     0.000    94292   Float#>
  0.70      0.031     0.031     0.000     0.000    94386   Array#push
  0.70      0.031     0.031     0.000     0.000    94303   Float#-
  0.64      0.028     0.028     0.000     0.000    94291   Array#<<
  0.01      0.000     0.000     0.000     0.000       94   Kernel#rand
  0.01      0.000     0.000     0.000     0.000       11   String#%
  0.00      0.000     0.000     0.000     0.000       95   Array#shift
  0.00      1.457     0.000     0.000     1.457       10   <Module::CompSci::Timer>#elapsed
  0.00      0.000     0.000     0.000     0.000       26   IO#write
  0.00      4.459     0.000     0.000     4.459        2   Global#[No method]
  0.00      0.000     0.000     0.000     0.000        8   IO#set_encoding
  0.00      0.000     0.000     0.000     0.000        1   Range#each
  0.00      0.000     0.000     0.000     0.000        1   Array#shuffle
  0.00      1.457     0.000     0.000     1.457   188587  *Array#each
  0.00      0.000     0.000     0.000     0.000       14   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       14   IO#puts
  0.00      0.002     0.000     0.000     0.002        6  *Kernel#require
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_enter
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_exit
  0.00      0.000     0.000     0.000     0.000       23   Module#method_added
  0.00      0.000     0.000     0.000     0.000        1   Kernel#print
  0.00      0.000     0.000     0.000     0.000        1   Module#attr_reader
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#suffixes
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#find_unresolved_default_spec
  0.00      0.000     0.000     0.000     0.000        1   CompSci::Heap#initialize
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_check_owner
  0.00      0.000     0.000     0.000     0.000        3   <Class::Gem::Specification>#unresolved_deps
  0.00      0.000     0.000     0.000     0.000        9   <Class::Thread>#current
  0.00      0.000     0.000     0.000     0.000        2   Integer#to_s
  0.00      0.000     0.000     0.000     0.000        7   BasicObject#singleton_method_added
  0.00      0.000     0.000     0.000     0.000        5   Class#inherited
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#lock
  0.00      0.000     0.000     0.000     0.000        1   CompSci::CompleteTree#size
  0.00      1.457     0.000     0.000     1.457    94292  *CompSci::Heap#heap?
  0.00      0.000     0.000     0.000     0.000        1   Enumerable#to_a
  0.00      0.000     0.000     0.000     0.000        1   Module#append_features
  0.00      0.000     0.000     0.000     0.000        1   CompSci::CompleteTree#initialize
  0.00      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.00      0.000     0.000     0.000     0.000        1   Module#alias_method
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#unlock
  0.00      0.000     0.000     0.000     0.000        3   Kernel#respond_to?
  0.00      0.000     0.000     0.000     0.000        1   Module#included
  0.00      0.000     0.000     0.000     0.000        1   String#to_i

* indicates recursively called methods
RUBYLIB=lib ruby-prof  examples/tree.rb -- 

#
# Fill up and display some trees
#

vals: [84, 85, 8, 1, 47, 59, 43, 46, 66, 58, 4, 27, 54, 48, 38, 90, 21, 67, 70, 79, 88, 96, 1, 85, 25, 11, 68, 67, 42, 91]

#
# Children: 2
#

#<CompSci::Node:0x2ac49ed48bd0i @value=84 @children=[85, 8]>

                                       84                                       
                   85                                       8                   
          1                  47                  59                  43         
    46        66        58         4        27        54        48        38    
  90   21   67   70   79   88   96   1    85   25   11   68   67   42   91      


#
# Children: 3
#

#<CompSci::Node:0x2ac49ed365aci @value=84 @children=[85, 8, 1]>

                                       84                                       
            85                         8                         1            
   47      59      43      46      66      58       4      27      54   
48 38 90 21 67 70 79 88 96 1 85 25 11 68 67 42 91                     


#
# Children: 4
#

#<CompSci::Node:0x2ac49ecf109ci @value=84 @children=[85, 8, 1, 47]>

                                       84                                       
         85                   8                   1                  47         
  59   43   46   66   58   4    27   54   48   38   90   21   67   70   79   88 
96 1 85 25 11 68 67 42 91                                                        

Measure Mode: wall_time
Thread ID: 47023965273100
Fiber ID: 47023965211680
Total: 0.005491
Sort by: self_time

 %self      total      self      wait     child     calls  name
  9.48      0.001     0.001     0.000     0.001       13   Array#map
  6.90      0.001     0.000     0.000     0.000      310   Array#initialize
  6.13      0.001     0.000     0.000     0.001      466  *Class#new
  5.05      0.000     0.000     0.000     0.000       13   Array#any?
  4.12      0.001     0.000     0.000     0.001       49   Integer#times
  3.76      0.000     0.000     0.000     0.000      156   CompSci::Node#initialize
  3.12      0.000     0.000     0.000     0.000      202   Array#+
  2.93      0.000     0.000     0.000     0.000      168   CompSci::Node#to_s
  2.38      0.000     0.000     0.000     0.000      513   Array#[]
  1.94      0.000     0.000     0.000     0.000      153   CompSci::Node#[]=
  1.74      0.000     0.000     0.000     0.000      156   String#rjust
  1.74      0.000     0.000     0.000     0.000      156   String#ljust
  1.58      0.000     0.000     0.000     0.000      312   String#size
  1.55      0.000     0.000     0.000     0.000      379   BasicObject#!
  1.11      0.000     0.000     0.000     0.000      176   Array#length
  1.08      0.000     0.000     0.000     0.000      169   Array#max
  0.98      0.000     0.000     0.000     0.000        3   Kernel#p
  0.93      0.000     0.000     0.000     0.000      312   Integer#+
  0.92      0.000     0.000     0.000     0.000      135   Integer#to_s
  0.89      0.000     0.000     0.000     0.000      153   Array#[]=
  0.86      0.000     0.000     0.000     0.000       19   Array#join
  0.83      0.003     0.000     0.000     0.003        3   CompSci::Node#display
  0.79      0.000     0.000     0.000     0.000      156   Array#shift
  0.77      0.005     0.000     0.000     0.005        2   Global#[No method]
  0.76      0.000     0.000     0.000     0.000      169   Integer#/
  0.70      0.004     0.000     0.000     0.004       22  *Array#each
  0.62      0.000     0.000     0.000     0.000      369   NilClass#nil?
  0.47      0.001     0.000     0.000     0.001       13   <Class::CompSci::Node>#display_line
  0.46      0.000     0.000     0.000     0.000        4   IO#set_encoding
  0.35      0.000     0.000     0.000     0.000        3   String#%
  0.35      0.000     0.000     0.000     0.000       18   IO#write
  0.29      0.000     0.000     0.000     0.000        1   Array#inspect
  0.28      0.000     0.000     0.000     0.000       66   NilClass#to_s
  0.25      0.000     0.000     0.000     0.000       30   Kernel#rand
  0.24      0.001     0.000     0.000     0.001       10   Enumerable#reduce
  0.23      0.000     0.000     0.000     0.000        2   Module#attr_accessor
  0.23      0.000     0.000     0.000     0.000       14   Kernel#puts
  0.20      0.000     0.000     0.000     0.000       14   IO#puts
  0.18      0.000     0.000     0.000     0.000       26   Module#method_added
  0.18      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.16      0.000     0.000     0.000     0.000        3   CompSci::Node#inspect
  0.16      0.000     0.000     0.000     0.000       13   Array#empty?
  0.16      0.001     0.000     0.000     0.001        2  *Kernel#require
  0.13      0.000     0.000     0.000     0.000        3   Array#initialize_copy
  0.13      0.000     0.000     0.000     0.000       10   Integer#**
  0.11      0.000     0.000     0.000     0.000        1   MonitorMixin#mon_enter
  0.10      0.000     0.000     0.000     0.000       16   Kernel#class
  0.10      0.000     0.000     0.000     0.000        3   Kernel#dup
  0.09      0.000     0.000     0.000     0.000        3   Module#to_s
  0.09      0.000     0.000     0.000     0.000        1   Module#included
  0.07      0.000     0.000     0.000     0.000       10   Array#<<
  0.07      0.000     0.000     0.000     0.000        1   MonitorMixin#mon_exit
  0.06      0.000     0.000     0.000     0.000       10   Integer#>
  0.06      0.000     0.000     0.000     0.000       10   Kernel#nil?
  0.06      0.000     0.000     0.000     0.000        1   Module#append_features
  0.06      0.000     0.000     0.000     0.000        1   <Module::Gem>#suffixes
  0.05      0.000     0.000     0.000     0.000        1   <Module::Gem>#find_unresolved_default_spec
  0.04      0.000     0.000     0.000     0.000        5   Class#inherited
  0.04      0.000     0.000     0.000     0.000        1   <Class::Gem::Specification>#unresolved_deps
  0.04      0.000     0.000     0.000     0.000        1   Thread::Mutex#lock
  0.04      0.000     0.000     0.000     0.000        3   <Class::Thread>#current
  0.03      0.000     0.000     0.000     0.000        3   Kernel#initialize_dup
  0.03      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.03      0.000     0.000     0.000     0.000        2   BasicObject#singleton_method_added
  0.02      0.000     0.000     0.000     0.000        1   Kernel#respond_to?
  0.02      0.000     0.000     0.000     0.000        3   Kernel#object_id
  0.02      0.000     0.000     0.000     0.000        1   Thread::Mutex#unlock
  0.02      0.000     0.000     0.000     0.000        1   MonitorMixin#mon_check_owner

* indicates recursively called methods
RUBYLIB=lib ruby-prof  examples/flex_node.rb -- 

#
# Try out Binary, Ternary, and Quaternary FlexNodes
# Push the same vals to each
#

[35, 22, 39, 39, 22, 4, 57, 48, 8, 25, 57, 22, 50, 41, 84, 30, 75, 17, 36, 4, 50, 68, 90, 36, 83, 61, 80, 19, 57, 65]
#<CompSci::ChildFlexNode:0x2aea35002b08i @value=35 @children=[22, 39]>
                                       35                                       
                   22                                      39                   
         39                  22                   4                  57         
    48         8        25        57        22        50        41        84    
  30   75   17   36   4    50   68   90   36   83   61   80   19   57   65   _  

df_search visited: 35 22 39 48 30 75 8 17 36 22 25 4 50 57 68 90 39 4 22 36 83 50 61 80 57 41 19 57 84 65


push: [77, 83, 55, 98, 7, 74, 76, 3, 38, 95, 22, 24, 25, 59, 58, 26, 58, 38, 71, 65, 45, 11, 80, 79, 93, 16, 88, 5, 75, 63]

                                       35                                       
                   22                                      39                   
         39                  22                   4                  57         
    48         8        25        57        22        50        41        84    
  30   75   17   36   4    50   68   90   36   83   61   80   19   57   65   77 
83 55 98 7 74 76 3 38 95 22 24 25 59 58 26 58 38 71 65 45 11 80 79 93 16 88 5 75 63 _ _ _ 


[35, 22, 39, 39, 22, 4, 57, 48, 8, 25, 57, 22, 50, 41, 84, 30, 75, 17, 36, 4, 50, 68, 90, 36, 83, 61, 80, 19, 57, 65]
#<CompSci::ChildFlexNode:0x2aea34f13e7ci @value=35 @children=[22, 39, 39]>
                                       35                                       
            22                        39                        39            
   22       4      57      48       8      25      57      22      50   
41 84 30 75 17 36 4 50 68 90 36 83 61 80 19 57 65 _ _ _ _ _ _ _ _ _ _ 

df_search visited: 35 22 22 41 84 30 4 75 17 36 57 4 50 68 39 48 90 36 83 8 61 80 19 25 57 65 39 57 22 50


push: [88, 81, 58, 80, 60, 93, 59, 48, 40, 55, 52, 17, 63, 24, 55, 50, 96, 12, 57, 51, 24, 73, 4, 93, 15, 87, 58, 82, 6, 10]

                                       35                                       
            22                        39                        39            
   22       4      57      48       8      25      57      22      50   
41 84 30 75 17 36 4 50 68 90 36 83 61 80 19 57 65 88 81 58 80 60 93 59 48 40 55 
52 17 63 24 55 50 96 12 57 51 24 73 4 93 15 87 58 82 6 10 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


[35, 22, 39, 39, 22, 4, 57, 48, 8, 25, 57, 22, 50, 41, 84, 30, 75, 17, 36, 4, 50, 68, 90, 36, 83, 61, 80, 19, 57, 65]
#<CompSci::ChildFlexNode:0x2aea34fb2a68i @value=35 @children=[22, 39, 39, 22]>
                                       35                                       
         22                  39                  39                  22         
  4    57   48   8    25   57   22   50   41   84   30   75   17   36   4    50 
68 90 36 83 61 80 19 57 65 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

df_search visited: 35 22 4 68 90 36 83 57 61 80 19 57 48 65 8 39 25 57 22 50 39 41 84 30 75 22 17 36 4 50


push: [54, 46, 85, 31, 88, 92, 81, 63, 42, 83, 92, 34, 30, 72, 76, 72, 82, 92, 73, 73, 64, 51, 92, 77, 75, 96, 44, 88, 25, 3]

                                       35                                       
         22                  39                  39                  22         
  4    57   48   8    25   57   22   50   41   84   30   75   17   36   4    50 
68 90 36 83 61 80 19 57 65 54 46 85 31 88 92 81 63 42 83 92 34 30 72 76 72 82 92 73 73 64 51 92 77 75 96 44 88 25 3 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 



#
# 30 ChildFlexNode pushes and df_search
#

[51, 21, 95, 26, 56, 11, 78, 33, 83, 74, 40, 93, 32, 66, 96, 18, 63, 56, 41, 68, 81, 60, 29, 30, 58, 11, 10, 70, 4, 44]
#<CompSci::ChildFlexNode:0x2aea3504bfb0i @value=51 @children=[21, 95]>
                                       51                                       
                   21                                      95                   
         26                  56                  11                  78         
    33        83        74        40        93        32        66        96    
  18   63   56   41   68   81   60   29   30   58   11   10   70   4    44   _  

visited 51
visited 21
visited 26
visited 33
visited 18
visited 63
visited 83
visited 56
visited 41
visited 56
visited 74
visited 68
visited 81
visited 40
visited 60
visited 29
visited 95
visited 11
visited 93
visited 30
visited 58
visited 32
visited 11
visited 10
visited 78
visited 66
visited 70
visited 4
visited 96
visited 44

push: [5, 52, 54, 51, 72, 57, 32, 22, 71, 86, 36, 10, 65, 26, 9, 2, 94, 34, 65, 54, 70, 1, 98, 14, 13, 26, 77, 18, 25, 65]
                                       51                                       
                   21                                      95                   
         26                  56                  11                  78         
    33        83        74        40        93        32        66        96    
  18   63   56   41   68   81   60   29   30   58   11   10   70   4    44   5  
52 54 51 72 57 32 22 71 86 36 10 65 26 9 2 94 34 65 54 70 1 98 14 13 26 77 18 25 65 _ _ _ 


#
# 3 seconds worth of Binary ChildFlexNode pushes
#

100th push: 0.00022926 s
200th push: 0.00046870 s
300th push: 0.00081581 s
400th push: 0.00106278 s
500th push: 0.00120958 s
600th push: 0.00140566 s
700th push: 0.00194604 s
800th push: 0.00208707 s
900th push: 0.00241784 s
1000th push: 0.00230090 s
-----------
    1k push: 1.2720 s (786 push / s)

1100th push: 0.00315091 s
1200th push: 0.00301675 s
1300th push: 0.00325576 s
1400th push: 0.00344293 s
1500th push: 0.00414734 s
pushed 1514 items in 3.0 s

Measure Mode: wall_time
Thread ID: 47185398881300
Fiber ID: 47185398819500
Total: 3.031830
Sort by: self_time

 %self      total      self      wait     child     calls  name
 37.03      2.970     1.123     0.000     1.848     1750   CompSci::FlexNode#bf_search
 17.09      0.518     0.518     0.000     0.000   575442   Array#+
 16.99      0.792     0.515     0.000     0.277   576681   CompSci::FlexNode#open_parent?
  8.22      0.249     0.249     0.000     0.000   576922   Array#shift
  4.80      0.146     0.146     0.000     0.000   577740   BasicObject#!
  4.76      0.144     0.144     0.000     0.000   576925   Array#empty?
  4.58      0.139     0.139     0.000     0.000   577262   Array#length
  4.55      0.138     0.138     0.000     0.000   576681   Integer#<
  0.20      0.014     0.006     0.000     0.008     2272   Class#new
  0.19      3.003     0.006     0.000     2.997        1   Kernel#loop
  0.13      0.007     0.004     0.000     0.002     1755   CompSci::ChildFlexNode#initialize
  0.12      0.007     0.004     0.000     0.003     1750   CompSci::ChildFlexNode#add_child
  0.12      2.974     0.004     0.000     2.970     1750   CompSci::FlexNode#open_parent
  0.09      0.023     0.003     0.000     0.020     1750   CompSci::FlexNode#new_child
  0.08      0.002     0.002     0.000     0.000     1755   CompSci::FlexNode#initialize
  0.08      0.005     0.002     0.000     0.002       39   Array#map
  0.08      2.999     0.002     0.000     2.996     1750   CompSci::FlexNode#push
  0.08      0.002     0.002     0.000     0.000     1695   Kernel#rand
  0.08      0.004     0.002     0.000     0.002     1549   <Module::CompSci::Timer>#now
  0.07      0.007     0.002     0.000     0.005     1531   <Module::CompSci::Timer>#since
  0.06      0.002     0.002     0.000     0.000     1549   <Module::Process>#clock_gettime
  0.06      0.002     0.002     0.000     0.000     1514   Float#>
  0.05      0.001     0.001     0.000     0.000     1871   Array#<<
  0.04      0.002     0.001     0.000     0.000     1750   BasicObject#!=
  0.03      0.001     0.001     0.000     0.000     1531   Float#-
  0.03      0.001     0.001     0.000     0.000      517   Array#initialize
  0.03      0.001     0.001     0.000     0.000     2552   Integer#+
  0.02      0.001     0.001     0.000     0.000     1529   Integer#==
  0.02      0.001     0.001     0.000     0.000       39   Array#any?
  0.02      0.001     0.001     0.000     0.000     1529   Integer#%
  0.02      0.001     0.001     0.000     0.000     1793   Kernel#class
  0.02      0.001     0.001     0.000     0.000      519   String#ljust
  0.02      0.000     0.000     0.000     0.000     1750   BasicObject#==
  0.02      0.000     0.000     0.000     0.000      736   Integer#to_s
  0.01      0.000     0.000     0.000     0.000       24   String#%
  0.01      0.001     0.000     0.000     0.000      495   CompSci::Node#to_s
  0.01      0.019     0.000     0.000     0.019      155  *Array#each
  0.01      0.000     0.000     0.000     0.000     1038   String#size
  0.01      0.000     0.000     0.000     0.000      519   String#rjust
  0.01      0.000     0.000     0.000     0.000     1028   NilClass#nil?
  0.01      0.000     0.000     0.000     0.000      968   Array#[]
  0.01      0.000     0.000     0.000     0.000       54   Array#join
  0.01      0.000     0.000     0.000     0.000      558   Integer#/
  0.01      0.000     0.000     0.000     0.000      558   Array#max
  0.01      0.000     0.000     0.000     0.000        8   Kernel#p
  0.00      0.000     0.000     0.000     0.000      152   IO#write
  0.00      3.032     0.000     0.000     3.032        2   Global#[No method]
  0.00      0.009     0.000     0.000     0.009        8   CompSci::Node#display
  0.00      0.000     0.000     0.000     0.000        8   Array#inspect
  0.00      0.000     0.000     0.000     0.000       89   IO#puts
  0.00      0.005     0.000     0.000     0.005       39   <Class::CompSci::Node>#display_line
  0.00      0.000     0.000     0.000     0.000       89   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       31   Integer#**
  0.00      0.003     0.000     0.000     0.003       31   Enumerable#reduce
  0.00      0.031     0.000     0.000     0.031       15   <Module::CompSci::Timer>#elapsed
  0.00      0.000     0.000     0.000     0.000        8   IO#set_encoding
  0.00      0.000     0.000     0.000     0.000      120  *CompSci::FlexNode#df_search
  0.00      0.000     0.000     0.000     0.000        3   Module#attr_accessor
  0.00      0.000     0.000     0.000     0.000       42   Module#method_added
  0.00      0.002     0.000     0.000     0.002        6  *Kernel#require
  0.00      0.000     0.000     0.000     0.000       31   Kernel#nil?
  0.00      0.000     0.000     0.000     0.000        4   CompSci::Node#inspect
  0.00      0.000     0.000     0.000     0.000       31   Integer#>
  0.00      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_enter
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_exit
  0.00      0.000     0.000     0.000     0.000        9   <Class::Thread>#current
  0.00      0.000     0.000     0.000     0.000        4   Module#to_s
  0.00      0.000     0.000     0.000     0.000        6   BasicObject#singleton_method_added
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#suffixes
  0.00      0.000     0.000     0.000     0.000        7   Class#inherited
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#find_unresolved_default_spec
  0.00      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_check_owner
  0.00      0.000     0.000     0.000     0.000        3   <Class::Gem::Specification>#unresolved_deps
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#lock
  0.00      0.000     0.000     0.000     0.000        1   Integer#to_f
  0.00      0.000     0.000     0.000     0.000        1   String#to_i
  0.00      0.000     0.000     0.000     0.000        3   Kernel#dup
  0.00      0.000     0.000     0.000     0.000        3   Array#initialize_copy
  0.00      0.000     0.000     0.000     0.000        3   Kernel#initialize_dup
  0.00      0.000     0.000     0.000     0.000        1   Float#/
  0.00      0.000     0.000     0.000     0.000        4   Kernel#object_id
  0.00      0.000     0.000     0.000     0.000        1   Module#append_features
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#unlock
  0.00      0.000     0.000     0.000     0.000        3   Kernel#respond_to?
  0.00      0.000     0.000     0.000     0.000        1   Module#included

* indicates recursively called methods
RUBYLIB=lib ruby-prof  examples/binary_search_tree.rb -- 

#
# Insert nodes into a BST (random keys, duplicates: true)
#

[:king, :london, :willie, :pudding, :queenie, :uncle, :yellow, :vinegar, :freddy, :apples, :orange, :xerxes, :robert, :ink, :monkey, :tommy, :charlie, :george, :zebra, :sugar, :nuts, :duff, :butter, :harry, :johnnie, :edward]
[11, 90, 78, 18, 89, 3, 60, 19, 11, 56, 65, 85, 8, 15, 70, 46, 72, 87, 17, 9, 30, 54, 5, 57, 56, 40]
                                     11:king                                    
                 3:uncle                                90:london               
          _               8:robert            78:willie               _         
     _         _     5:butter   9:sugar 18:pudding 89:queenie      _         _    
  _    _    _    _    _    _    _    _  11:freddy 60:yellow 85:xerxes   _    _    _    _    _  
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 15:ink 19:vinegar 65:orange _ 87:george _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 17:zebra _ 56:apples _ 70:monkey _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 46:tommy 57:harry _ _ _ 72:charlie _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 30:nuts 54:duff 56:johnnie _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 40:edward _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


#
# Insert 30 nodes into a BST (unique keys, duplicates: false)
#

                                      28:27                                     
                  25:56                                   30:3                  
        16:31               26:58               29:70                 _         
   5:21      20:71       _       27:16       _         _         _         _    
4:19 11:34 18:57 22:5   _    _    _    _    _    _    _    _    _    _    _    _  
2:82 _ 8:59 13:42 17:34 19:85 21:33 23:52 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
1:43 3:97 _ _ 6:64 10:0 12:91 15:66 _ _ _ _ _ _ _ 24:54 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ 7:67 9:76 _ _ _ 14:13 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

#
# Search for 30 different keys
#

found 1:43
found 2:82
found 3:97
found 4:19
found 5:21
found 6:64
found 7:67
found 8:59
found 9:76
found 10:0
found 11:34
found 12:91
found 13:42
found 14:13
found 15:66
found 16:31
found 17:34
found 18:57
found 19:85
found 20:71
found 21:33
found 22:5
found 23:52
found 24:54
found 25:56
found 26:58
found 27:16
found 28:27
found 29:70
found 30:3
Measure Mode: wall_time
Thread ID: 47023764503560
Fiber ID: 47023764442780
Total: 0.026333
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.61      0.009     0.004     0.000     0.005       19   Array#map
  9.93      0.003     0.003     0.000     0.000     1276   Array#+
  6.72      0.002     0.002     0.000     0.000     1278   String#ljust
  5.39      0.001     0.001     0.000     0.000     1333   Array#initialize
  5.26      0.007     0.001     0.000     0.005       18   Array#each
  4.37      0.003     0.001     0.000     0.002       18   Array#any?
  4.34      0.001     0.001     0.000     0.000     1919   BasicObject#!
  4.34      0.003     0.001     0.000     0.002     1389  *Class#new
  2.83      0.001     0.001     0.000     0.000      384   <Class::CompSci::KeyNode>#key_cmp_idx
  2.60      0.001     0.001     0.000     0.000     2556   Integer#+
  2.56      0.001     0.001     0.000     0.000     1278   String#rjust
  2.43      0.002     0.001     0.000     0.001      384   CompSci::KeyNode#cidx
  2.34      0.001     0.001     0.000     0.000     2556   String#size
  2.03      0.001     0.001     0.000     0.000     1910   Array#length
  1.65      0.000     0.000     0.000     0.000     1871   NilClass#nil?
  1.52      0.000     0.000     0.000     0.000      106   Array#join
  1.47      0.000     0.000     0.000     0.000     1296   Array#max
  1.44      0.000     0.000     0.000     0.000     1090   Integer#==
  1.38      0.000     0.000     0.000     0.000     1296   Integer#/
  1.07      0.001     0.000     0.000     0.000       86   CompSci::KeyNode#to_s
  0.74      0.000     0.000     0.000     0.000      768   Integer#<
  0.70      0.000     0.000     0.000     0.000      691   Array#[]
  0.69      0.000     0.000     0.000     0.000      456   Kernel#class
  0.65      0.026     0.000     0.000     0.026        2   Global#[No method]
  0.54      0.002     0.000     0.000     0.001        4   Range#each
  0.52      0.000     0.000     0.000     0.000      172   Integer#to_s
  0.42      0.000     0.000     0.000     0.000       56   CompSci::KeyNode#initialize
  0.34      0.003     0.000     0.000     0.003      253  *CompSci::KeyNode#insert
  0.30      0.019     0.000     0.000     0.019        2   CompSci::Node#display
  0.25      0.000     0.000     0.000     0.000       56   CompSci::Node#initialize
  0.22      0.001     0.000     0.000     0.001      161  *CompSci::KeyNode#search2
  0.18      0.009     0.000     0.000     0.009       18   <Class::CompSci::Node>#display_line
  0.17      0.000     0.000     0.000     0.000        2   Kernel#p
  0.16      0.000     0.000     0.000     0.000       68   IO#write
  0.15      0.000     0.000     0.000     0.000      112   Array#shift
  0.15      0.001     0.000     0.000     0.001      161  *CompSci::KeyNode#search
  0.14      0.000     0.000     0.000     0.000        6   IO#set_encoding
  0.11      0.000     0.000     0.000     0.000       36   IO#puts
  0.10      0.000     0.000     0.000     0.000        2   Array#inspect
  0.10      0.000     0.000     0.000     0.000       54   Array#[]=
  0.10      0.007     0.000     0.000     0.007       16   Enumerable#reduce
  0.09      0.000     0.000     0.000     0.000       56   Kernel#rand
  0.09      0.000     0.000     0.000     0.000       36   Kernel#puts
  0.07      0.003     0.000     0.000     0.003        4  *Kernel#require
  0.06      0.000     0.000     0.000     0.000       56   Array#empty?
  0.06      0.000     0.000     0.000     0.000        2   Module#attr_accessor
  0.06      0.000     0.000     0.000     0.000       26   Module#method_added
  0.05      0.000     0.000     0.000     0.000       16   Kernel#nil?
  0.05      0.000     0.000     0.000     0.000       16   Integer#**
  0.05      0.000     0.000     0.000     0.000       26   Symbol#inspect
  0.04      0.000     0.000     0.000     0.000       26   Symbol#to_s
  0.04      0.000     0.000     0.000     0.000        2   String#upto
  0.04      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_enter
  0.04      0.000     0.000     0.000     0.000       16   Array#<<
  0.04      0.000     0.000     0.000     0.000        2   Array#shuffle
  0.04      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.03      0.000     0.000     0.000     0.000        3   Enumerable#to_a
  0.02      0.000     0.000     0.000     0.000       16   Integer#>
  0.02      0.000     0.000     0.000     0.000        2   <Module::Gem>#find_unresolved_default_spec
  0.02      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_exit
  0.02      0.000     0.000     0.000     0.000        6   <Class::Thread>#current
  0.02      0.000     0.000     0.000     0.000        2   <Module::Gem>#suffixes
  0.01      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.01      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_check_owner
  0.01      0.000     0.000     0.000     0.000        2   Thread::Mutex#unlock
  0.01      0.000     0.000     0.000     0.000        1   Module#append_features
  0.01      0.000     0.000     0.000     0.000        2   <Class::Gem::Specification>#unresolved_deps
  0.01      0.000     0.000     0.000     0.000        5   Class#inherited
  0.01      0.000     0.000     0.000     0.000        2   Kernel#respond_to?
  0.01      0.000     0.000     0.000     0.000        2   Thread::Mutex#lock
  0.00      0.000     0.000     0.000     0.000        3   BasicObject#singleton_method_added
  0.00      0.000     0.000     0.000     0.000        1   Module#included
  0.00      0.000     0.000     0.000     0.000        2   String#<=>

* indicates recursively called methods
RUBYLIB=lib ruby-prof  examples/ternary_search_tree.rb -- 

#
# Insert 50 nodes into a ternary search tree (random keys)
#

5:20
13:17
13:18
27:32
40:14
38:13
11:22
21:43
13:10
36:36
20:23
0:11
41:44
36:43
15:11
40:28
1:43
29:31
40:17
37:16
10:39
36:35
22:25
48:47
9:29
48:21
1:11
16:49
47:14
1:6
40:2
45:26
27:41
24:10
44:17
29:0
9:44
42:28
9:11
31:26
23:8
32:43
23:8
15:41
21:38
32:22
0:9
20:18
2:46
12:22
                                      31:49                                     
           5:20                      31:26                     40:14          
  0:11      _     13:17     _       _       _     38:13   40:28   41:44 
_ 0:9 1:43 _ _ _ 11:22 13:18 27:32 _ _ _ _ _ _ _ _ _ 36:36 _ _ _ 40:17 _ _ _ 48:47 
_ _ _ _ _ _ _ 1:11 2:46 _ _ _ _ _ _ _ _ _ 10:39 _ 12:22 _ 13:10 _ 21:43 27:41 29:31 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 32:43 36:43 37:16 _ _ _ _ _ _ _ _ _ _ 40:2 _ _ _ _ _ _ _ _ _ _ 47:14 48:21 _ 




nodes.size = 6561; abort render

#
# Search for 50 keys in order
#

search 0: 11 9
search 1: 43 11 6
search 2: 46
search 3: 
search 4: 
search 5: 20
search 6: 
search 7: 
search 8: 
search 9: 29 44 11
search 10: 39
search 11: 22
search 12: 22
search 13: 17 18 10
search 14: 
search 15: 11 41
search 16: 49
search 17: 
search 18: 
search 19: 
search 20: 23 18
search 21: 43 38
search 22: 25
search 23: 8 8
search 24: 10
search 25: 
search 26: 
search 27: 32 41
search 28: 
search 29: 31 0
search 30: 
search 31: 49 26
search 32: 43 22
search 33: 
search 34: 
search 35: 
search 36: 36 43 35
search 37: 16
search 38: 13
search 39: 
search 40: 14 28 17 2
search 41: 44
search 42: 28
search 43: 
search 44: 17
search 45: 26
search 46: 
search 47: 14
search 48: 47 21
search 49: 
Measure Mode: wall_time
Thread ID: 47453687725060
Fiber ID: 47453687662720
Total: 0.103179
Sort by: self_time

 %self      total      self      wait     child     calls  name
 29.50      0.059     0.030     0.000     0.028       59   Array#map
 20.01      0.021     0.021     0.000     0.000     3279   Array#+
  6.39      0.007     0.007     0.000     0.000     9841   String#ljust
  5.85      0.006     0.006     0.000     0.000     9841   String#rjust
  4.98      0.005     0.005     0.000     0.000    19682   String#size
  4.90      0.005     0.005     0.000     0.000    20128   Integer#+
  3.77      0.004     0.004     0.000     0.000     3330   Array#initialize
  3.60      0.032     0.004     0.000     0.028        9   Array#each
  2.74      0.003     0.003     0.000     0.000     9850   Array#max
  2.47      0.007     0.003     0.000     0.004     3381  *Class#new
  2.43      0.003     0.003     0.000     0.000     9850   Integer#/
  1.56      0.003     0.002     0.000     0.001        8   Array#any?
  1.35      0.002     0.001     0.000     0.000      161   Array#join
  1.33      0.001     0.001     0.000     0.000     4323   Array#length
  1.04      0.002     0.001     0.000     0.001      446   <Class::CompSci::KeyNode>#key_cmp_idx
  0.71      0.001     0.001     0.000     0.000     2700   NilClass#nil?
  0.58      0.001     0.001     0.000     0.000     2708   BasicObject#!
  0.55      0.003     0.001     0.000     0.002      446   CompSci::KeyNode#cidx
  0.43      0.000     0.000     0.000     0.000     1687   Integer#==
  0.35      0.000     0.000     0.000     0.000      805   Array#[]
  0.19      0.001     0.000     0.000     0.000      101   CompSci::KeyNode#to_s
  0.18      0.001     0.000     0.000     0.000      103   IO#puts
  0.17      0.000     0.000     0.000     0.000      204   IO#write
  0.16      0.006     0.000     0.000     0.006        2   Integer#times
  0.14      0.000     0.000     0.000     0.000      505   Kernel#class
  0.13      0.000     0.000     0.000     0.000      446   Integer#<
  0.13      0.000     0.000     0.000     0.000      306   Integer#to_s
  0.12      0.000     0.000     0.000     0.000      446   Integer#<=>
  0.10      0.000     0.000     0.000     0.000       51   CompSci::KeyNode#initialize
  0.09      0.003     0.000     0.000     0.003      265  *CompSci::KeyNode#search
  0.09      0.002     0.000     0.000     0.002      211  *CompSci::KeyNode#insert
  0.08      0.003     0.000     0.000     0.003      265  *CompSci::KeyNode#search3
  0.08      0.000     0.000     0.000     0.000       51   CompSci::Node#initialize
  0.07      0.001     0.000     0.000     0.001      103   Kernel#puts
  0.06      0.094     0.000     0.000     0.094        1   CompSci::Node#display
  0.05      0.000     0.000     0.000     0.000      102   Kernel#rand
  0.05      0.103     0.000     0.000     0.103        2   Global#[No method]
  0.03      0.000     0.000     0.000     0.000        6   IO#set_encoding
  0.03      0.000     0.000     0.000     0.000       50   Array#[]=
  0.03      0.000     0.000     0.000     0.000       30   Array#<<
  0.03      0.060     0.000     0.000     0.060        9   <Class::CompSci::Node>#display_line
  0.01      0.000     0.000     0.000     0.000        2   Module#attr_accessor
  0.01      0.002     0.000     0.000     0.002        4  *Kernel#require
  0.01      0.032     0.000     0.000     0.032        7   Enumerable#reduce
  0.01      0.000     0.000     0.000     0.000        8   Integer#>
  0.01      0.000     0.000     0.000     0.000       26   Module#method_added
  0.01      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.01      0.000     0.000     0.000     0.000        8   Integer#**
  0.01      0.000     0.000     0.000     0.000        2   String#upto
  0.01      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_enter
  0.01      0.000     0.000     0.000     0.000        8   Kernel#nil?
  0.01      0.000     0.000     0.000     0.000        6   <Class::Thread>#current
  0.00      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_exit
  0.00      0.000     0.000     0.000     0.000        2   <Module::Gem>#find_unresolved_default_spec
  0.00      0.000     0.000     0.000     0.000        2   Range#each
  0.00      0.000     0.000     0.000     0.000        1   Module#append_features
  0.00      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.00      0.000     0.000     0.000     0.000        2   Enumerable#to_a
  0.00      0.000     0.000     0.000     0.000        2   <Class::Gem::Specification>#unresolved_deps
  0.00      0.000     0.000     0.000     0.000        2   <Module::Gem>#suffixes
  0.00      0.000     0.000     0.000     0.000        2   String#<=>
  0.00      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_check_owner
  0.00      0.000     0.000     0.000     0.000        2   Kernel#respond_to?
  0.00      0.000     0.000     0.000     0.000        2   Thread::Mutex#lock
  0.00      0.000     0.000     0.000     0.000        5   Class#inherited
  0.00      0.000     0.000     0.000     0.000        2   Thread::Mutex#unlock
  0.00      0.000     0.000     0.000     0.000        1   Integer#to_i
  0.00      0.000     0.000     0.000     0.000        1   Array#shift
  0.00      0.000     0.000     0.000     0.000        1   Module#included
  0.00      0.000     0.000     0.000     0.000        3   BasicObject#singleton_method_added

* indicates recursively called methods
