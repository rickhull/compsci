RUBYLIB=lib ruby-prof --exclude-common-cycles examples/complete_tree.rb -- 
/proc/loadavg 0.70 0.31 0.14 1/95 7276

#
# Print CompSci::CompleteBinaryTree filled with static vals
#

initial vals: [9, 11, 54, 70, 3, 71, 10, 55, 95, 73, 46, 64, 69, 14, 87, 25, 45, 97, 83, 58, 52, 83, 63, 20, 18, 95, 29, 15, 30, 30]
#<CompSci::CompleteBinaryTree:0x0055837d8865c0 @array=[9, 11, 54, 70, 3, 71, 10, 55, 95, 73, 46, 64, 69, 14, 87, 25, 45, 97, 83, 58, 52, 83, 63, 20, 18, 95, 29, 15, 30, 30], @child_slots=2>

                                        9                                       
                   11                                      54                   
         70                   3                  71                  10         
    55        95        73        46        64        69        14        87    
  25   45   97   83   58   52   83   63   20   18   95   29   15   30   30 


#
# Push random vals and print again
#

new vals: [22, 16, 1, 61, 85, 54, 58, 86, 83, 29, 15, 1, 80, 50, 42, 57, 5, 39, 33, 93, 51, 8, 28, 65, 63, 22, 59, 34, 95, 79]

                                        9                                       
                   11                                      54                   
         70                   3                  71                  10         
    55        95        73        46        64        69        14        87    
  25   45   97   83   58   52   83   63   20   18   95   29   15   30   30   22 
16 1 61 85 54 58 86 83 29 15 1 80 50 42 57 5 39 33 93 51 8 28 65 63 22 59 34 95 79 



#
# Print CompSci::CompleteTernaryTree filled with static vals
#

initial vals: [9, 11, 54, 70, 3, 71, 10, 55, 95, 73, 46, 64, 69, 14, 87, 25, 45, 97, 83, 58, 52, 83, 63, 20, 18, 95, 29, 15, 30, 30]
#<CompSci::CompleteTernaryTree:0x0055837d850308 @array=[9, 11, 54, 70, 3, 71, 10, 55, 95, 73, 46, 64, 69, 14, 87, 25, 45, 97, 83, 58, 52, 83, 63, 20, 18, 95, 29, 15, 30, 30], @child_slots=3>

                                        9                                       
            11                        54                        70            
    3      71      10      55      95      73      46      64      69   
14 87 25 45 97 83 58 52 83 63 20 18 95 29 15 30 30 


#
# Push random vals and print again
#

new vals: [54, 30, 33, 29, 64, 77, 33, 85, 78, 10, 25, 17, 42, 80, 2, 49, 14, 83, 74, 60, 17, 65, 60, 24, 14, 82, 63, 97, 11, 74]

                                        9                                       
            11                        54                        70            
    3      71      10      55      95      73      46      64      69   
14 87 25 45 97 83 58 52 83 63 20 18 95 29 15 30 30 54 30 33 29 64 77 33 85 78 10 
25 17 42 80 2 49 14 83 74 60 17 65 60 24 14 82 63 97 11 74 



#
# Print CompSci::CompleteQuaternaryTree filled with static vals
#

initial vals: [9, 11, 54, 70, 3, 71, 10, 55, 95, 73, 46, 64, 69, 14, 87, 25, 45, 97, 83, 58, 52, 83, 63, 20, 18, 95, 29, 15, 30, 30]
#<CompSci::CompleteQuaternaryTree:0x0055837d7eb2f0 @array=[9, 11, 54, 70, 3, 71, 10, 55, 95, 73, 46, 64, 69, 14, 87, 25, 45, 97, 83, 58, 52, 83, 63, 20, 18, 95, 29, 15, 30, 30], @child_slots=4>
RUBYLIB=lib ruby-prof --exclude-common-cycles examples/heap.rb -- 

#
# display the results of ternary Heap push and pop
#

push: 54 33 44 47 22 3 20 83 74 85 4 88 33 79 96 90 30 57 14 22 6 37 92 57 46 85 12 12 82 22
array: [96, 90, 92, 85, 88, 57, 37, 83, 85, 82, 4, 47, 33, 22, 33, 79, 3, 30, 14, 20, 6, 22, 44, 57, 46, 54, 12, 12, 74, 22]
heap: true
                                       96                                       
            90                        92                        85            
   88      57      37      83      85      82       4      47      33   
22 33 79 3 30 14 20 6 22 44 57 46 54 12 12 74 22 


pop: 96
array: [92, 90, 85, 85, 88, 57, 37, 83, 54, 82, 4, 47, 33, 22, 33, 79, 3, 30, 14, 20, 6, 22, 44, 57, 46, 22, 12, 12, 74]
heap: true
                                       92                                       
            90                        85                        85            
   88      57      37      83      54      82       4      47      33   
22 33 79 3 30 14 20 6 22 44 57 46 22 12 12 74 


pop: 92 90 88 85 85 83 82 79 74
array: [57, 57, 54, 47, 33, 30, 37, 44, 6, 46, 4, 12, 33, 22, 22, 12, 3, 22, 14, 20]
heap: true
                                       57                                       
            57                        54                        47            
   33      30      37      44       6      46       4      12      33   
22 22 12 3 22 14 20 


push: 10 54 98 20 42 85 19 29 23 16 93 79 95 79 63 20 22 48 86 13 53 69 9 74 87 66 52 2 45 29
array: [98, 87, 93, 95, 74, 30, 54, 54, 57, 85, 79, 63, 86, 53, 69, 52, 29, 22, 14, 20, 10, 37, 44, 20, 42, 6, 19, 29, 23, 16, 46, 4, 47, 79, 12, 20, 22, 33, 48, 13, 22, 33, 9, 22, 57, 66, 12, 2, 45, 3]
heap: true
                                       98                                       
            87                        93                        95            
   74      30      54      54      57      85      79      63      86   
53 69 52 29 22 14 20 10 37 44 20 42 6 19 29 23 16 46 4 47 79 12 20 22 33 48 13 
22 33 9 22 57 66 12 2 45 3 


#
# display the results of binary Heap push and pop
#

push: 75 43 88 70 21 31 4 91 86 56 57 38 63 24 78 26 82 82 10 41 4 45 96 54 76 63 87 47 66 65
array: [96, 91, 87, 86, 88, 78, 75, 82, 82, 41, 57, 63, 76, 66, 65, 26, 43, 70, 10, 21, 4, 45, 56, 31, 54, 38, 63, 4, 47, 24]
heap: true
                                       96                                       
                   91                                      87                   
         86                  88                  78                  75         
    82        82        41        57        63        76        66        65    
  26   43   70   10   21   4    45   56   31   54   38   63   4    47   24 


pop: 96
array: [91, 88, 87, 86, 57, 78, 75, 82, 82, 41, 56, 63, 76, 66, 65, 26, 43, 70, 10, 21, 4, 45, 24, 31, 54, 38, 63, 4, 47]
heap: true
                                       91                                       
                   88                                      87                   
         86                  57                  78                  75         
    82        82        41        56        63        76        66        65    
  26   43   70   10   21   4    45   24   31   54   38   63   4    47 


pop: 91 88 87 86 82 82 78 76 75
array: [70, 57, 66, 54, 56, 63, 65, 43, 47, 41, 4, 63, 31, 24, 45, 26, 4, 38, 10, 21]
heap: true
                                       70                                       
                   57                                      66                   
         54                  56                  63                  65         
    43        47        41         4        63        31        24        45    
  26   4    38   10   21 


push: 98 67 62 97 19 60 9 67 11 59 26 71 80 20 36 55 37 77 86 78 96 65 75 43 26 27 4 35 35 17
array: [98, 96, 97, 80, 86, 66, 67, 70, 77, 78, 62, 63, 60, 65, 59, 54, 36, 47, 71, 67, 75, 43, 57, 63, 19, 31, 9, 24, 11, 45, 26, 26, 43, 4, 20, 38, 37, 10, 55, 21, 56, 41, 65, 4, 26, 27, 4, 35, 35, 17]
heap: true
                                       98                                       
                   96                                      97                   
         80                  86                  66                  67         
    70        77        78        62        63        60        65        59    
  54   36   47   71   67   75   43   57   63   19   31   9    24   11   45   26 
26 43 4 20 38 37 10 55 21 56 41 65 4 26 27 4 35 35 17 

Measure Mode: wall_time
Thread ID: 47171234053140
Fiber ID: 47171233988780
Total: 0.016547
Sort by: self_time

 %self      total      self      wait     child     calls  name
  7.92      0.003     0.001     0.000     0.002      258   Kernel#loop
  7.85      0.006     0.001     0.000     0.005        8   CompSci::CompleteTree#display
  5.77      0.002     0.001     0.000     0.001      712   CompSci::Heap#heapish?
  5.68      0.002     0.001     0.000     0.001     1246   <Class::CompSci::CompleteTree>#parent_idx
  4.32      0.005     0.001     0.000     0.005      345  *Array#initialize
  4.24      0.001     0.001     0.000     0.000     2960   Integer#+
  3.08      0.001     0.001     0.000     0.000     1858   Integer#<
  2.95      0.000     0.000     0.000     0.000     1762   Integer#/
  2.87      0.001     0.000     0.000     0.000      970   BasicObject#!=
  2.83      0.000     0.000     0.000     0.000     1792   Array#[]
  2.73      0.002     0.000     0.000     0.002      243  *CompSci::Heap#sift_up
  2.42      0.000     0.000     0.000     0.000     1556   Integer#*
  1.97      0.000     0.000     0.000     0.000     1366   Integer#-
  1.80      0.001     0.000     0.000     0.001       81   CompSci::Heap#heapiest
  1.77      0.000     0.000     0.000     0.000      654   Integer#to_s
  1.62      0.000     0.000     0.000     0.000      258   String#ljust
  1.55      0.000     0.000     0.000     0.000     1045   Array#length
  1.45      0.000     0.000     0.000     0.000      288   String#+
  1.34      0.000     0.000     0.000     0.000      951   Integer#==
  1.31      0.002     0.000     0.000     0.002      339   <Class::CompSci::CompleteTree>#children_idx
  1.30      0.003     0.000     0.000     0.003      258   <Class::CompSci::CompleteTree>#gen
  1.24      0.000     0.000     0.000     0.000      829   Kernel#class
  1.18      0.000     0.000     0.000     0.000      712   Integer#<=>
  1.07      0.006     0.000     0.000     0.006      347  *Class#new
  0.96      0.002     0.000     0.000     0.002      120   CompSci::Heap#push
  0.79      0.000     0.000     0.000     0.000      258   String#rjust
  0.74      0.000     0.000     0.000     0.000      516   String#size
  0.67      0.000     0.000     0.000     0.000      368   Array#[]=
  0.60      0.002     0.000     0.000     0.002      120   Kernel#tap
  0.58      0.000     0.000     0.000     0.000      313   BasicObject#!
  0.57      0.000     0.000     0.000     0.000        6   Array#join
  0.57      0.000     0.000     0.000     0.000        8   Array#inspect
  0.54      0.017     0.000     0.000     0.016        2   Global#[No method]
  0.51      0.002     0.000     0.000     0.002       81  *CompSci::Heap#sift_down
  0.49      0.000     0.000     0.000     0.000      258   Integer#**
  0.45      0.000     0.000     0.000     0.000      258   Array#max
  0.44      0.004     0.000     0.000     0.004      258  *CompSci::Heap#heap?
  0.40      0.000     0.000     0.000     0.000       80   IO#write
  0.40      0.000     0.000     0.000     0.000      250   Array#<<
  0.35      0.000     0.000     0.000     0.000      120   Kernel#rand
  0.34      0.000     0.000     0.000     0.000      243   Integer#<=
  0.26      0.000     0.000     0.000     0.000      120   Array#push
  0.25      0.006     0.000     0.000     0.006       48   IO#puts
  0.24      0.002     0.000     0.000     0.002       20   CompSci::Heap#pop
  0.20      0.006     0.000     0.000     0.006       48   Kernel#puts
  0.16      0.000     0.000     0.000     0.000        6   IO#set_encoding
  0.15      0.000     0.000     0.000     0.000        8   String#%
  0.13      0.000     0.000     0.000     0.000       81   Array#first
  0.12      0.000     0.000     0.000     0.000        1   Module#attr_reader
  0.10      0.000     0.000     0.000     0.000        2   <Module::Gem>#find_unresolved_default_spec
  0.07      0.000     0.000     0.000     0.000       20   Array#shift
  0.07      0.000     0.000     0.000     0.000       81   Integer#>=
  0.05      0.000     0.000     0.000     0.000       22   Module#method_added
  0.05      0.000     0.000     0.000     0.000       20   Array#unshift
  0.05      0.000     0.000     0.000     0.000        8   TrueClass#to_s
  0.04      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_enter
  0.04      0.000     0.000     0.000     0.000        2   CompSci::Heap#initialize
  0.04      0.001     0.000     0.000     0.001        4  *Kernel#require
  0.04      0.000     0.000     0.000     0.000       19   BasicObject#==
  0.03      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_exit
  0.03      0.000     0.000     0.000     0.000       20   Array#pop
  0.02      0.000     0.000     0.000     0.000        5   Class#inherited
  0.02      0.000     0.000     0.000     0.000        6   <Class::Thread>#current
  0.02      0.000     0.000     0.000     0.000        2   CompSci::CompleteTree#initialize
  0.02      0.000     0.000     0.000     0.000        2   <Module::Gem>#suffixes
  0.02      0.000     0.000     0.000     0.000        2   Kernel#respond_to?
  0.01      0.000     0.000     0.000     0.000        2   <Class::Gem::Specification>#unresolved_deps
  0.01      0.000     0.000     0.000     0.000        2   Thread::Mutex#unlock
  0.01      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_check_owner
  0.01      0.000     0.000     0.000     0.000        1   Module#append_features
  0.01      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.01      0.000     0.000     0.000     0.000        2   Thread::Mutex#lock
  0.01      0.000     0.000     0.000     0.000        3   BasicObject#singleton_method_added
  0.01      0.000     0.000     0.000     0.000        1   Module#included
  0.01      0.000     0.000     0.000     0.000        1   Module#alias_method

* indicates recursively called methods
RUBYLIB=lib ruby-prof --exclude-common-cycles examples/heap_push.rb -- 

#
# 3 seconds worth of Heap pushes
#

10000th push: 0.00007968 s
20000th push: 0.00004350 s
30000th push: 0.00003683 s
40000th push: 0.00002497 s
50000th push: 0.00003990 s
60000th push: 0.00002711 s
70000th push: 0.00003892 s
80000th push: 0.00002983 s
90000th push: 0.00010331 s
pushed 98053 items in 3.0 s

still a heap with 98053 items? YES - 1.482 sec

Measure Mode: wall_time
Thread ID: 47334003137560
Fiber ID: 47334003071720
Total: 4.483746
Sort by: self_time

 %self      total      self      wait     child     calls  name
 10.19      0.987     0.457     0.000     0.530   320642   CompSci::Heap#heapish?
  6.74      1.932     0.302     0.000     1.630   222594  *CompSci::Heap#sift_up
  5.43      3.000     0.243     0.000     2.757        1   Kernel#loop
  5.32      0.238     0.238     0.000     0.000   988419   Array#[]
  4.47      0.342     0.201     0.000     0.141    98053   Array#initialize
  4.11      0.296     0.184     0.000     0.112   222590   <Class::CompSci::CompleteTree>#parent_idx
  3.34      0.223     0.150     0.000     0.074   320642   BasicObject#!=
  3.32      2.164     0.149     0.000     2.016    98053   CompSci::Heap#push
  3.13      0.249     0.140     0.000     0.109    98053   Object#number
  2.99      0.134     0.134     0.000     0.000   516748   Integer#*
  2.79      0.125     0.125     0.000     0.000   516757   Integer#==
  2.54      0.114     0.114     0.000     0.000   490265   Integer#+
  1.98      0.227     0.089     0.000     0.138    98064   <Module::CompSci::Timer>#since
  1.94      0.087     0.087     0.000     0.000   320644   Integer#-
  1.93      0.087     0.087     0.000     0.000   320643   Kernel#class
  1.86      0.084     0.084     0.000     0.000   294168   Integer#%
  1.70      0.076     0.076     0.000     0.000   320642   Integer#<=>
  1.65      0.074     0.074     0.000     0.000   294160   Array#length
  1.49      0.109     0.067     0.000     0.042    98076   <Module::CompSci::Timer>#now
  1.42      0.064     0.064     0.000     0.000   249082   Array#[]=
  1.39      0.460     0.062     0.000     0.398    98053   <Class::CompSci::CompleteTree>#children_idx
  1.37      0.061     0.061     0.000     0.000   222594   Integer#<=
  1.25      0.398     0.056     0.000     0.342    98054   Class#new
  1.24      0.056     0.056     0.000     0.000   222590   BasicObject#!
  1.18      0.053     0.053     0.000     0.000   222590   Integer#/
  1.16      0.052     0.052     0.000     0.000   196106   Integer#<
  0.95      0.042     0.042     0.000     0.000    98076   <Module::Process>#clock_gettime
  0.83      0.037     0.037     0.000     0.000    98053   Float#>
  0.68      0.030     0.030     0.000     0.000    98151   Array#push
  0.64      0.029     0.029     0.000     0.000    98064   Float#-
  0.63      0.028     0.028     0.000     0.000    98052   Array#<<
  0.01      0.000     0.000     0.000     0.000       98   Kernel#rand
  0.00      0.000     0.000     0.000     0.000       11   String#%
  0.00      0.000     0.000     0.000     0.000       26   IO#write
  0.00      0.000     0.000     0.000     0.000       99   Array#shift
  0.00      4.484     0.000     0.000     4.484        2   Global#[No method]
  0.00      0.000     0.000     0.000     0.000        1   Enumerable#to_a
  0.00      1.482     0.000     0.000     1.482       10   <Module::CompSci::Timer>#elapsed
  0.00      0.000     0.000     0.000     0.000        8   IO#set_encoding
  0.00      0.000     0.000     0.000     0.000        1   Array#shuffle
  0.00      0.000     0.000     0.000     0.000       14   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       14   IO#puts
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#find_unresolved_default_spec
  0.00      0.000     0.000     0.000     0.000        7   BasicObject#singleton_method_added
  0.00      1.482     0.000     0.000     1.482    98053  *CompSci::Heap#heap?
  0.00      0.001     0.000     0.000     0.001        6  *Kernel#require
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_enter
  0.00      0.000     0.000     0.000     0.000        1   Kernel#print
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_exit
  0.00      0.000     0.000     0.000     0.000        1   Module#attr_reader
  0.00      0.000     0.000     0.000     0.000       23   Module#method_added
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#suffixes
  0.00      0.000     0.000     0.000     0.000        9   <Class::Thread>#current
  0.00      0.000     0.000     0.000     0.000        1   CompSci::CompleteTree#size
  0.00      0.000     0.000     0.000     0.000        1   CompSci::Heap#initialize
  0.00      0.000     0.000     0.000     0.000        5   Class#inherited
  0.00      0.000     0.000     0.000     0.000        3   <Class::Gem::Specification>#unresolved_deps
  0.00      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_check_owner
  0.00      0.000     0.000     0.000     0.000        3   Kernel#respond_to?
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#lock
  0.00      0.000     0.000     0.000     0.000        2   Integer#to_s
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#unlock
  0.00      0.000     0.000     0.000     0.000        1   CompSci::CompleteTree#initialize
  0.00      0.000     0.000     0.000     0.000        1   String#to_i
  0.00      0.000     0.000     0.000     0.000        1   Module#append_features
  0.00      0.000     0.000     0.000     0.000        1   Module#alias_method
  0.00      0.000     0.000     0.000     0.000        1   Module#included

* indicates recursively called methods
RUBYLIB=lib ruby-prof --exclude-common-cycles examples/tree.rb -- 

#
# Fill up and display some trees
#

vals: [78, 27, 81, 26, 11, 91, 23, 33, 7, 87, 47, 97, 55, 81, 51, 84, 62, 6, 11, 68, 39, 25, 6, 26, 17, 10, 95, 6, 44, 83]

#
# Children: 2
#

#<CompSci::Node:0x2b190c56acc0i @value=78 @children=[27, 81]>

                                       78                                       
                   27                                      81                   
         26                  11                  91                  23         
    33         7        87        47        97        55        81        51    
  84   62   6    11   68   39   25   6    26   17   10   95   6    44   83      


#
# Children: 3
#

#<CompSci::Node:0x2b190c552e68i @value=78 @children=[27, 81, 26]>

                                       78                                       
            27                        81                        26            
   11      91      23      33       7      87      47      97      55   
81 51 84 62 6 11 68 39 25 6 26 17 10 95 6 44 83                     


#
# Children: 4
#

#<CompSci::Node:0x2b190c51b9cci @value=78 @children=[27, 81, 26, 11]>

                                       78                                       
         27                  81                  26                  11         
  91   23   33   7    87   47   97   55   81   51   84   62   6    11   68   39 
25 6 26 17 10 95 6 44 83                                                        

Measure Mode: wall_time
Thread ID: 47386579827720
Fiber ID: 47386579764420
Total: 0.005330
Sort by: self_time

 %self      total      self      wait     child     calls  name
  9.26      0.001     0.000     0.000     0.001       13   <Class::CompSci::Node>#display_line
  6.73      0.000     0.000     0.000     0.000      310   Array#initialize
  5.19      0.000     0.000     0.000     0.000       13   Array#any?
  4.07      0.003     0.000     0.000     0.002        3   CompSci::Node#display
  3.34      0.000     0.000     0.000     0.000      156   CompSci::Node#initialize
  3.17      0.000     0.000     0.000     0.000      202   Array#+
  2.17      0.000     0.000     0.000     0.000      513   Array#[]
  2.03      0.000     0.000     0.000     0.000      312   Integer#+
  1.99      0.000     0.000     0.000     0.000      153   CompSci::Node#[]=
  1.96      0.000     0.000     0.000     0.000      168   CompSci::Node#to_s
  1.77      0.000     0.000     0.000     0.000      369   NilClass#nil?
  1.71      0.001     0.000     0.000     0.000      313  *Class#new
  1.71      0.000     0.000     0.000     0.000      156   String#ljust
  1.67      0.000     0.000     0.000     0.000      379   BasicObject#!
  1.36      0.000     0.000     0.000     0.000      312   String#size
  1.24      0.005     0.000     0.000     0.004        2   Global#[No method]
  1.18      0.000     0.000     0.000     0.000        3   Kernel#p
  1.15      0.000     0.000     0.000     0.000      169   Array#max
  1.08      0.000     0.000     0.000     0.000       66   NilClass#to_s
  0.89      0.000     0.000     0.000     0.000      176   Array#length
  0.88      0.000     0.000     0.000     0.000       19   Array#join
  0.85      0.000     0.000     0.000     0.000      169   Integer#/
  0.83      0.000     0.000     0.000     0.000      156   String#rjust
  0.83      0.000     0.000     0.000     0.000      135   Integer#to_s
  0.77      0.000     0.000     0.000     0.000      156   Array#shift
  0.72      0.000     0.000     0.000     0.000      153   Array#[]=
  0.47      0.000     0.000     0.000     0.000        4   IO#set_encoding
  0.35      0.000     0.000     0.000     0.000        3   String#%
  0.30      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.29      0.000     0.000     0.000     0.000        2   Module#attr_accessor
  0.28      0.000     0.000     0.000     0.000       30   Kernel#rand
  0.25      0.000     0.000     0.000     0.000        1   Array#inspect
  0.25      0.000     0.000     0.000     0.000       14   IO#puts
  0.25      0.000     0.000     0.000     0.000       14   Kernel#puts
  0.24      0.000     0.000     0.000     0.000       18   IO#write
  0.17      0.000     0.000     0.000     0.000        3   CompSci::Node#inspect
  0.15      0.000     0.000     0.000     0.000        1   <Module::Gem>#find_unresolved_default_spec
  0.15      0.001     0.000     0.000     0.001        2  *Kernel#require
  0.12      0.000     0.000     0.000     0.000        3   Module#to_s
  0.11      0.000     0.000     0.000     0.000        1   MonitorMixin#mon_enter
  0.11      0.000     0.000     0.000     0.000       10   Array#<<
  0.09      0.000     0.000     0.000     0.000       10   Integer#**
  0.09      0.000     0.000     0.000     0.000       26   Module#method_added
  0.08      0.000     0.000     0.000     0.000       10   Integer#>
  0.08      0.000     0.000     0.000     0.000       10   Kernel#nil?
  0.08      0.000     0.000     0.000     0.000       16   Kernel#class
  0.08      0.000     0.000     0.000     0.000       13   Array#empty?
  0.08      0.000     0.000     0.000     0.000        3   Kernel#initialize_dup
  0.07      0.000     0.000     0.000     0.000        3   Kernel#dup
  0.07      0.000     0.000     0.000     0.000        5   Class#inherited
  0.05      0.000     0.000     0.000     0.000        1   MonitorMixin#mon_check_owner
  0.04      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.04      0.000     0.000     0.000     0.000        1   MonitorMixin#mon_exit
  0.04      0.000     0.000     0.000     0.000        1   <Module::Gem>#suffixes
  0.04      0.000     0.000     0.000     0.000        3   Array#initialize_copy
  0.04      0.000     0.000     0.000     0.000        1   Module#append_features
  0.04      0.000     0.000     0.000     0.000        1   <Class::Gem::Specification>#unresolved_deps
  0.02      0.000     0.000     0.000     0.000        1   Thread::Mutex#unlock
  0.02      0.000     0.000     0.000     0.000        1   Kernel#respond_to?
  0.02      0.000     0.000     0.000     0.000        3   Kernel#object_id
  0.02      0.000     0.000     0.000     0.000        1   Module#included
  0.02      0.000     0.000     0.000     0.000        2   BasicObject#singleton_method_added
  0.02      0.000     0.000     0.000     0.000        1   Thread::Mutex#lock
  0.02      0.000     0.000     0.000     0.000        3   <Class::Thread>#current

* indicates recursively called methods
RUBYLIB=lib ruby-prof --exclude-common-cycles examples/flex_node.rb -- 

#
# Try out Binary, Ternary, and Quaternary FlexNodes
# Push the same vals to each
#

[47, 57, 6, 25, 83, 63, 45, 32, 23, 47, 19, 48, 5, 16, 88, 69, 0, 74, 5, 33, 85, 40, 33, 98, 22, 57, 77, 44, 53, 17]
#<CompSci::ChildFlexNode:0x2ade30050594i @value=47 @children=[57, 6]>
                                       47                                       
                   57                                       6                   
         25                  83                  63                  45         
    32        23        47        19        48         5        16        88    
  69   0    74   5    33   85   40   33   98   22   57   77   44   53   17   _  

df_search visited: 47 57 25 32 69 0 23 74 5 83 47 33 85 19 40 33 6 63 48 98 22 5 57 77 45 16 44 53 88 17


push: [11, 19, 61, 30, 32, 8, 77, 24, 52, 12, 1, 84, 84, 88, 74, 6, 40, 63, 67, 86, 7, 3, 97, 20, 6, 47, 39, 0, 60, 14]

                                       47                                       
                   57                                       6                   
         25                  83                  63                  45         
    32        23        47        19        48         5        16        88    
  69   0    74   5    33   85   40   33   98   22   57   77   44   53   17   11 
19 61 30 32 8 77 24 52 12 1 84 84 88 74 6 40 63 67 86 7 3 97 20 6 47 39 0 60 14 _ _ _ 


[47, 57, 6, 25, 83, 63, 45, 32, 23, 47, 19, 48, 5, 16, 88, 69, 0, 74, 5, 33, 85, 40, 33, 98, 22, 57, 77, 44, 53, 17]
#<CompSci::ChildFlexNode:0x2ade2ff60224i @value=47 @children=[57, 6, 25]>
                                       47                                       
            57                         6                        25            
   83      63      45      32      23      47      19      48       5   
16 88 69 0 74 5 33 85 40 33 98 22 57 77 44 53 17 _ _ _ _ _ _ _ _ _ _ 

df_search visited: 47 57 83 16 88 69 63 0 74 5 45 33 85 40 6 32 33 98 22 23 57 77 44 47 53 17 25 19 48 5


push: [13, 67, 58, 51, 40, 45, 94, 47, 32, 83, 11, 47, 94, 56, 59, 68, 46, 61, 24, 37, 90, 40, 58, 84, 97, 15, 86, 37, 25, 84]

                                       47                                       
            57                         6                        25            
   83      63      45      32      23      47      19      48       5   
16 88 69 0 74 5 33 85 40 33 98 22 57 77 44 53 17 13 67 58 51 40 45 94 47 32 83 
11 47 94 56 59 68 46 61 24 37 90 40 58 84 97 15 86 37 25 84 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


[47, 57, 6, 25, 83, 63, 45, 32, 23, 47, 19, 48, 5, 16, 88, 69, 0, 74, 5, 33, 85, 40, 33, 98, 22, 57, 77, 44, 53, 17]
#<CompSci::ChildFlexNode:0x2ade2ffd9d18i @value=47 @children=[57, 6, 25, 83]>
                                       47                                       
         57                   6                  25                  83         
  63   45   32   23   47   19   48   5    16   88   69   0    74   5    33   85 
40 33 98 22 57 77 44 53 17 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

df_search visited: 47 57 63 40 33 98 22 45 57 77 44 53 32 17 23 6 47 19 48 5 25 16 88 69 0 83 74 5 33 85


push: [33, 42, 72, 83, 59, 27, 23, 70, 31, 84, 73, 76, 3, 44, 32, 48, 39, 69, 31, 89, 2, 23, 97, 74, 47, 21, 20, 55, 20, 2]

                                       47                                       
         57                   6                  25                  83         
  63   45   32   23   47   19   48   5    16   88   69   0    74   5    33   85 
40 33 98 22 57 77 44 53 17 33 42 72 83 59 27 23 70 31 84 73 76 3 44 32 48 39 69 31 89 2 23 97 74 47 21 20 55 20 2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 



#
# 30 ChildFlexNode pushes and df_search
#

[80, 81, 37, 51, 30, 93, 90, 6, 0, 29, 37, 19, 88, 23, 22, 7, 28, 31, 11, 71, 77, 26, 47, 26, 72, 92, 24, 37, 45, 39]
#<CompSci::ChildFlexNode:0x2ade30099410i @value=80 @children=[81, 37]>
                                       80                                       
                   81                                      37                   
         51                  30                  93                  90         
     6         0        29        37        19        88        23        22    
  7    28   31   11   71   77   26   47   26   72   92   24   37   45   39   _  

visited 80
visited 81
visited 51
visited 6
visited 7
visited 28
visited 0
visited 31
visited 11
visited 30
visited 29
visited 71
visited 77
visited 37
visited 26
visited 47
visited 37
visited 93
visited 19
visited 26
visited 72
visited 88
visited 92
visited 24
visited 90
visited 23
visited 37
visited 45
visited 22
visited 39

push: [54, 46, 5, 59, 80, 14, 62, 39, 58, 67, 7, 2, 71, 15, 17, 3, 24, 55, 4, 14, 23, 50, 78, 71, 32, 60, 1, 10, 90, 66]
                                       80                                       
                   81                                      37                   
         51                  30                  93                  90         
     6         0        29        37        19        88        23        22    
  7    28   31   11   71   77   26   47   26   72   92   24   37   45   39   54 
46 5 59 80 14 62 39 58 67 7 2 71 15 17 3 24 55 4 14 23 50 78 71 32 60 1 10 90 66 _ _ _ 


#
# 3 seconds worth of Binary ChildFlexNode pushes
#

100th push: 0.00030837 s
200th push: 0.00049928 s
300th push: 0.00078412 s
400th push: 0.00099382 s
500th push: 0.00124271 s
600th push: 0.00178979 s
700th push: 0.00212612 s
800th push: 0.00239689 s
900th push: 0.00229514 s
1000th push: 0.00279362 s
-----------
    1k push: 1.3807 s (724 push / s)

1100th push: 0.00285181 s
1200th push: 0.00331606 s
1300th push: 0.00372726 s
1400th push: 0.00393716 s
pushed 1478 items in 3.0 s

Measure Mode: wall_time
Thread ID: 47133775707140
Fiber ID: 47133775642660
Total: 3.031455
Sort by: self_time

 %self      total      self      wait     child     calls  name
 38.32      2.976     1.162     0.000     1.814     1714   CompSci::FlexNode#bf_search
 17.19      0.807     0.521     0.000     0.286   549735   CompSci::FlexNode#open_parent?
 15.84      0.480     0.480     0.000     0.000   548532   Array#+
  7.87      0.239     0.239     0.000     0.000   549976   Array#shift
  4.89      0.148     0.148     0.000     0.000   549979   Array#empty?
  4.73      0.143     0.143     0.000     0.000   550316   Array#length
  4.72      0.143     0.143     0.000     0.000   549735   Integer#<
  4.65      0.141     0.141     0.000     0.000   550794   BasicObject#!
  0.18      3.002     0.006     0.000     2.996        1   Kernel#loop
  0.18      0.013     0.005     0.000     0.007     2236   Class#new
  0.12      0.006     0.004     0.000     0.002     1719   CompSci::ChildFlexNode#initialize
  0.11      0.006     0.003     0.000     0.003     1714   CompSci::ChildFlexNode#add_child
  0.10      2.979     0.003     0.000     2.976     1714   CompSci::FlexNode#open_parent
  0.09      0.020     0.003     0.000     0.017     1714   CompSci::FlexNode#new_child
  0.08      0.002     0.002     0.000     0.000     1719   CompSci::FlexNode#initialize
  0.08      0.006     0.002     0.000     0.004     1494   <Module::CompSci::Timer>#since
  0.07      3.001     0.002     0.000     2.999     1714   CompSci::FlexNode#push
  0.07      0.002     0.002     0.000     0.000     1659   Kernel#rand
  0.05      0.004     0.002     0.000     0.002       39   <Class::CompSci::Node>#display_line
  0.05      0.001     0.001     0.000     0.000     1511   <Module::Process>#clock_gettime
  0.05      0.003     0.001     0.000     0.001     1511   <Module::CompSci::Timer>#now
  0.04      0.001     0.001     0.000     0.000     1478   Float#>
  0.04      0.001     0.001     0.000     0.000     1835   Array#<<
  0.04      0.002     0.001     0.000     0.001     1714   BasicObject#!=
  0.03      0.001     0.001     0.000     0.000     1494   Float#-
  0.03      0.001     0.001     0.000     0.000     2516   Integer#+
  0.03      0.001     0.001     0.000     0.000      517   Array#initialize
  0.03      0.001     0.001     0.000     0.000     1757   Kernel#class
  0.02      0.001     0.001     0.000     0.001       39   Array#any?
  0.02      0.008     0.001     0.000     0.008        8   CompSci::Node#display
  0.02      0.001     0.001     0.000     0.000     1492   Integer#%
  0.02      0.001     0.001     0.000     0.000     1492   Integer#==
  0.02      0.001     0.001     0.000     0.000     1714   BasicObject#==
  0.01      0.000     0.000     0.000     0.000      519   String#rjust
  0.01      0.000     0.000     0.000     0.000      736   Integer#to_s
  0.01      0.000     0.000     0.000     0.000       54   Array#join
  0.01      0.001     0.000     0.000     0.000      495   CompSci::Node#to_s
  0.01      0.000     0.000     0.000     0.000       23   String#%
  0.01      0.000     0.000     0.000     0.000      968   Array#[]
  0.01      0.000     0.000     0.000     0.000        8   Kernel#p
  0.01      3.031     0.000     0.000     3.031        2   Global#[No method]
  0.01      0.000     0.000     0.000     0.000      519   String#ljust
  0.01      0.000     0.000     0.000     0.000     1038   String#size
  0.01      0.000     0.000     0.000     0.000     1028   NilClass#nil?
  0.01      0.000     0.000     0.000     0.000      558   Array#max
  0.01      0.000     0.000     0.000     0.000      150   IO#write
  0.00      0.000     0.000     0.000     0.000      558   Integer#/
  0.00      0.000     0.000     0.000     0.000       88   IO#puts
  0.00      0.000     0.000     0.000     0.000        8   Array#inspect
  0.00      0.000     0.000     0.000     0.000       88   Kernel#puts
  0.00      0.029     0.000     0.000     0.029       14   <Module::CompSci::Timer>#elapsed
  0.00      0.000     0.000     0.000     0.000        8   IO#set_encoding
  0.00      0.001     0.000     0.000     0.001      120  *CompSci::FlexNode#df_search
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#suffixes
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#find_unresolved_default_spec
  0.00      0.000     0.000     0.000     0.000        3   Module#attr_accessor
  0.00      0.000     0.000     0.000     0.000       31   Kernel#nil?
  0.00      0.000     0.000     0.000     0.000       42   Module#method_added
  0.00      0.000     0.000     0.000     0.000       31   Integer#**
  0.00      0.000     0.000     0.000     0.000        4   CompSci::Node#inspect
  0.00      0.000     0.000     0.000     0.000       31   Integer#>
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_exit
  0.00      0.002     0.000     0.000     0.002        6  *Kernel#require
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_enter
  0.00      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.00      0.000     0.000     0.000     0.000        4   Module#to_s
  0.00      0.000     0.000     0.000     0.000        9   <Class::Thread>#current
  0.00      0.000     0.000     0.000     0.000        7   Class#inherited
  0.00      0.000     0.000     0.000     0.000        3   <Class::Gem::Specification>#unresolved_deps
  0.00      0.000     0.000     0.000     0.000        6   BasicObject#singleton_method_added
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_check_owner
  0.00      0.000     0.000     0.000     0.000        3   Array#initialize_copy
  0.00      0.000     0.000     0.000     0.000        3   Kernel#dup
  0.00      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.00      0.000     0.000     0.000     0.000        1   String#to_i
  0.00      0.000     0.000     0.000     0.000        3   Kernel#respond_to?
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#lock
  0.00      0.000     0.000     0.000     0.000        1   Integer#to_f
  0.00      0.000     0.000     0.000     0.000        4   Kernel#object_id
  0.00      0.000     0.000     0.000     0.000        1   Float#/
  0.00      0.000     0.000     0.000     0.000        1   Module#append_features
  0.00      0.000     0.000     0.000     0.000        3   Thread::Mutex#unlock
  0.00      0.000     0.000     0.000     0.000        3   Kernel#initialize_dup
  0.00      0.000     0.000     0.000     0.000        1   Module#included

* indicates recursively called methods
RUBYLIB=lib ruby-prof --exclude-common-cycles examples/binary_search_tree.rb -- 

#
# Insert nodes into a BST (random keys, duplicates: true)
#

[:king, :johnnie, :george, :pudding, :xerxes, :ink, :butter, :willie, :charlie, :queenie, :sugar, :zebra, :apples, :yellow, :robert, :harry, :london, :uncle, :orange, :duff, :freddy, :monkey, :nuts, :vinegar, :tommy, :edward]
[57, 26, 90, 62, 24, 7, 70, 82, 22, 16, 31, 95, 35, 30, 12, 42, 54, 67, 54, 95, 9, 58, 36, 83, 44, 31]
                                     57:king                                    
               26:johnnie                               90:george               
      24:xerxes           31:sugar           62:pudding           95:zebra      
   7:ink       _    30:yellow 35:apples 58:monkey 70:butter      _      95:duff 
  _  22:charlie   _    _    _    _  31:edward 42:harry   _    _  67:uncle 82:willie   _    _    _    _  
_ _ 16:queenie _ _ _ _ _ _ _ _ _ _ _ 36:nuts 54:london _ _ _ _ _ _ _ 83:vinegar _ _ _ _ _ _ _ _ 
_ _ _ _ 12:robert _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 44:tommy 54:orange _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ 9:freddy _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


#
# Insert 30 nodes into a BST (unique keys, duplicates: false)
#

                                      15:57                                     
                  13:89                                   18:3                  
        2:95                14:60               16:22               20:0        
   1:56      10:48       _         _         _       17:22     19:15     28:21  
  _    _  9:65 11:64   _    _    _    _    _    _    _    _    _    _  23:33 30:50 
_ _ _ _ 6:17 _ _ 12:49 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 22:48 26:56 29:63 _ 
_ _ _ _ _ _ _ _ 5:66 8:4 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 21:22 _ 24:89 27:38 _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 3:93 _ 7:32 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 25:37 _ _ _ _ _ _ _ _ _ _ 


#
# Search for 30 different keys
#

found 1:56
found 2:95
found 3:93
found 4:48
found 5:66
found 6:17
found 7:32
found 8:4
found 9:65
found 10:48
found 11:64
found 12:49
found 13:89
found 14:60
found 15:57
found 16:22
found 17:22
found 18:3
found 19:15
found 20:0
found 21:22
found 22:48
found 23:33
found 24:89
found 25:37
found 26:56
found 27:38
found 28:21
found 29:63
found 30:50
Measure Mode: wall_time
Thread ID: 47381246917660
Fiber ID: 47381246851700
Total: 0.014326
Sort by: self_time

 %self      total      self      wait     child     calls  name
 17.21      0.005     0.002     0.000     0.002       17   <Class::CompSci::Node>#display_line
  5.75      0.009     0.001     0.000     0.008        2   CompSci::Node#display
  5.39      0.001     0.001     0.000     0.000      764   Array#+
  5.05      0.001     0.001     0.000     0.000      821   Array#initialize
  4.28      0.001     0.001     0.000     0.000      343   <Class::CompSci::KeyNode>#key_cmp_idx
  4.11      0.002     0.001     0.000     0.001      877  *Class#new
  3.65      0.001     0.001     0.000     0.000       17   Array#any?
  3.30      0.000     0.000     0.000     0.000      766   String#ljust
  2.90      0.000     0.000     0.000     0.000     1532   String#size
  2.86      0.002     0.000     0.000     0.001      343   CompSci::KeyNode#cidx
  2.80      0.001     0.000     0.000     0.000      105   Array#join
  2.46      0.000     0.000     0.000     0.000     1532   Integer#+
  2.35      0.000     0.000     0.000     0.000     1349   Array#length
  1.78      0.000     0.000     0.000     0.000      766   String#rjust
  1.70      0.000     0.000     0.000     0.000      996   Integer#==
  1.70      0.000     0.000     0.000     0.000      783   Array#max
  1.39      0.000     0.000     0.000     0.000      894   BasicObject#!
  1.36      0.000     0.000     0.000     0.000      783   Integer#/
  1.18      0.000     0.000     0.000     0.000      686   Integer#<
  1.15      0.000     0.000     0.000     0.000      846   NilClass#nil?
  1.07      0.014     0.000     0.000     0.014        2   Global#[No method]
  0.99      0.000     0.000     0.000     0.000      615   Array#[]
  0.85      0.000     0.000     0.000     0.000      172   Integer#to_s
  0.67      0.000     0.000     0.000     0.000      414   Kernel#class
  0.65      0.002     0.000     0.000     0.002      218  *CompSci::KeyNode#insert
  0.64      0.000     0.000     0.000     0.000       56   CompSci::KeyNode#initialize
  0.51      0.001     0.000     0.000     0.000       86   CompSci::KeyNode#to_s
  0.49      0.000     0.000     0.000     0.000       56   CompSci::Node#initialize
  0.35      0.001     0.000     0.000     0.001      155  *CompSci::KeyNode#search2
  0.28      0.001     0.000     0.000     0.001      155  *CompSci::KeyNode#search
  0.26      0.000     0.000     0.000     0.000        2   Kernel#p
  0.22      0.000     0.000     0.000     0.000       36   IO#puts
  0.21      0.000     0.000     0.000     0.000       68   IO#write
  0.19      0.000     0.000     0.000     0.000      112   Array#shift
  0.19      0.000     0.000     0.000     0.000        6   IO#set_encoding
  0.16      0.000     0.000     0.000     0.000       56   Kernel#rand
  0.16      0.000     0.000     0.000     0.000        2   Array#inspect
  0.14      0.000     0.000     0.000     0.000       54   Array#[]=
  0.13      0.000     0.000     0.000     0.000       36   Kernel#puts
  0.12      0.000     0.000     0.000     0.000       26   Symbol#to_s
  0.10      0.002     0.000     0.000     0.002        4  *Kernel#require
  0.09      0.000     0.000     0.000     0.000       56   Array#empty?
  0.09      0.000     0.000     0.000     0.000       26   Symbol#inspect
  0.09      0.000     0.000     0.000     0.000        2   Module#attr_accessor
  0.08      0.000     0.000     0.000     0.000        2   <Module::Gem>#find_unresolved_default_spec
  0.07      0.000     0.000     0.000     0.000        3   Enumerable#to_a
  0.06      0.000     0.000     0.000     0.000       15   Kernel#nil?
  0.06      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.06      0.000     0.000     0.000     0.000       15   Array#<<
  0.05      0.000     0.000     0.000     0.000        2   String#upto
  0.05      0.000     0.000     0.000     0.000       15   Integer#>
  0.05      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_enter
  0.04      0.000     0.000     0.000     0.000        2   Array#shuffle
  0.03      0.000     0.000     0.000     0.000       26   Module#method_added
  0.03      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_exit
  0.03      0.000     0.000     0.000     0.000       15   Integer#**
  0.03      0.000     0.000     0.000     0.000        2   <Module::Gem>#suffixes
  0.02      0.000     0.000     0.000     0.000        1   Module#append_features
  0.02      0.000     0.000     0.000     0.000        2   <Class::Gem::Specification>#unresolved_deps
  0.02      0.000     0.000     0.000     0.000        6   <Class::Thread>#current
  0.01      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_check_owner
  0.01      0.000     0.000     0.000     0.000        2   Thread::Mutex#lock
  0.01      0.000     0.000     0.000     0.000        5   Class#inherited
  0.01      0.000     0.000     0.000     0.000        1   Module#included
  0.01      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.01      0.000     0.000     0.000     0.000        2   String#<=>
  0.01      0.000     0.000     0.000     0.000        3   BasicObject#singleton_method_added
  0.01      0.000     0.000     0.000     0.000        2   Thread::Mutex#unlock
  0.01      0.000     0.000     0.000     0.000        2   Kernel#respond_to?

* indicates recursively called methods
RUBYLIB=lib ruby-prof --exclude-common-cycles examples/ternary_search_tree.rb -- 

#
# Insert 50 nodes into a ternary search tree (random keys)
#

38:41
10:27
16:24
0:16
43:17
29:33
14:8
12:10
26:21
2:37
23:49
24:27
13:44
49:13
42:3
2:16
49:1
31:18
21:40
30:0
32:17
37:13
35:17
11:25
43:8
40:31
13:11
6:21
30:18
21:11
0:47
17:42
23:36
35:9
36:9
49:41
24:31
47:13
28:11
21:15
45:18
0:43
31:27
9:44
10:23
41:41
45:14
24:35
38:7
38:48
                                      5:23                                      
           0:16                        _                       38:41          
    _     0:47    2:37      _       _       _     10:27   38:7    43:17 
_ _ _ _ 0:43 _ _ 2:16 _ _ _ _ _ _ _ _ _ _ 6:21 10:23 16:24 _ 38:48 _ 42:3 43:8 49:13 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 9:44 _ _ _ 14:8 _ 29:33 _ _ _ _ _ _ _ _ _ 40:31 _ _ _ _ _ 47:13 49:1 _ 



_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 17:42 21:11 _ _ _ _ _ 24:31 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 35:17 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
nodes.size = 6561; abort render

#
# Search for 50 keys in order
#

search 0: 16 47 43
search 1: 
search 2: 37 16
search 3: 
search 4: 
search 5: 23
search 6: 21
search 7: 
search 8: 
search 9: 44
search 10: 27 23
search 11: 25
search 12: 10
search 13: 44 11
search 14: 8
search 15: 
search 16: 24
search 17: 42
search 18: 
search 19: 
search 20: 
search 21: 40 11 15
search 22: 
search 23: 49 36
search 24: 27 31 35
search 25: 
search 26: 21
search 27: 
search 28: 11
search 29: 33
search 30: 0 18
search 31: 18 27
search 32: 17
search 33: 
search 34: 
search 35: 17 9
search 36: 9
search 37: 13
search 38: 41 7 48
search 39: 
search 40: 31
search 41: 41
search 42: 3
search 43: 17 8
search 44: 
search 45: 18 14
search 46: 
search 47: 13
search 48: 
search 49: 13 1 41
Measure Mode: wall_time
Thread ID: 47066309229580
Fiber ID: 47066309155060
Total: 0.098457
Sort by: self_time

 %self      total      self      wait     child     calls  name
 27.94      0.053     0.028     0.000     0.026        9   <Class::CompSci::Node>#display_line
 19.77      0.019     0.019     0.000     0.000     3279   Array#+
  6.07      0.006     0.006     0.000     0.000     9841   String#ljust
  4.87      0.005     0.005     0.000     0.000    20194   Integer#+
  4.72      0.005     0.005     0.000     0.000    19682   String#size
  4.67      0.005     0.005     0.000     0.000     9841   String#rjust
  4.33      0.008     0.004     0.000     0.003        8   Array#any?
  3.72      0.091     0.004     0.000     0.087        1   CompSci::Node#display
  3.56      0.004     0.004     0.000     0.000     3330   Array#initialize
  2.79      0.003     0.003     0.000     0.000     9850   Array#max
  2.33      0.002     0.002     0.000     0.000     9850   Integer#/
  2.06      0.006     0.002     0.000     0.004     3381  *Class#new
  1.76      0.002     0.002     0.000     0.000     7438   BasicObject#!
  1.74      0.002     0.002     0.000     0.000     7430   NilClass#nil?
  1.26      0.001     0.001     0.000     0.000     4445   Array#length
  1.14      0.002     0.001     0.000     0.001      512   <Class::CompSci::KeyNode>#key_cmp_idx
  0.88      0.001     0.001     0.000     0.000      157   Array#join
  0.60      0.003     0.001     0.000     0.002      512   CompSci::KeyNode#cidx
  0.59      0.001     0.001     0.000     0.000        2   <Module::Gem>#find_unresolved_default_spec
  0.44      0.000     0.000     0.000     0.000     1903   Integer#==
  0.22      0.098     0.000     0.000     0.098        2   Global#[No method]
  0.21      0.000     0.000     0.000     0.000      890   Array#[]
  0.17      0.000     0.000     0.000     0.000      571   Kernel#class
  0.16      0.000     0.000     0.000     0.000      204   IO#write
  0.14      0.000     0.000     0.000     0.000      512   Integer#<
  0.13      0.000     0.000     0.000     0.000      512   Integer#<=>
  0.12      0.000     0.000     0.000     0.000      298   Integer#to_s
  0.11      0.000     0.000     0.000     0.000      103   IO#puts
  0.10      0.000     0.000     0.000     0.000       51   CompSci::KeyNode#initialize
  0.10      0.003     0.000     0.000     0.003      293  *CompSci::KeyNode#search
  0.08      0.003     0.000     0.000     0.003      293  *CompSci::KeyNode#search3
  0.07      0.000     0.000     0.000     0.000       97   CompSci::KeyNode#to_s
  0.07      0.002     0.000     0.000     0.002      251  *CompSci::KeyNode#insert
  0.06      0.000     0.000     0.000     0.000       51   CompSci::Node#initialize
  0.06      0.000     0.000     0.000     0.000      103   Kernel#puts
  0.04      0.000     0.000     0.000     0.000      102   Kernel#rand
  0.02      0.000     0.000     0.000     0.000        2   Module#attr_accessor
  0.02      0.000     0.000     0.000     0.000        6   IO#set_encoding
  0.02      0.000     0.000     0.000     0.000       50   Array#[]=
  0.02      0.000     0.000     0.000     0.000        2   String#upto
  0.02      0.000     0.000     0.000     0.000       28   Array#<<
  0.01      0.002     0.000     0.000     0.002        4  *Kernel#require
  0.01      0.000     0.000     0.000     0.000        8   Integer#>
  0.01      0.000     0.000     0.000     0.000        1   Array#shift
  0.01      0.000     0.000     0.000     0.000        2   Module#attr_reader
  0.01      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_enter
  0.01      0.000     0.000     0.000     0.000        8   Integer#**
  0.01      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_exit
  0.00      0.000     0.000     0.000     0.000        2   Enumerable#to_a
  0.00      0.000     0.000     0.000     0.000        2   <Module::Gem>#suffixes
  0.00      0.000     0.000     0.000     0.000        1   Module#append_features
  0.00      0.000     0.000     0.000     0.000        1   <Object::Object>#include
  0.00      0.000     0.000     0.000     0.000        2   <Class::Gem::Specification>#unresolved_deps
  0.00      0.000     0.000     0.000     0.000       26   Module#method_added
  0.00      0.000     0.000     0.000     0.000        2   MonitorMixin#mon_check_owner
  0.00      0.000     0.000     0.000     0.000        8   Kernel#nil?
  0.00      0.000     0.000     0.000     0.000        2   String#<=>
  0.00      0.000     0.000     0.000     0.000        5   Class#inherited
  0.00      0.000     0.000     0.000     0.000        2   Kernel#respond_to?
  0.00      0.000     0.000     0.000     0.000        6   <Class::Thread>#current
  0.00      0.000     0.000     0.000     0.000        3   BasicObject#singleton_method_added
  0.00      0.000     0.000     0.000     0.000        2   Thread::Mutex#unlock
  0.00      0.000     0.000     0.000     0.000        1   Integer#to_i
  0.00      0.000     0.000     0.000     0.000        1   Module#included
  0.00      0.000     0.000     0.000     0.000        2   Thread::Mutex#lock

* indicates recursively called methods
