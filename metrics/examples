Run options: --seed 50627

# Running:

.SS..................................................................

Finished in 0.325390s, 212.0529 runs/s, 3048.6449 assertions/s.

69 runs, 992 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.23 0.17 0.06 1/81 3494

#
# Try out Binary-, Ternary-, and QuaternaryTree
#

[62, 39, 37, 58, 45, 32, 95, 98, 27, 38, 20, 19, 5, 0, 41, 14, 63, 63, 31, 87, 20, 30, 72, 39, 6, 29, 72, 4, 11, 21]
#<CompSci::BinaryTree:0x005653284016f0 @root=#<CompSci::ChildNode:0x2b2994200efci @value=62 @children=[39, 37]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2b29941fc064i @value=41 @children=[21]>>
                                       62                                       
                   39                                      37                   
         58                  45                  32                  95         
    98        27        38        20        19         5         0        41    
  14   63   63   31   87   20   30   72   39   6    29   72   4    11   21 

df_search visited: 62 39 58 98 14 63 27 63 31 45 38 87 20 20 30 72 37 32 19 39 6 5 29 72 95 0 4 11 41 21


push: [17, 65, 47, 32, 18, 63, 66, 98, 77, 54, 23, 16, 56, 24, 56, 53, 76, 27, 57, 24, 10, 26, 67, 60, 9, 65, 78, 25, 13, 97]

                                       62                                       
                   39                                      37                   
         58                  45                  32                  95         
    98        27        38        20        19         5         0        41    
  14   63   63   31   87   20   30   72   39   6    29   72   4    11   21   17 
65 47 32 18 63 66 98 77 54 23 16 56 24 56 53 76 27 57 24 10 26 67 60 9 65 78 25 13 97 


[62, 39, 37, 58, 45, 32, 95, 98, 27, 38, 20, 19, 5, 0, 41, 14, 63, 63, 31, 87, 20, 30, 72, 39, 6, 29, 72, 4, 11, 21]
#<CompSci::TernaryTree:0x005653287285e0 @root=#<CompSci::ChildNode:0x2b29943942c8i @value=62 @children=[39, 37, 58]>, @child_slots=3, @open_parent=#<CompSci::ChildNode:0x2b2994394034i @value=38 @children=[11, 21]>>
                                       62                                       
            39                        37                        58            
   45      32      95      98      27      38      20      19       5   
0 41 14 63 63 31 87 20 30 72 39 6 29 72 4 11 21 

df_search visited: 62 39 45 0 41 14 32 63 63 31 95 87 20 30 37 98 72 39 6 27 29 72 4 38 11 21 58 20 19 5


push: [38, 7, 84, 94, 16, 38, 49, 49, 82, 83, 7, 55, 10, 13, 45, 18, 10, 79, 48, 16, 0, 43, 90, 80, 66, 2, 4, 52, 69, 63]

                                       62                                       
            39                        37                        58            
   45      32      95      98      27      38      20      19       5   
0 41 14 63 63 31 87 20 30 72 39 6 29 72 4 11 21 38 7 84 94 16 38 49 49 82 83 
7 55 10 13 45 18 10 79 48 16 0 43 90 80 66 2 4 52 69 63 


[62, 39, 37, 58, 45, 32, 95, 98, 27, 38, 20, 19, 5, 0, 41, 14, 63, 63, 31, 87, 20, 30, 72, 39, 6, 29, 72, 4, 11, 21]
#<CompSci::QuaternaryTree:0x00565328702638 @root=#<CompSci::ChildNode:0x2b2994381308i @value=62 @children=[39, 37, 58, 45]>, @child_slots=4, @open_parent=#<CompSci::ChildNode:0x2b2994381150i @value=98 @children=[21]>>
                                       62                                       
         39                  37                  58                  45         
  32   95   98   27   38   20   19   5    0    41   14   63   63   31   87   20 
30 72 39 6 29 72 4 11 21 

df_search visited: 62 39 32 30 72 39 6 95 29 72 4 11 98 21 27 37 38 20 19 5 58 0 41 14 63 45 63 31 87 20


push: [96, 25, 95, 94, 33, 59, 30, 50, 84, 4, 2, 73, 97, 23, 23, 39, 92, 1, 88, 98, 4, 76, 28, 62, 74, 63, 25, 61, 8, 4]

                                       62                                       
         39                  37                  58                  45         
  32   95   98   27   38   20   19   5    0    41   14   63   63   31   87   20 
30 72 39 6 29 72 4 11 21 96 25 95 94 33 59 30 50 84 4 2 73 97 23 23 39 92 1 88 98 4 76 28 62 74 63 25 61 8 4 


ruby -Ilib examples/complete_tree.rb


#
# Print CompleteBinary-, Ternary-, and QuaternaryTree
#

[77, 9, 13, 3, 48, 61, 43, 55, 49, 18, 18, 27, 79, 66, 0, 14, 89, 30, 46, 18, 0, 36, 57, 86, 54, 81, 25, 52, 66, 10]
#<CompSci::CompleteBinaryTree:0x0055ead7de83f8 @array=[77, 9, 13, 3, 48, 61, 43, 55, 49, 18, 18, 27, 79, 66, 0, 14, 89, 30, 46, 18, 0, 36, 57, 86, 54, 81, 25, 52, 66, 10], @child_slots=2>
                                       77                                       
                    9                                      13                   
          3                  48                  61                  43         
    55        49        18        18        27        79        66         0    
  14   89   30   46   18   0    36   57   86   54   81   25   52   66   10 



push: [33, 98, 22, 53, 40, 93, 38, 36, 51, 72, 45, 72, 19, 81, 58, 89, 23, 45, 41, 44, 17, 58, 15, 56, 32, 13, 28, 23, 75, 87]
                                       77                                       
                    9                                      13                   
          3                  48                  61                  43         
    55        49        18        18        27        79        66         0    
  14   89   30   46   18   0    36   57   86   54   81   25   52   66   10   33 
98 22 53 40 93 38 36 51 72 45 72 19 81 58 89 23 45 41 44 17 58 15 56 32 13 28 23 75 87 



[77, 9, 13, 3, 48, 61, 43, 55, 49, 18, 18, 27, 79, 66, 0, 14, 89, 30, 46, 18, 0, 36, 57, 86, 54, 81, 25, 52, 66, 10]
#<CompSci::CompleteTernaryTree:0x0055ead7ddfaa0 @array=[77, 9, 13, 3, 48, 61, 43, 55, 49, 18, 18, 27, 79, 66, 0, 14, 89, 30, 46, 18, 0, 36, 57, 86, 54, 81, 25, 52, 66, 10], @child_slots=3>
                                       77                                       
             9                        13                         3            
   48      61      43      55      49      18      18      27      79   
66 0 14 89 30 46 18 0 36 57 86 54 81 25 52 66 10 



push: [62, 35, 21, 37, 9, 49, 73, 58, 32, 97, 23, 49, 44, 40, 14, 64, 8, 1, 24, 40, 57, 56, 48, 79, 58, 3, 95, 2, 81, 39]
                                       77                                       
             9                        13                         3            
   48      61      43      55      49      18      18      27      79   
66 0 14 89 30 46 18 0 36 57 86 54 81 25 52 66 10 62 35 21 37 9 49 73 58 32 97 
23 49 44 40 14 64 8 1 24 40 57 56 48 79 58 3 95 2 81 39 



[77, 9, 13, 3, 48, 61, 43, 55, 49, 18, 18, 27, 79, 66, 0, 14, 89, 30, 46, 18, 0, 36, 57, 86, 54, 81, 25, 52, 66, 10]
#<CompSci::CompleteQuaternaryTree:0x0055ead7cdd8a0 @array=[77, 9, 13, 3, 48, 61, 43, 55, 49, 18, 18, 27, 79, 66, 0, 14, 89, 30, 46, 18, 0, 36, 57, 86, 54, 81, 25, 52, 66, 10], @child_slots=4>
                                       77                                       
          9                  13                   3                  48         
  61   43   55   49   18   18   27   79   66   0    14   89   30   46   18   0  
36 57 86 54 81 25 52 66 10 



push: [75, 4, 87, 43, 74, 57, 90, 51, 12, 57, 32, 37, 22, 59, 10, 29, 83, 57, 20, 84, 57, 78, 42, 37, 75, 36, 84, 89, 69, 80]
                                       77                                       
          9                  13                   3                  48         
  61   43   55   49   18   18   27   79   66   0    14   89   30   46   18   0  
36 57 86 54 81 25 52 66 10 75 4 87 43 74 57 90 51 12 57 32 37 22 59 10 29 83 57 20 84 57 78 42 37 75 36 84 89 69 80 



ruby -Ilib examples/binary_tree.rb


#
# 3 seconds worth of pushes
#

100th push: 0.00000287 s
200th push: 0.00000273 s
300th push: 0.00000234 s
400th push: 0.00000280 s
500th push: 0.00000290 s
600th push: 0.00000303 s
700th push: 0.00000267 s
800th push: 0.00000295 s
900th push: 0.00000274 s
1000th push: 0.00000293 s
-----------
    1k push: 0.0528 s (18939 push / s)

1100th push: 0.00000301 s
1200th push: 0.00000309 s
1300th push: 0.00000320 s
1400th push: 0.00000307 s
1500th push: 0.00000333 s
1600th push: 0.00000278 s
1700th push: 0.00000315 s
1800th push: 0.00000313 s
1900th push: 0.00000349 s
2000th push: 0.00000377 s
-----------
    1k push: 0.1959 s (5103 push / s)

2100th push: 0.00000376 s
2200th push: 0.00000450 s
2300th push: 0.00000394 s
2400th push: 0.00000724 s
2500th push: 0.00000447 s
2600th push: 0.00000611 s
2700th push: 0.00000484 s
2800th push: 0.00000553 s
2900th push: 0.00000543 s
3000th push: 0.00000573 s
-----------
    1k push: 0.4249 s (2353 push / s)

3100th push: 0.00000542 s
3200th push: 0.00000542 s
3300th push: 0.00000506 s
3400th push: 0.00000551 s
3500th push: 0.00000525 s
3600th push: 0.00000518 s
3700th push: 0.00000541 s
3800th push: 0.00000588 s
3900th push: 0.00000566 s
4000th push: 0.00000626 s
-----------
    1k push: 0.7046 s (1419 push / s)

4100th push: 0.00000531 s
4200th push: 0.00000617 s
4300th push: 0.00000581 s
4400th push: 0.00000607 s
4500th push: 0.00000562 s
4600th push: 0.00000569 s
4700th push: 0.00000578 s
4800th push: 0.00000632 s
4900th push: 0.00000605 s
5000th push: 0.00000592 s
-----------
    1k push: 1.0950 s (913 push / s)

5100th push: 0.00000586 s
5200th push: 0.00000577 s
5300th push: 0.00000609 s
pushed 5368 items in 3.0 s

#
# 30 inserts, puts, df_search
#

[9, 12, 58, 75, 27, 41, 95, 17, 72, 92, 34, 21, 8, 86, 12, 74, 63, 91, 42, 52, 87, 49, 52, 7, 5, 3, 43, 7, 27, 11]
                                        9                                       
                   12                                      58                   
         75                  27                  41                  95         
    17        72        92        34        21         8        86        12    
  74   63   91   42   52   87   49   52   7    5    3    43   7    27   11 
#<CompSci::BinaryTree:0x0055bec85e73d8 @root=#<CompSci::ChildNode:0x2adf642f39c4i @value=9 @children=[12, 58]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2adf642f2ec0i @value=12 @children=[11]>>

visited 9
visited 12
visited 75
visited 17
visited 74
visited 63
visited 72
visited 91
visited 42
visited 27
visited 92
visited 52
visited 87
visited 34
visited 49
visited 52
visited 58
visited 41
visited 21
visited 7
visited 5
visited 8
visited 3
visited 43
visited 95
visited 86
visited 7
visited 27
visited 12
visited 11

push: [57, 68, 5, 37, 30, 53, 50, 16, 79, 59, 0, 51, 63, 20, 59, 17, 84, 30, 17, 77, 71, 50, 34, 42, 17, 31, 46, 91, 73, 32]
                                        9                                       
                   12                                      58                   
         75                  27                  41                  95         
    17        72        92        34        21         8        86        12    
  74   63   91   42   52   87   49   52   7    5    3    43   7    27   11   57 
68 5 37 30 53 50 16 79 59 0 51 63 20 59 17 84 30 17 77 71 50 34 42 17 31 46 91 73 32 

ruby -Ilib examples/heap.rb


#
# 3 seconds worth of pushes
#

10000th push: 0.00000186 s
20000th push: 0.00000267 s
30000th push: 0.00000122 s
40000th push: 0.00000228 s
50000th push: 0.00000191 s
60000th push: 0.00000277 s
70000th push: 0.00000306 s
80000th push: 0.00000188 s
90000th push: 0.00000175 s
100000th push: 0.00000185 s
-------------
    100k push: 0.18614960 s (537k push / s)

110000th push: 0.00000143 s
120000th push: 0.00000176 s
130000th push: 0.00000178 s
140000th push: 0.00000250 s
150000th push: 0.00000128 s
160000th push: 0.00000143 s
170000th push: 0.00000124 s
180000th push: 0.00000373 s
190000th push: 0.00000174 s
200000th push: 0.00000220 s
-------------
    100k push: 0.18599808 s (537k push / s)

210000th push: 0.00000145 s
220000th push: 0.00000178 s
230000th push: 0.00000142 s
240000th push: 0.00000192 s
250000th push: 0.00000264 s
260000th push: 0.00000124 s
270000th push: 0.00000266 s
280000th push: 0.00000399 s
290000th push: 0.00002082 s
300000th push: 0.00000160 s
-------------
    100k push: 0.18800505 s (531k push / s)

310000th push: 0.00000177 s
320000th push: 0.00000237 s
330000th push: 0.00000321 s
340000th push: 0.00000363 s
350000th push: 0.00000147 s
360000th push: 0.00000129 s
370000th push: 0.00000137 s
380000th push: 0.00000176 s
390000th push: 0.00000212 s
400000th push: 0.00000129 s
-------------
    100k push: 0.18584416 s (538k push / s)

410000th push: 0.00000123 s
420000th push: 0.00000154 s
430000th push: 0.00000242 s
440000th push: 0.00000133 s
450000th push: 0.00000230 s
460000th push: 0.00000225 s
470000th push: 0.00000130 s
480000th push: 0.00000218 s
490000th push: 0.00000123 s
500000th push: 0.00000187 s
-------------
    100k push: 0.18603414 s (537k push / s)

510000th push: 0.00000220 s
520000th push: 0.00000131 s
530000th push: 0.00000123 s
540000th push: 0.00000130 s
550000th push: 0.00000125 s
560000th push: 0.00000219 s
570000th push: 0.00000132 s
580000th push: 0.00000121 s
590000th push: 0.00000221 s
600000th push: 0.00000173 s
-------------
    100k push: 0.18587062 s (538k push / s)

610000th push: 0.00000135 s
620000th push: 0.00000122 s
630000th push: 0.00000219 s
640000th push: 0.00000356 s
650000th push: 0.00000222 s
660000th push: 0.00000269 s
670000th push: 0.00000176 s
680000th push: 0.00000126 s
690000th push: 0.00000193 s
700000th push: 0.00000218 s
-------------
    100k push: 0.18590532 s (537k push / s)

710000th push: 0.00000195 s
720000th push: 0.00000133 s
730000th push: 0.00000313 s
740000th push: 0.00000136 s
750000th push: 0.00000125 s
760000th push: 0.00000268 s
770000th push: 0.00000123 s
780000th push: 0.00000171 s
790000th push: 0.00000128 s
800000th push: 0.00000178 s
-------------
    100k push: 0.18569664 s (538k push / s)

810000th push: 0.00000227 s
820000th push: 0.00000384 s
830000th push: 0.00000299 s
840000th push: 0.00000196 s
850000th push: 0.00000221 s
860000th push: 0.00000248 s
870000th push: 0.00000120 s
880000th push: 0.00000192 s
890000th push: 0.00000129 s
900000th push: 0.00000352 s
-------------
    100k push: 0.18837929 s (530k push / s)

910000th push: 0.00000224 s
920000th push: 0.00000222 s
930000th push: 0.00000222 s
940000th push: 0.00000244 s
950000th push: 0.00000181 s
960000th push: 0.00000224 s
970000th push: 0.00000188 s
980000th push: 0.00000226 s
990000th push: 0.00000206 s
1000000th push: 0.00000224 s
-------------
    100k push: 0.18779453 s (532k push / s)

1010000th push: 0.00000171 s
1020000th push: 0.00000177 s
1030000th push: 0.00000177 s
1040000th push: 0.00000175 s
1050000th push: 0.00000133 s
1060000th push: 0.00000234 s
1070000th push: 0.00000132 s
1080000th push: 0.00000178 s
1090000th push: 0.00000128 s
1100000th push: 0.00000128 s
-------------
    100k push: 0.18613622 s (537k push / s)

1110000th push: 0.00000140 s
1120000th push: 0.00000228 s
1130000th push: 0.00000131 s
1140000th push: 0.00000134 s
1150000th push: 0.00000120 s
1160000th push: 0.00000133 s
1170000th push: 0.00000125 s
1180000th push: 0.00000262 s
1190000th push: 0.00000125 s
1200000th push: 0.00000124 s
-------------
    100k push: 0.18581093 s (538k push / s)

1210000th push: 0.00000224 s
1220000th push: 0.00000221 s
1230000th push: 0.00000178 s
1240000th push: 0.00000243 s
1250000th push: 0.00000128 s
1260000th push: 0.00000177 s
1270000th push: 0.00000187 s
1280000th push: 0.00000934 s
1290000th push: 0.00000176 s
1300000th push: 0.00000137 s
-------------
    100k push: 0.18645869 s (536k push / s)

1310000th push: 0.00000134 s
1320000th push: 0.00000273 s
1330000th push: 0.00000179 s
1340000th push: 0.00000127 s
1350000th push: 0.00000192 s
1360000th push: 0.00000239 s
1370000th push: 0.00000302 s
1380000th push: 0.00000303 s
1390000th push: 0.00000274 s
1400000th push: 0.00000179 s
-------------
    100k push: 0.18802585 s (531k push / s)

1410000th push: 0.00000178 s
1420000th push: 0.00000125 s
1430000th push: 0.00000131 s
1440000th push: 0.00000163 s
1450000th push: 0.00000188 s
1460000th push: 0.00001599 s
1470000th push: 0.00000197 s
1480000th push: 0.00000150 s
1490000th push: 0.00000180 s
1500000th push: 0.00000219 s
-------------
    100k push: 0.18652827 s (536k push / s)

1510000th push: 0.00000264 s
1520000th push: 0.00000119 s
1530000th push: 0.00000176 s
1540000th push: 0.00000128 s
1550000th push: 0.00000207 s
1560000th push: 0.00000139 s
1570000th push: 0.00000131 s
1580000th push: 0.00000183 s
1590000th push: 0.00000177 s
1600000th push: 0.00000193 s
-------------
    100k push: 0.18576137 s (538k push / s)

pushed 1608369 items in 3.0 s

still a heap with 1608385 items? YES - 1.664 sec

#
# display the results of TernaryHeap push and pop
#

push: 48 92 24 30 55 12 60 85 2 6 6 67 79 65 48 52 84 25 92 20 53 60 82 62 68 57 32 73 56 34
array: [92, 92, 85, 79, 60, 84, 60, 82, 73, 56, 6, 30, 67, 48, 48, 52, 12, 25, 65, 20, 53, 55, 24, 62, 68, 2, 32, 57, 6, 34]
heap: true
                                       92                                       
            92                        85                        79            
   60      84      60      82      73      56       6      30      67   
48 48 52 12 25 65 20 53 55 24 62 68 2 32 57 6 34 


pop: 92
array: [92, 84, 85, 79, 60, 65, 60, 82, 73, 56, 6, 30, 67, 48, 48, 52, 12, 25, 34, 20, 53, 55, 24, 62, 68, 2, 32, 57, 6]
heap: true
                                       92                                       
            84                        85                        79            
   60      65      60      82      73      56       6      30      67   
48 48 52 12 25 34 20 53 55 24 62 68 2 32 57 6 


pop: 92 85 84 82 79 73 68 67 65
array: [62, 60, 56, 30, 60, 57, 55, 24, 32, 53, 6, 6, 2, 48, 48, 52, 12, 25, 34, 20]
heap: true
                                       62                                       
            60                        56                        30            
   60      57      55      24      32      53       6       6       2   
48 48 52 12 25 34 20 


push: 84 39 49 90 83 25 75 36 60 46 2 84 85 1 69 96 85 2 75 60 26 36 34 46 76 42 6 3 19 2
array: [96, 76, 84, 90, 62, 57, 60, 83, 75, 60, 84, 85, 75, 48, 60, 52, 12, 25, 34, 20, 55, 39, 24, 49, 56, 25, 32, 36, 53, 46, 2, 6, 30, 1, 6, 69, 85, 2, 2, 60, 26, 36, 34, 46, 48, 42, 6, 3, 19, 2]
heap: true
                                       96                                       
            76                        84                        90            
   62      57      60      83      75      60      84      85      75   
48 60 52 12 25 34 20 55 39 24 49 56 25 32 36 53 46 2 6 30 1 6 69 85 2 2 60 
26 36 34 46 48 42 6 3 19 2 


