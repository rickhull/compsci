Run options: --seed 5826

# Running:

................................SS...................................

Finished in 0.324099s, 212.8978 runs/s, 3060.7917 assertions/s.

69 runs, 992 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.05 0.08 0.04 1/81 4481

#
# Try out Binary-, Ternary-, and QuaternaryTree
#

[34, 73, 7, 34, 8, 72, 70, 52, 4, 49, 60, 12, 50, 54, 33, 97, 10, 41, 80, 84, 63, 15, 42, 45, 63, 37, 49, 22, 1, 39]
#<CompSci::BinaryTree:0x005596af2d8340 @root=#<CompSci::ChildNode:0x2acb5796c18ci @value=34 @children=[73, 7]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2acb5796bc64i @value=33 @children=[39]>>
                                       34                                       
                   73                                       7                   
         34                   8                  72                  70         
    52         4        49        60        12        50        54        33    
  97   10   41   80   84   63   15   42   45   63   37   49   22   1    39 

df_search visited: 34 73 34 52 97 10 4 41 80 8 49 84 63 60 15 42 7 72 12 45 63 50 37 49 70 54 22 1 33 39


push: [21, 95, 57, 11, 88, 53, 27, 81, 69, 47, 58, 39, 10, 16, 81, 70, 94, 22, 90, 93, 39, 61, 44, 86, 42, 9, 50, 71, 94, 65]

                                       34                                       
                   73                                       7                   
         34                   8                  72                  70         
    52         4        49        60        12        50        54        33    
  97   10   41   80   84   63   15   42   45   63   37   49   22   1    39   21 
95 57 11 88 53 27 81 69 47 58 39 10 16 81 70 94 22 90 93 39 61 44 86 42 9 50 71 94 65 


[34, 73, 7, 34, 8, 72, 70, 52, 4, 49, 60, 12, 50, 54, 33, 97, 10, 41, 80, 84, 63, 15, 42, 45, 63, 37, 49, 22, 1, 39]
#<CompSci::TernaryTree:0x005596af287d78 @root=#<CompSci::ChildNode:0x2acb57943ea8i @value=34 @children=[73, 7, 34]>, @child_slots=3, @open_parent=#<CompSci::ChildNode:0x2acb57943beci @value=49 @children=[1, 39]>>
                                       34                                       
            73                         7                        34            
    8      72      70      52       4      49      60      12      50   
54 33 97 10 41 80 84 63 15 42 45 63 37 49 22 1 39 

df_search visited: 34 73 8 54 33 97 72 10 41 80 70 84 63 15 7 52 42 45 63 4 37 49 22 49 1 39 34 60 12 50


push: [61, 25, 80, 53, 56, 10, 63, 43, 36, 5, 46, 47, 35, 30, 15, 87, 96, 31, 78, 61, 0, 48, 73, 8, 63, 4, 89, 30, 15, 87]

                                       34                                       
            73                         7                        34            
    8      72      70      52       4      49      60      12      50   
54 33 97 10 41 80 84 63 15 42 45 63 37 49 22 1 39 61 25 80 53 56 10 63 43 36 5 
46 47 35 30 15 87 96 31 78 61 0 48 73 8 63 4 89 30 15 87 


[34, 73, 7, 34, 8, 72, 70, 52, 4, 49, 60, 12, 50, 54, 33, 97, 10, 41, 80, 84, 63, 15, 42, 45, 63, 37, 49, 22, 1, 39]
#<CompSci::QuaternaryTree:0x005596af2778b0 @root=#<CompSci::ChildNode:0x2acb5793bc30i @value=34 @children=[73, 7, 34, 8]>, @child_slots=4, @open_parent=#<CompSci::ChildNode:0x2acb5793b99ci @value=52 @children=[39]>>
                                       34                                       
         73                   7                  34                   8         
  72   70   52   4    49   60   12   50   54   33   97   10   41   80   84   63 
15 42 45 63 37 49 22 1 39 

df_search visited: 34 73 72 15 42 45 63 70 37 49 22 1 52 39 4 7 49 60 12 50 34 54 33 97 10 8 41 80 84 63


push: [52, 1, 19, 11, 21, 87, 22, 77, 94, 33, 58, 44, 0, 38, 9, 14, 91, 74, 25, 1, 30, 54, 23, 92, 8, 45, 98, 10, 58, 79]

                                       34                                       
         73                   7                  34                   8         
  72   70   52   4    49   60   12   50   54   33   97   10   41   80   84   63 
15 42 45 63 37 49 22 1 39 52 1 19 11 21 87 22 77 94 33 58 44 0 38 9 14 91 74 25 1 30 54 23 92 8 45 98 10 58 79 


ruby -Ilib examples/complete_tree.rb


#
# Print CompleteBinary-, Ternary-, and QuaternaryTree
#

[11, 13, 95, 30, 49, 40, 16, 80, 12, 28, 39, 3, 11, 64, 69, 82, 61, 2, 5, 59, 24, 60, 16, 66, 85, 9, 46, 67, 85, 59]
#<CompSci::CompleteBinaryTree:0x0055d241ad02c8 @array=[11, 13, 95, 30, 49, 40, 16, 80, 12, 28, 39, 3, 11, 64, 69, 82, 61, 2, 5, 59, 24, 60, 16, 66, 85, 9, 46, 67, 85, 59], @child_slots=2>
                                       11                                       
                   13                                      95                   
         30                  49                  40                  16         
    80        12        28        39         3        11        64        69    
  82   61   2    5    59   24   60   16   66   85   9    46   67   85   59 



push: [50, 52, 34, 35, 93, 39, 50, 18, 12, 64, 12, 36, 90, 25, 19, 89, 24, 35, 94, 2, 57, 63, 31, 84, 87, 41, 29, 65, 97, 70]
                                       11                                       
                   13                                      95                   
         30                  49                  40                  16         
    80        12        28        39         3        11        64        69    
  82   61   2    5    59   24   60   16   66   85   9    46   67   85   59   50 
52 34 35 93 39 50 18 12 64 12 36 90 25 19 89 24 35 94 2 57 63 31 84 87 41 29 65 97 70 



[11, 13, 95, 30, 49, 40, 16, 80, 12, 28, 39, 3, 11, 64, 69, 82, 61, 2, 5, 59, 24, 60, 16, 66, 85, 9, 46, 67, 85, 59]
#<CompSci::CompleteTernaryTree:0x0055d241ac7970 @array=[11, 13, 95, 30, 49, 40, 16, 80, 12, 28, 39, 3, 11, 64, 69, 82, 61, 2, 5, 59, 24, 60, 16, 66, 85, 9, 46, 67, 85, 59], @child_slots=3>
                                       11                                       
            13                        95                        30            
   49      40      16      80      12      28      39       3      11   
64 69 82 61 2 5 59 24 60 16 66 85 9 46 67 85 59 



push: [79, 79, 62, 78, 56, 75, 49, 77, 32, 21, 6, 61, 60, 68, 79, 44, 79, 58, 80, 86, 88, 97, 19, 62, 9, 23, 97, 40, 16, 5]
                                       11                                       
            13                        95                        30            
   49      40      16      80      12      28      39       3      11   
64 69 82 61 2 5 59 24 60 16 66 85 9 46 67 85 59 79 79 62 78 56 75 49 77 32 21 
6 61 60 68 79 44 79 58 80 86 88 97 19 62 9 23 97 40 16 5 



[11, 13, 95, 30, 49, 40, 16, 80, 12, 28, 39, 3, 11, 64, 69, 82, 61, 2, 5, 59, 24, 60, 16, 66, 85, 9, 46, 67, 85, 59]
#<CompSci::CompleteQuaternaryTree:0x0055d2419c5680 @array=[11, 13, 95, 30, 49, 40, 16, 80, 12, 28, 39, 3, 11, 64, 69, 82, 61, 2, 5, 59, 24, 60, 16, 66, 85, 9, 46, 67, 85, 59], @child_slots=4>
                                       11                                       
         13                  95                  30                  49         
  40   16   80   12   28   39   3    11   64   69   82   61   2    5    59   24 
60 16 66 85 9 46 67 85 59 



push: [28, 95, 19, 6, 19, 61, 38, 50, 67, 32, 56, 90, 87, 91, 95, 6, 59, 90, 72, 43, 79, 39, 78, 61, 77, 79, 94, 77, 28, 87]
                                       11                                       
         13                  95                  30                  49         
  40   16   80   12   28   39   3    11   64   69   82   61   2    5    59   24 
60 16 66 85 9 46 67 85 59 28 95 19 6 19 61 38 50 67 32 56 90 87 91 95 6 59 90 72 43 79 39 78 61 77 79 94 77 28 87 



ruby -Ilib examples/binary_tree.rb


#
# 3 seconds worth of pushes
#

100th push: 0.00000252 s
200th push: 0.00000264 s
300th push: 0.00000233 s
400th push: 0.00000307 s
500th push: 0.00000265 s
600th push: 0.00000274 s
700th push: 0.00000305 s
800th push: 0.00000328 s
900th push: 0.00000316 s
1000th push: 0.00000325 s
-----------
    1k push: 0.0530 s (18865 push / s)

1100th push: 0.00000304 s
1200th push: 0.00000317 s
1300th push: 0.00000310 s
1400th push: 0.00000326 s
1500th push: 0.00000309 s
1600th push: 0.00000344 s
1700th push: 0.00000328 s
1800th push: 0.00000337 s
1900th push: 0.00000361 s
2000th push: 0.00000390 s
-----------
    1k push: 0.1954 s (5117 push / s)

2100th push: 0.00000432 s
2200th push: 0.00000420 s
2300th push: 0.00000481 s
2400th push: 0.00000475 s
2500th push: 0.00000510 s
2600th push: 0.00000528 s
2700th push: 0.00000563 s
2800th push: 0.00000508 s
2900th push: 0.00000604 s
3000th push: 0.00000550 s
-----------
    1k push: 0.4201 s (2380 push / s)

3100th push: 0.00000565 s
3200th push: 0.00000571 s
3300th push: 0.00000591 s
3400th push: 0.00000570 s
3500th push: 0.00002820 s
3600th push: 0.00000702 s
3700th push: 0.00000571 s
3800th push: 0.00000618 s
3900th push: 0.00000623 s
4000th push: 0.00000564 s
-----------
    1k push: 0.6991 s (1430 push / s)

4100th push: 0.00000594 s
4200th push: 0.00000618 s
4300th push: 0.00000602 s
4400th push: 0.00000586 s
4500th push: 0.00000586 s
4600th push: 0.00000620 s
4700th push: 0.00000609 s
4800th push: 0.00000634 s
4900th push: 0.00000652 s
5000th push: 0.00000611 s
-----------
    1k push: 1.0720 s (932 push / s)

5100th push: 0.00000588 s
5200th push: 0.00000636 s
5300th push: 0.00000614 s
5400th push: 0.00000600 s
pushed 5403 items in 3.0 s

#
# 30 inserts, puts, df_search
#

[39, 18, 80, 94, 19, 22, 41, 22, 98, 0, 42, 1, 93, 56, 50, 13, 65, 52, 75, 14, 31, 45, 57, 46, 27, 31, 97, 17, 6, 30]
                                       39                                       
                   18                                      80                   
         94                  19                  22                  41         
    22        98         0        42         1        93        56        50    
  13   65   52   75   14   31   45   57   46   27   31   97   17   6    30 
#<CompSci::BinaryTree:0x0055f7b281f8a8 @root=#<CompSci::ChildNode:0x2afbd940fc40i @value=39 @children=[18, 80]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2afbd940ec3ci @value=50 @children=[30]>>

visited 39
visited 18
visited 94
visited 22
visited 13
visited 65
visited 98
visited 52
visited 75
visited 19
visited 0
visited 14
visited 31
visited 42
visited 45
visited 57
visited 80
visited 22
visited 1
visited 46
visited 27
visited 93
visited 31
visited 97
visited 41
visited 56
visited 17
visited 6
visited 50
visited 30

push: [85, 42, 61, 16, 76, 62, 21, 38, 33, 16, 79, 57, 78, 49, 55, 63, 61, 89, 93, 31, 29, 9, 41, 38, 20, 35, 83, 14, 65, 75]
                                       39                                       
                   18                                      80                   
         94                  19                  22                  41         
    22        98         0        42         1        93        56        50    
  13   65   52   75   14   31   45   57   46   27   31   97   17   6    30   85 
42 61 16 76 62 21 38 33 16 79 57 78 49 55 63 61 89 93 31 29 9 41 38 20 35 83 14 65 75 

ruby -Ilib examples/heap.rb


#
# 3 seconds worth of pushes
#

10000th push: 0.00000361 s
20000th push: 0.00000141 s
30000th push: 0.00000304 s
40000th push: 0.00000180 s
50000th push: 0.00000228 s
60000th push: 0.00000137 s
70000th push: 0.00000264 s
80000th push: 0.00000266 s
90000th push: 0.00000138 s
100000th push: 0.00000417 s
-------------
    100k push: 0.18035241 s (554k push / s)

110000th push: 0.00000300 s
120000th push: 0.00000191 s
130000th push: 0.00000178 s
140000th push: 0.00000415 s
150000th push: 0.00000199 s
160000th push: 0.00000178 s
170000th push: 0.00000264 s
180000th push: 0.00000183 s
190000th push: 0.00000422 s
200000th push: 0.00000135 s
-------------
    100k push: 0.18118829 s (551k push / s)

210000th push: 0.00000260 s
220000th push: 0.00000267 s
230000th push: 0.00000130 s
240000th push: 0.00000138 s
250000th push: 0.00000190 s
260000th push: 0.00000199 s
270000th push: 0.00000129 s
280000th push: 0.00000127 s
290000th push: 0.00000297 s
300000th push: 0.00000313 s
-------------
    100k push: 0.18374330 s (544k push / s)

310000th push: 0.00000294 s
320000th push: 0.00000233 s
330000th push: 0.00000130 s
340000th push: 0.00000419 s
350000th push: 0.00000181 s
360000th push: 0.00000133 s
370000th push: 0.00000199 s
380000th push: 0.00000176 s
390000th push: 0.00000134 s
400000th push: 0.00000132 s
-------------
    100k push: 0.17950830 s (557k push / s)

410000th push: 0.00000130 s
420000th push: 0.00000172 s
430000th push: 0.00000321 s
440000th push: 0.00000365 s
450000th push: 0.00000147 s
460000th push: 0.00000436 s
470000th push: 0.00000178 s
480000th push: 0.00000172 s
490000th push: 0.00000173 s
500000th push: 0.00000143 s
-------------
    100k push: 0.18210521 s (549k push / s)

510000th push: 0.00000217 s
520000th push: 0.00000319 s
530000th push: 0.00000198 s
540000th push: 0.00000140 s
550000th push: 0.00000182 s
560000th push: 0.00000187 s
570000th push: 0.00000178 s
580000th push: 0.00000129 s
590000th push: 0.00000178 s
600000th push: 0.00000132 s
-------------
    100k push: 0.18156057 s (550k push / s)

610000th push: 0.00000221 s
620000th push: 0.00000156 s
630000th push: 0.00000218 s
640000th push: 0.00000172 s
650000th push: 0.00000172 s
660000th push: 0.00000224 s
670000th push: 0.00000354 s
680000th push: 0.00000132 s
690000th push: 0.00000181 s
700000th push: 0.00000176 s
-------------
    100k push: 0.17942042 s (557k push / s)

710000th push: 0.00000171 s
720000th push: 0.00000132 s
730000th push: 0.00000194 s
740000th push: 0.00000235 s
750000th push: 0.00000194 s
760000th push: 0.00000335 s
770000th push: 0.00000259 s
780000th push: 0.00000269 s
790000th push: 0.00000116 s
800000th push: 0.00000116 s
-------------
    100k push: 0.18297842 s (546k push / s)

810000th push: 0.00000233 s
820000th push: 0.00000146 s
830000th push: 0.00000273 s
840000th push: 0.00000198 s
850000th push: 0.00000225 s
860000th push: 0.00000303 s
870000th push: 0.00000142 s
880000th push: 0.00000181 s
890000th push: 0.00000217 s
900000th push: 0.00000134 s
-------------
    100k push: 0.18299261 s (546k push / s)

910000th push: 0.00000219 s
920000th push: 0.00000281 s
930000th push: 0.00000176 s
940000th push: 0.00000136 s
950000th push: 0.00000265 s
960000th push: 0.00000131 s
970000th push: 0.00000257 s
980000th push: 0.00000147 s
990000th push: 0.00000220 s
1000000th push: 0.00000185 s
-------------
    100k push: 0.18156067 s (550k push / s)

1010000th push: 0.00000133 s
1020000th push: 0.00000157 s
1030000th push: 0.00000130 s
1040000th push: 0.00000135 s
1050000th push: 0.00000133 s
1060000th push: 0.00000259 s
1070000th push: 0.00000398 s
1080000th push: 0.00000235 s
1090000th push: 0.00000227 s
1100000th push: 0.00000269 s
-------------
    100k push: 0.18317466 s (545k push / s)

1110000th push: 0.00000263 s
1120000th push: 0.00000223 s
1130000th push: 0.00000147 s
1140000th push: 0.00000179 s
1150000th push: 0.00000129 s
1160000th push: 0.00000138 s
1170000th push: 0.00000512 s
1180000th push: 0.00000185 s
1190000th push: 0.00000357 s
1200000th push: 0.00000133 s
-------------
    100k push: 0.18380331 s (544k push / s)

1210000th push: 0.00000112 s
1220000th push: 0.00000216 s
1230000th push: 0.00000123 s
1240000th push: 0.00000322 s
1250000th push: 0.00000254 s
1260000th push: 0.00000177 s
1270000th push: 0.00000160 s
1280000th push: 0.00000170 s
1290000th push: 0.00000223 s
1300000th push: 0.00000176 s
-------------
    100k push: 0.18131168 s (551k push / s)

1310000th push: 0.00000190 s
1320000th push: 0.00000272 s
1330000th push: 0.00000292 s
1340000th push: 0.00000124 s
1350000th push: 0.00000175 s
1360000th push: 0.00000184 s
1370000th push: 0.00000135 s
1380000th push: 0.00000148 s
1390000th push: 0.00000135 s
1400000th push: 0.00000295 s
-------------
    100k push: 0.18216201 s (548k push / s)

1410000th push: 0.00000297 s
1420000th push: 0.00000194 s
1430000th push: 0.00000331 s
1440000th push: 0.00000183 s
1450000th push: 0.00000203 s
1460000th push: 0.00001391 s
1470000th push: 0.00000133 s
1480000th push: 0.00000198 s
1490000th push: 0.00000137 s
1500000th push: 0.00000161 s
-------------
    100k push: 0.18715698 s (534k push / s)

1510000th push: 0.00000174 s
1520000th push: 0.00000115 s
1530000th push: 0.00000268 s
1540000th push: 0.00000170 s
1550000th push: 0.00000137 s
1560000th push: 0.00000263 s
1570000th push: 0.00000127 s
1580000th push: 0.00000173 s
1590000th push: 0.00000180 s
1600000th push: 0.00000152 s
-------------
    100k push: 0.18242522 s (548k push / s)

1610000th push: 0.00000376 s
1620000th push: 0.00000264 s
1630000th push: 0.00000299 s
1640000th push: 0.00000297 s
pushed 1646474 items in 3.0 s

still a heap with 1646490 items? YES - 1.643 sec

#
# display the results of TernaryHeap push and pop
#

push: 5 81 4 13 15 30 93 4 43 13 4 65 39 28 65 48 98 79 0 51 51 97 19 20 63 83 93 68 30 90
array: [98, 97, 93, 65, 65, 81, 93, 43, 83, 90, 4, 13, 39, 5, 28, 48, 15, 79, 0, 30, 51, 51, 4, 19, 20, 4, 63, 68, 13, 30]
heap: true
                                       98                                       
            97                        93                        65            
   65      81      93      43      83      90       4      13      39   
5 28 48 15 79 0 30 51 51 4 19 20 4 63 68 13 30 


pop: 98
array: [97, 93, 93, 65, 65, 81, 51, 43, 83, 90, 4, 13, 39, 5, 28, 48, 15, 79, 0, 30, 51, 30, 4, 19, 20, 4, 63, 68, 13]
heap: true
                                       97                                       
            93                        93                        65            
   65      81      51      43      83      90       4      13      39   
5 28 48 15 79 0 30 51 30 4 19 20 4 63 68 13 


pop: 97 93 93 90 83 81 79 68 65
array: [65, 51, 63, 39, 48, 20, 51, 43, 4, 13, 4, 13, 30, 5, 28, 4, 15, 19, 0, 30]
heap: true
                                       65                                       
            51                        63                        39            
   48      20      51      43       4      13       4      13      30   
5 28 4 15 19 0 30 


push: 93 12 67 88 25 79 90 22 76 8 35 91 62 94 0 94 31 29 18 87 10 96 75 71 75 41 71 9 53 10
array: [96, 94, 90, 94, 75, 20, 51, 67, 88, 76, 91, 93, 87, 65, 75, 71, 15, 19, 0, 30, 51, 12, 43, 63, 25, 4, 79, 22, 13, 8, 35, 4, 39, 62, 0, 13, 31, 29, 18, 30, 5, 10, 48, 28, 71, 41, 4, 9, 53, 10]
heap: true
                                       96                                       
            94                        90                        94            
   75      20      51      67      88      76      91      93      87   
65 75 71 15 19 0 30 51 12 43 63 25 4 79 22 13 8 35 4 39 62 0 13 31 29 18 30 
5 10 48 28 71 41 4 9 53 10 


