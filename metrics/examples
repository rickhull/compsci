Run options: --seed 32980

# Running:

............................................................S..S.....

Finished in 0.319119s, 216.2200 runs/s, 3108.5538 assertions/s.

69 runs, 992 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.10 0.03 0.01 1/80 2335

#
# Try out Binary-, Ternary-, and QuaternaryTree
#

[45, 22, 65, 21, 38, 84, 15, 10, 10, 28, 72, 97, 72, 24, 15, 10, 43, 14, 71, 33, 50, 65, 71, 28, 7, 10, 55, 74, 12, 42]
#<CompSci::BinaryTree:0x0055f47ffcc5c8 @root=#<CompSci::ChildNode:0x2afa3ffe62d0i @value=45 @children=[22, 65]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2afa3ffe5d80i @value=15 @children=[42]>>
                                        45                                      
                    22                                      65                  
          21                  38                  84                  15        
     10        10        28        72        97        72        24        15   
   10   43   14   71   33   50   65   71   28   7    10   55   74   12   42

df_search visited: 45 22 21 10 10 43 10 14 71 38 28 33 50 72 65 71 65 84 97 28 7 72 10 55 15 24 74 12 15 42


push: [65, 68, 73, 41, 5, 50, 44, 11, 73, 82, 97, 0, 8, 53, 26, 41, 96, 66, 40, 43, 50, 54, 52, 58, 77, 33, 28, 5, 78, 25]

                                        45                                      
                    22                                      65                  
          21                  38                  84                  15        
     10        10        28        72        97        72        24        15   
   10   43   14   71   33   50   65   71   28   7    10   55   74   12   42   65
687341 5504411738297 0 85326419666404350545258773328 57825


[45, 22, 65, 21, 38, 84, 15, 10, 10, 28, 72, 97, 72, 24, 15, 10, 43, 14, 71, 33, 50, 65, 71, 28, 7, 10, 55, 74, 12, 42]
#<CompSci::TernaryTree:0x0055f47ff7c168 @root=#<CompSci::ChildNode:0x2afa3ffbdfc4i @value=45 @children=[22, 65, 21]>, @child_slots=3, @open_parent=#<CompSci::ChildNode:0x2afa3ffbdcf4i @value=28 @children=[12, 42]>>
                                       45                                       
            22                        65                        21            
   38      84      15      10      10      28      72      97      72   
24 15 10 43 14 71 33 50 65 71 28 7 10 55 74 12 42 

df_search visited: 45 22 38 24 15 10 84 43 14 71 15 33 50 65 65 10 71 28 7 10 10 55 74 28 12 42 21 72 97 72


push: [80, 87, 67, 0, 82, 46, 58, 35, 9, 80, 88, 88, 38, 23, 11, 13, 73, 16, 32, 25, 70, 38, 28, 76, 78, 49, 19, 3, 18, 35]

                                       45                                       
            22                        65                        21            
   38      84      15      10      10      28      72      97      72   
24 15 10 43 14 71 33 50 65 71 28 7 10 55 74 12 42 80 87 67 0 82 46 58 35 9 80 
88 88 38 23 11 13 73 16 32 25 70 38 28 76 78 49 19 3 18 35 


[45, 22, 65, 21, 38, 84, 15, 10, 10, 28, 72, 97, 72, 24, 15, 10, 43, 14, 71, 33, 50, 65, 71, 28, 7, 10, 55, 74, 12, 42]
#<CompSci::QuaternaryTree:0x0055f47ff6bc78 @root=#<CompSci::ChildNode:0x2afa3ffb5e28i @value=45 @children=[22, 65, 21, 38]>, @child_slots=4, @open_parent=#<CompSci::ChildNode:0x2afa3ffb5b44i @value=10 @children=[42]>>
                                       45                                       
         22                  65                  21                  38         
  84   15   10   10   28   72   97   72   24   15   10   43   14   71   33   50 
65 71 28 7 10 55 74 12 42 

df_search visited: 45 22 84 65 71 28 7 15 10 55 74 12 10 42 10 65 28 72 97 72 21 24 15 10 43 38 14 71 33 50


push: [94, 76, 23, 65, 76, 32, 57, 79, 47, 76, 52, 68, 81, 15, 72, 51, 96, 61, 89, 54, 88, 51, 89, 11, 95, 88, 46, 20, 12, 55]

                                       45                                       
         22                  65                  21                  38         
  84   15   10   10   28   72   97   72   24   15   10   43   14   71   33   50 
65 71 28 7 10 55 74 12 42 94 76 23 65 76 32 57 79 47 76 52 68 81 15 72 51 96 61 89 54 88 51 89 11 95 88 46 20 12 55 


ruby -Ilib examples/complete_tree.rb


#
# Print CompleteBinary-, Ternary-, and QuaternaryTree
#

[34, 94, 46, 34, 25, 2, 9, 23, 2, 68, 47, 7, 7, 86, 74, 73, 35, 37, 92, 46, 28, 96, 32, 7, 82, 55, 1, 94, 18, 89]
#<CompSci::CompleteBinaryTree:0x005600f9288318 @array=[34, 94, 46, 34, 25, 2, 9, 23, 2, 68, 47, 7, 7, 86, 74, 73, 35, 37, 92, 46, 28, 96, 32, 7, 82, 55, 1, 94, 18, 89], @child_slots=2>
                                       34                                       
                   94                                      46                   
         34                  25                   2                   9         
    23         2        68        47         7         7        86        74    
  73   35   37   92   46   28   96   32   7    82   55   1    94   18   89 



push: [52, 67, 62, 22, 46, 27, 24, 15, 40, 28, 1, 55, 32, 21, 32, 84, 62, 69, 40, 56, 12, 82, 2, 89, 59, 62, 62, 85, 29, 66]
                                       34                                       
                   94                                      46                   
         34                  25                   2                   9         
    23         2        68        47         7         7        86        74    
  73   35   37   92   46   28   96   32   7    82   55   1    94   18   89   52 
67 62 22 46 27 24 15 40 28 1 55 32 21 32 84 62 69 40 56 12 82 2 89 59 62 62 85 29 66 



[34, 94, 46, 34, 25, 2, 9, 23, 2, 68, 47, 7, 7, 86, 74, 73, 35, 37, 92, 46, 28, 96, 32, 7, 82, 55, 1, 94, 18, 89]
#<CompSci::CompleteTernaryTree:0x005600f927f998 @array=[34, 94, 46, 34, 25, 2, 9, 23, 2, 68, 47, 7, 7, 86, 74, 73, 35, 37, 92, 46, 28, 96, 32, 7, 82, 55, 1, 94, 18, 89], @child_slots=3>
                                       34                                       
            94                        46                        34            
   25       2       9      23       2      68      47       7       7   
86 74 73 35 37 92 46 28 96 32 7 82 55 1 94 18 89 



push: [38, 96, 43, 50, 21, 54, 5, 2, 4, 43, 88, 9, 13, 4, 96, 69, 68, 6, 21, 20, 78, 20, 80, 66, 32, 91, 17, 39, 26, 95]
                                       34                                       
            94                        46                        34            
   25       2       9      23       2      68      47       7       7   
86 74 73 35 37 92 46 28 96 32 7 82 55 1 94 18 89 38 96 43 50 21 54 5 2 4 43 
88 9 13 4 96 69 68 6 21 20 78 20 80 66 32 91 17 39 26 95 



[34, 94, 46, 34, 25, 2, 9, 23, 2, 68, 47, 7, 7, 86, 74, 73, 35, 37, 92, 46, 28, 96, 32, 7, 82, 55, 1, 94, 18, 89]
#<CompSci::CompleteQuaternaryTree:0x005600f917d888 @array=[34, 94, 46, 34, 25, 2, 9, 23, 2, 68, 47, 7, 7, 86, 74, 73, 35, 37, 92, 46, 28, 96, 32, 7, 82, 55, 1, 94, 18, 89], @child_slots=4>
                                       34                                       
         94                  46                  34                  25         
  2    9    23   2    68   47   7    7    86   74   73   35   37   92   46   28 
96 32 7 82 55 1 94 18 89 



push: [8, 91, 90, 34, 64, 49, 55, 6, 98, 18, 33, 39, 90, 59, 56, 96, 26, 58, 35, 33, 82, 70, 46, 88, 47, 79, 19, 44, 74, 33]
                                       34                                       
         94                  46                  34                  25         
  2    9    23   2    68   47   7    7    86   74   73   35   37   92   46   28 
96 32 7 82 55 1 94 18 89 8 91 90 34 64 49 55 6 98 18 33 39 90 59 56 96 26 58 35 33 82 70 46 88 47 79 19 44 74 33 



ruby -Ilib examples/binary_tree.rb


#
# 3 seconds worth of pushes
#

100th push: 0.00000252 s
200th push: 0.00000225 s
300th push: 0.00000219 s
400th push: 0.00000244 s
500th push: 0.00000255 s
600th push: 0.00000310 s
700th push: 0.00000301 s
800th push: 0.00000301 s
900th push: 0.00000302 s
1000th push: 0.00000341 s
-----------
    1k push: 0.0535 s (18686 push / s)

1100th push: 0.00000300 s
1200th push: 0.00000322 s
1300th push: 0.00000329 s
1400th push: 0.00000314 s
1500th push: 0.00000353 s
1600th push: 0.00000344 s
1700th push: 0.00000352 s
1800th push: 0.00000355 s
1900th push: 0.00000363 s
2000th push: 0.00000390 s
-----------
    1k push: 0.1972 s (5072 push / s)

2100th push: 0.00000436 s
2200th push: 0.00000456 s
2300th push: 0.00000485 s
2400th push: 0.00000477 s
2500th push: 0.00000544 s
2600th push: 0.00000566 s
2700th push: 0.00000556 s
2800th push: 0.00000606 s
2900th push: 0.00000557 s
3000th push: 0.00000582 s
-----------
    1k push: 0.4210 s (2375 push / s)

3100th push: 0.00000585 s
3200th push: 0.00000546 s
3300th push: 0.00001448 s
3400th push: 0.00000575 s
3500th push: 0.00000589 s
3600th push: 0.00000555 s
3700th push: 0.00000577 s
3800th push: 0.00001215 s
3900th push: 0.00000703 s
4000th push: 0.00000598 s
-----------
    1k push: 0.6996 s (1429 push / s)

4100th push: 0.00000607 s
4200th push: 0.00000605 s
4300th push: 0.00000625 s
4400th push: 0.00000582 s
4500th push: 0.00000585 s
4600th push: 0.00000570 s
4700th push: 0.00001495 s
4800th push: 0.00000716 s
4900th push: 0.00000648 s
5000th push: 0.00000613 s
-----------
    1k push: 1.0713 s (933 push / s)

5100th push: 0.00000596 s
5200th push: 0.00000576 s
5300th push: 0.00000608 s
pushed 5379 items in 3.0 s

#
# 30 inserts, puts, df_search
#

[32, 53, 19, 41, 78, 48, 29, 82, 26, 97, 94, 25, 30, 58, 27, 4, 39, 36, 79, 20, 75, 38, 80, 42, 97, 75, 98, 92, 20, 29]
                                       32                                       
                   53                                      19                   
         41                  78                  48                  29         
    82        26        97        94        25        30        58        27    
  4    39   36   79   20   75   38   80   42   97   75   98   92   20   29 
#<CompSci::NaryTree:0x005640b1f785a8 @root=#<CompSci::ChildNode:0x2b2058fbc220i @value=32 @children=[53, 19]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2b2058fbb6a4i @value=27 @children=[29]>>

visited 32
visited 53
visited 41
visited 82
visited 4
visited 39
visited 26
visited 36
visited 79
visited 78
visited 97
visited 20
visited 75
visited 94
visited 38
visited 80
visited 19
visited 48
visited 25
visited 42
visited 97
visited 30
visited 75
visited 98
visited 29
visited 58
visited 92
visited 20
visited 27
visited 29

push: [75, 3, 3, 25, 67, 38, 21, 11, 77, 55, 89, 24, 38, 53, 52, 19, 34, 3, 75, 67, 43, 63, 18, 96, 70, 63, 4, 80, 5, 77]
                                       32                                       
                   53                                      19                   
         41                  78                  48                  29         
    82        26        97        94        25        30        58        27    
  4    39   36   79   20   75   38   80   42   97   75   98   92   20   29   75 
3 3 25 67 38 21 11 77 55 89 24 38 53 52 19 34 3 75 67 43 63 18 96 70 63 4 80 5 77 

ruby -Ilib examples/heap.rb


#
# 3 seconds worth of pushes
#

10000th push: 0.00000345 s
20000th push: 0.00000149 s
30000th push: 0.00000144 s
40000th push: 0.00000252 s
50000th push: 0.00000193 s
60000th push: 0.00000249 s
70000th push: 0.00000193 s
80000th push: 0.00000199 s
90000th push: 0.00000145 s
100000th push: 0.00000345 s
-------------
    100k push: 0.18493115 s (540k push / s)

110000th push: 0.00000339 s
120000th push: 0.00000245 s
130000th push: 0.00000259 s
140000th push: 0.00000150 s
150000th push: 0.00000162 s
160000th push: 0.00000192 s
170000th push: 0.00000190 s
180000th push: 0.00000372 s
190000th push: 0.00000210 s
200000th push: 0.00000141 s
-------------
    100k push: 0.19086631 s (523k push / s)

210000th push: 0.00000204 s
220000th push: 0.00000203 s
230000th push: 0.00000200 s
240000th push: 0.00000332 s
250000th push: 0.00000136 s
260000th push: 0.00000243 s
270000th push: 0.00000147 s
280000th push: 0.00000198 s
290000th push: 0.00000275 s
300000th push: 0.00000242 s
-------------
    100k push: 0.18251070 s (547k push / s)

310000th push: 0.00000374 s
320000th push: 0.00000146 s
330000th push: 0.00000160 s
340000th push: 0.00000211 s
350000th push: 0.00000148 s
360000th push: 0.00000142 s
370000th push: 0.00000150 s
380000th push: 0.00007088 s
390000th push: 0.00000148 s
400000th push: 0.00000152 s
-------------
    100k push: 0.19161006 s (521k push / s)

410000th push: 0.00000146 s
420000th push: 0.00000244 s
430000th push: 0.00000196 s
440000th push: 0.00000241 s
450000th push: 0.00000206 s
460000th push: 0.00000147 s
470000th push: 0.00000143 s
480000th push: 0.00000146 s
490000th push: 0.00000277 s
500000th push: 0.00000196 s
-------------
    100k push: 0.20850429 s (479k push / s)

510000th push: 0.00000292 s
520000th push: 0.00000240 s
530000th push: 0.00000150 s
540000th push: 0.00000142 s
550000th push: 0.00000145 s
560000th push: 0.00000143 s
570000th push: 0.00000150 s
580000th push: 0.00000197 s
590000th push: 0.00000191 s
600000th push: 0.00000147 s
-------------
    100k push: 0.20636912 s (484k push / s)

610000th push: 0.00000279 s
620000th push: 0.00000229 s
630000th push: 0.00000342 s
640000th push: 0.00000165 s
650000th push: 0.00000292 s
660000th push: 0.00000154 s
670000th push: 0.00000140 s
680000th push: 0.00000176 s
690000th push: 0.00000253 s
700000th push: 0.00000205 s
-------------
    100k push: 0.19273562 s (518k push / s)

710000th push: 0.00000157 s
720000th push: 0.00000155 s
730000th push: 0.00000203 s
740000th push: 0.00000157 s
750000th push: 0.00000949 s
760000th push: 0.00000197 s
770000th push: 0.00000147 s
780000th push: 0.00000555 s
790000th push: 0.00000202 s
800000th push: 0.00000205 s
-------------
    100k push: 0.20193883 s (495k push / s)

810000th push: 0.00000189 s
820000th push: 0.00000257 s
830000th push: 0.00000238 s
840000th push: 0.00000140 s
850000th push: 0.00000280 s
860000th push: 0.00000284 s
870000th push: 0.00000190 s
880000th push: 0.00000142 s
890000th push: 0.00000198 s
900000th push: 0.00000205 s
-------------
    100k push: 0.18240203 s (548k push / s)

910000th push: 0.00000144 s
920000th push: 0.00000230 s
930000th push: 0.00000148 s
940000th push: 0.00000117 s
950000th push: 0.00000138 s
960000th push: 0.00000191 s
970000th push: 0.00000243 s
980000th push: 0.00000196 s
990000th push: 0.00000941 s
1000000th push: 0.00000142 s
-------------
    100k push: 0.18351669 s (544k push / s)

1010000th push: 0.00000254 s
1020000th push: 0.00000136 s
1030000th push: 0.00000247 s
1040000th push: 0.00000330 s
1050000th push: 0.00000120 s
1060000th push: 0.00000141 s
1070000th push: 0.00000137 s
1080000th push: 0.00000195 s
1090000th push: 0.00000144 s
1100000th push: 0.00000243 s
-------------
    100k push: 0.18475283 s (541k push / s)

1110000th push: 0.00000139 s
1120000th push: 0.00000189 s
1130000th push: 0.00000150 s
1140000th push: 0.00000258 s
1150000th push: 0.00000145 s
1160000th push: 0.00000176 s
1170000th push: 0.00000142 s
1180000th push: 0.00000194 s
1190000th push: 0.00000153 s
1200000th push: 0.00000285 s
-------------
    100k push: 0.18516603 s (540k push / s)

1210000th push: 0.00000235 s
1220000th push: 0.00000375 s
1230000th push: 0.00000155 s
1240000th push: 0.00000141 s
1250000th push: 0.00000480 s
1260000th push: 0.00000227 s
1270000th push: 0.00000192 s
1280000th push: 0.00000288 s
1290000th push: 0.00000153 s
1300000th push: 0.00000228 s
-------------
    100k push: 0.18736863 s (533k push / s)

1310000th push: 0.00000140 s
1320000th push: 0.00000137 s
1330000th push: 0.00000210 s
1340000th push: 0.00000137 s
1350000th push: 0.00000215 s
1360000th push: 0.00000152 s
1370000th push: 0.00000306 s
1380000th push: 0.00000283 s
1390000th push: 0.00000198 s
1400000th push: 0.00000236 s
-------------
    100k push: 0.18620591 s (537k push / s)

1410000th push: 0.00000135 s
1420000th push: 0.00000198 s
1430000th push: 0.00000278 s
1440000th push: 0.00000194 s
1450000th push: 0.00000203 s
1460000th push: 0.00001393 s
1470000th push: 0.00000205 s
1480000th push: 0.00000138 s
1490000th push: 0.00000143 s
1500000th push: 0.00000135 s
-------------
    100k push: 0.18695108 s (534k push / s)

1510000th push: 0.00000184 s
1520000th push: 0.00000614 s
1530000th push: 0.00000141 s
1540000th push: 0.00000294 s
1550000th push: 0.00000199 s
1560000th push: 0.00000876 s
1570000th push: 0.00000134 s
pushed 1577943 items in 3.0 s

still a heap with 1577958 items? YES - 1.633 sec

#
# display the results of TernaryHeap push and pop
#

push: 32 65 86 88 93 86 40 73 66 87 52 1 10 92 31 61 39 22 40 45 3 79 29 2 28 5 42 32 1 63
array: [93, 92, 87, 86, 88, 86, 79, 65, 66, 73, 52, 1, 10, 32, 31, 61, 39, 22, 40, 40, 3, 45, 29, 2, 28, 5, 42, 32, 1, 63]
heap: true
                                       93                                       
            92                        87                        86            
   88      86      79      65      66      73      52       1      10   
32 31 61 39 22 40 40 3 45 29 2 28 5 42 32 1 63 


pop: 93
array: [92, 88, 87, 86, 63, 86, 79, 65, 66, 73, 52, 1, 10, 32, 31, 61, 39, 22, 40, 40, 3, 45, 29, 2, 28, 5, 42, 32, 1]
heap: true
                                       92                                       
            88                        87                        86            
   63      86      79      65      66      73      52       1      10   
32 31 61 39 22 40 40 3 45 29 2 28 5 42 32 1 


pop: 92 88 87 86 86 79 73 66 65
array: [63, 61, 32, 52, 32, 40, 45, 29, 2, 5, 42, 1, 10, 3, 31, 28, 39, 22, 1, 40]
heap: true
                                       63                                       
            61                        32                        52            
   32      40      45      29       2       5      42       1      10   
3 31 28 39 22 1 40 


push: 39 15 25 9 68 30 31 92 43 6 69 98 68 23 42 50 85 41 8 49 58 41 42 62 29 97 67 57 70 35
array: [98, 97, 69, 92, 70, 40, 45, 32, 63, 68, 68, 85, 49, 42, 61, 67, 39, 22, 1, 40, 39, 15, 25, 9, 29, 2, 30, 31, 5, 6, 43, 42, 52, 23, 1, 42, 50, 10, 8, 41, 3, 32, 41, 31, 29, 58, 28, 57, 62, 35]
heap: true
                                       98                                       
            97                        69                        92            
   70      40      45      32      63      68      68      85      49   
42 61 67 39 22 1 40 39 15 25 9 29 2 30 31 5 6 43 42 52 23 1 42 50 10 8 41 
3 32 41 31 29 58 28 57 62 35 


