Run options: --seed 3263

# Running:

.....................................SS.........................................................

Finished in 0.328225s, 292.4820 runs/s, 3135.0418 assertions/s.

96 runs, 1029 assertions, 0 failures, 0 errors, 2 skips

You have skipped tests. Run with --verbose for details.
ruby -Ilib examples/tree.rb
/proc/loadavg 0.41 0.13 0.05 1/77 4377

#
# Try out Binary-, Ternary-, and QuaternaryTree
#

[30, 2, 24, 71, 34, 46, 64, 6, 6, 96, 31, 48, 7, 54, 54, 59, 45, 5, 42, 43, 94, 85, 85, 30, 56, 78, 91, 49, 5, 0]
#<CompSci::BinaryTree:0x0056190f594358 @root=#<CompSci::ChildNode:0x2b0c87aca184i @value=30 @children=[2, 24]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2b0c87ac9c34i @value=54 @children=[0]>>
                                       30                                       
                    2                                      24                   
         71                  34                  46                  64         
     6         6        96        31        48         7        54        54    
  59   45   5    42   43   94   85   85   30   56   78   91   49   5    0  

df_search visited: 30 2 71 6 59 45 6 5 42 34 96 43 94 31 85 85 24 46 48 30 56 7 78 91 64 54 49 5 54 0


push: [11, 56, 5, 9, 26, 9, 93, 79, 96, 39, 31, 33, 69, 60, 77, 39, 32, 68, 10, 63, 82, 45, 82, 32, 40, 24, 17, 6, 6, 54]

                                       30                                       
                    2                                      24                   
         71                  34                  46                  64         
     6         6        96        31        48         7        54        54    
  59   45   5    42   43   94   85   85   30   56   78   91   49   5    0    11 
56 5 9 26 9 93 79 96 39 31 33 69 60 77 39 32 68 10 63 82 45 82 32 40 24 17 6 6 54 


[30, 2, 24, 71, 34, 46, 64, 6, 6, 96, 31, 48, 7, 54, 54, 59, 45, 5, 42, 43, 94, 85, 85, 30, 56, 78, 91, 49, 5, 0]
#<CompSci::TernaryTree:0x0056190f543cf0 @root=#<CompSci::ChildNode:0x2b0c87aa1e64i @value=30 @children=[2, 24, 71]>, @child_slots=3, @open_parent=#<CompSci::ChildNode:0x2b0c87aa1ba8i @value=96 @children=[5, 0]>>
                                       30                                       
             2                        24                        71            
   34      46      64       6       6      96      31      48       7   
54 54 59 45 5 42 43 94 85 85 30 56 78 91 49 5 0 

df_search visited: 30 2 34 54 54 59 46 45 5 42 64 43 94 85 24 6 85 30 56 6 78 91 49 96 5 0 71 31 48 7


push: [94, 79, 62, 44, 98, 59, 24, 2, 21, 52, 35, 33, 51, 67, 57, 17, 3, 34, 79, 34, 43, 73, 18, 13, 32, 87, 52, 70, 87, 15]

                                       30                                       
             2                        24                        71            
   34      46      64       6       6      96      31      48       7   
54 54 59 45 5 42 43 94 85 85 30 56 78 91 49 5 0 94 79 62 44 98 59 24 2 21 52 
35 33 51 67 57 17 3 34 79 34 43 73 18 13 32 87 52 70 87 15 


[30, 2, 24, 71, 34, 46, 64, 6, 6, 96, 31, 48, 7, 54, 54, 59, 45, 5, 42, 43, 94, 85, 85, 30, 56, 78, 91, 49, 5, 0]
#<CompSci::QuaternaryTree:0x0056190f533850 @root=#<CompSci::ChildNode:0x2b0c87a99beci @value=30 @children=[2, 24, 71, 34]>, @child_slots=4, @open_parent=#<CompSci::ChildNode:0x2b0c87a99930i @value=6 @children=[0]>>
                                       30                                       
          2                  24                  71                  34         
  46   64   6    6    96   31   48   7    54   54   59   45   5    42   43   94 
85 85 30 56 78 91 49 5 0 

df_search visited: 30 2 46 85 85 30 56 64 78 91 49 5 6 0 6 24 96 31 48 7 71 54 54 59 45 34 5 42 43 94


push: [64, 2, 78, 73, 28, 81, 85, 60, 78, 68, 13, 59, 29, 30, 28, 51, 89, 50, 97, 52, 46, 68, 83, 65, 31, 10, 47, 48, 85, 53]

                                       30                                       
          2                  24                  71                  34         
  46   64   6    6    96   31   48   7    54   54   59   45   5    42   43   94 
85 85 30 56 78 91 49 5 0 64 2 78 73 28 81 85 60 78 68 13 59 29 30 28 51 89 50 97 52 46 68 83 65 31 10 47 48 85 53 


ruby -Ilib examples/tree_insert.rb


#
# 3 seconds worth of pushes
#

100th push: 0.00000320 s
200th push: 0.00000233 s
300th push: 0.00000257 s
400th push: 0.00000247 s
500th push: 0.00000269 s
600th push: 0.00000286 s
700th push: 0.00000291 s
800th push: 0.00000302 s
900th push: 0.00000283 s
1000th push: 0.00001247 s
-----------
    1k push: 0.0553 s (18068 push / s)

1100th push: 0.00000310 s
1200th push: 0.00000322 s
1300th push: 0.00000313 s
1400th push: 0.00000314 s
1500th push: 0.00000287 s
1600th push: 0.00000317 s
1700th push: 0.00000351 s
1800th push: 0.00000401 s
1900th push: 0.00000331 s
2000th push: 0.00000446 s
-----------
    1k push: 0.2055 s (4865 push / s)

2100th push: 0.00000389 s
2200th push: 0.00000436 s
2300th push: 0.00000435 s
2400th push: 0.00000485 s
2500th push: 0.00000459 s
2600th push: 0.00000585 s
2700th push: 0.00000533 s
2800th push: 0.00000524 s
2900th push: 0.00000546 s
3000th push: 0.00000507 s
-----------
    1k push: 0.4355 s (2296 push / s)

3100th push: 0.00000743 s
3200th push: 0.00000545 s
3300th push: 0.00000554 s
3400th push: 0.00000510 s
3500th push: 0.00000555 s
3600th push: 0.00000545 s
3700th push: 0.00000686 s
3800th push: 0.00000749 s
3900th push: 0.00000528 s
4000th push: 0.00000500 s
-----------
    1k push: 0.7336 s (1363 push / s)

4100th push: 0.00000704 s
4200th push: 0.00000831 s
4300th push: 0.00000608 s
4400th push: 0.00000534 s
4500th push: 0.00000567 s
4600th push: 0.00000563 s
4700th push: 0.00000615 s
4800th push: 0.00000519 s
4900th push: 0.00000591 s
5000th push: 0.00002820 s
-----------
    1k push: 1.1282 s (886 push / s)

5100th push: 0.00000573 s
5200th push: 0.00000585 s
5300th push: 0.00002812 s
pushed 5311 items in 3.0 s

#
# 30 inserts, puts, df_search
#

[77, 88, 23, 52, 80, 76, 73, 4, 71, 9, 34, 40, 98, 70, 56, 22, 41, 75, 70, 0, 76, 2, 39, 54, 92, 90, 88, 23, 28, 7]
                                       77                                       
                   88                                      23                   
         52                  80                  76                  73         
     4        71         9        34        40        98        70        56    
  22   41   75   70   0    76   2    39   54   92   90   88   23   28   7  
#<CompSci::BinaryTree:0x00559718a8c6e0 @root=#<CompSci::ChildNode:0x2acb8c54635ci @value=77 @children=[88, 23]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2acb8c545b28i @value=56 @children=[7]>>

visited 77
visited 88
visited 52
visited 4
visited 22
visited 41
visited 71
visited 75
visited 70
visited 80
visited 9
visited 0
visited 76
visited 34
visited 2
visited 39
visited 23
visited 76
visited 40
visited 54
visited 92
visited 98
visited 90
visited 88
visited 73
visited 70
visited 23
visited 28
visited 56
visited 7

push: [51, 9, 72, 95, 88, 23, 7, 44, 90, 8, 62, 70, 31, 31, 78, 81, 84, 40, 15, 37, 96, 84, 64, 45, 3, 9, 15, 91, 78, 71]
                                       77                                       
                   88                                      23                   
         52                  80                  76                  73         
     4        71         9        34        40        98        70        56    
  22   41   75   70   0    76   2    39   54   92   90   88   23   28   7    51 
9 72 95 88 23 7 44 90 8 62 70 31 31 78 81 84 40 15 37 96 84 64 45 3 9 15 91 78 71 

ruby -Ilib examples/complete_tree.rb


#
# Print CompleteBinary-, Ternary-, and QuaternaryTree
#

[27, 73, 45, 49, 38, 69, 0, 6, 80, 35, 72, 83, 93, 38, 10, 80, 74, 7, 28, 89, 5, 38, 96, 17, 42, 0, 79, 83, 8, 92]
#<CompSci::CompleteBinaryTree:0x005612eac1c200 @array=[27, 73, 45, 49, 38, 69, 0, 6, 80, 35, 72, 83, 93, 38, 10, 80, 74, 7, 28, 89, 5, 38, 96, 17, 42, 0, 79, 83, 8, 92], @child_slots=2>
                                       27                                       
                   73                                      45                   
         49                  38                  69                   0         
     6        80        35        72        83        93        38        10    
  80   74   7    28   89   5    38   96   17   42   0    79   83   8    92 



push: [96, 6, 4, 43, 92, 3, 32, 51, 30, 64, 63, 65, 66, 10, 45, 40, 96, 14, 43, 62, 19, 92, 55, 96, 33, 91, 2, 53, 96, 18]
                                       27                                       
                   73                                      45                   
         49                  38                  69                   0         
     6        80        35        72        83        93        38        10    
  80   74   7    28   89   5    38   96   17   42   0    79   83   8    92   96 
6 4 43 92 3 32 51 30 64 63 65 66 10 45 40 96 14 43 62 19 92 55 96 33 91 2 53 96 18 



[27, 73, 45, 49, 38, 69, 0, 6, 80, 35, 72, 83, 93, 38, 10, 80, 74, 7, 28, 89, 5, 38, 96, 17, 42, 0, 79, 83, 8, 92]
#<CompSci::CompleteTernaryTree:0x005612eac138d0 @array=[27, 73, 45, 49, 38, 69, 0, 6, 80, 35, 72, 83, 93, 38, 10, 80, 74, 7, 28, 89, 5, 38, 96, 17, 42, 0, 79, 83, 8, 92], @child_slots=3>
                                       27                                       
            73                        45                        49            
   38      69       0       6      80      35      72      83      93   
38 10 80 74 7 28 89 5 38 96 17 42 0 79 83 8 92 



push: [78, 76, 40, 61, 14, 6, 16, 2, 76, 53, 8, 76, 20, 91, 82, 23, 14, 83, 20, 44, 75, 93, 28, 53, 89, 78, 31, 72, 69, 65]
                                       27                                       
            73                        45                        49            
   38      69       0       6      80      35      72      83      93   
38 10 80 74 7 28 89 5 38 96 17 42 0 79 83 8 92 78 76 40 61 14 6 16 2 76 53 
8 76 20 91 82 23 14 83 20 44 75 93 28 53 89 78 31 72 69 65 



[27, 73, 45, 49, 38, 69, 0, 6, 80, 35, 72, 83, 93, 38, 10, 80, 74, 7, 28, 89, 5, 38, 96, 17, 42, 0, 79, 83, 8, 92]
#<CompSci::CompleteQuaternaryTree:0x005612eab11680 @array=[27, 73, 45, 49, 38, 69, 0, 6, 80, 35, 72, 83, 93, 38, 10, 80, 74, 7, 28, 89, 5, 38, 96, 17, 42, 0, 79, 83, 8, 92], @child_slots=4>
                                       27                                       
         73                  45                  49                  38         
  69   0    6    80   35   72   83   93   38   10   80   74   7    28   89   5  
38 96 17 42 0 79 83 8 92 



push: [76, 39, 25, 63, 57, 34, 52, 31, 18, 18, 23, 8, 13, 73, 33, 93, 35, 94, 39, 59, 73, 82, 81, 28, 45, 75, 4, 47, 50, 56]
                                       27                                       
         73                  45                  49                  38         
  69   0    6    80   35   72   83   93   38   10   80   74   7    28   89   5  
38 96 17 42 0 79 83 8 92 76 39 25 63 57 34 52 31 18 18 23 8 13 73 33 93 35 94 39 59 73 82 81 28 45 75 4 47 50 56 



ruby -Ilib examples/heap.rb


#
# display the results of TernaryHeap push and pop
#

push: 25 94 36 3 54 80 23 55 16 11 90 82 59 29 42 71 6 41 7 71 39 83 95 92 87 16 55 94 56 88
array: [95, 83, 94, 90, 71, 54, 80, 92, 94, 88, 3, 82, 59, 25, 29, 42, 6, 41, 7, 23, 39, 71, 36, 55, 87, 16, 16, 55, 11, 56]
heap: true
                                       95                                       
            83                        94                        90            
   71      54      80      92      94      88       3      82      59   
25 29 42 6 41 7 23 39 71 36 55 87 16 16 55 11 56 


pop: 95
array: [94, 83, 94, 90, 71, 54, 80, 92, 56, 88, 3, 82, 59, 25, 29, 42, 6, 41, 7, 23, 39, 71, 36, 55, 87, 16, 16, 55, 11]
heap: true
                                       94                                       
            83                        94                        90            
   71      54      80      92      56      88       3      82      59   
25 29 42 6 41 7 23 39 71 36 55 87 16 16 55 11 


pop: 94 94 92 90 88 87 83 82 80
array: [71, 71, 56, 59, 42, 54, 39, 55, 11, 55, 3, 16, 36, 25, 29, 16, 6, 41, 7, 23]
heap: true
                                       71                                       
            71                        56                        59            
   42      54      39      55      11      55       3      16      36   
25 29 16 6 41 7 23 


push: 16 97 16 66 34 74 20 35 11 56 58 3 76 74 72 3 79 25 64 77 79 32 94 20 17 59 75 39 55 37
array: [97, 94, 74, 79, 79, 54, 71, 56, 66, 58, 74, 76, 77, 71, 59, 75, 37, 41, 7, 23, 16, 39, 16, 55, 34, 11, 20, 35, 11, 55, 56, 3, 3, 59, 16, 3, 72, 25, 36, 64, 25, 32, 42, 20, 17, 29, 16, 39, 55, 6]
heap: true
                                       97                                       
            94                        74                        79            
   79      54      71      56      66      58      74      76      77   
71 59 75 37 41 7 23 16 39 16 55 34 11 20 35 11 55 56 3 3 59 16 3 72 25 36 64 
25 32 42 20 17 29 16 39 55 6 

ruby -Ilib examples/heap_insert.rb


#
# 3 seconds worth of pushes
#

10000th push: 0.00000338 s
20000th push: 0.00000306 s
30000th push: 0.00000279 s
40000th push: 0.00000135 s
50000th push: 0.00000241 s
60000th push: 0.00000345 s
70000th push: 0.00000321 s
80000th push: 0.00000209 s
90000th push: 0.00000235 s
100000th push: 0.00000272 s
-------------
    100k push: 0.19112479 s (523k push / s)

110000th push: 0.00000238 s
120000th push: 0.00000231 s
130000th push: 0.00000191 s
140000th push: 0.00000411 s
150000th push: 0.00000236 s
160000th push: 0.00000165 s
170000th push: 0.00000134 s
180000th push: 0.00000135 s
190000th push: 0.00000218 s
200000th push: 0.00000186 s
-------------
    100k push: 0.18825907 s (531k push / s)

210000th push: 0.00000271 s
220000th push: 0.00000225 s
230000th push: 0.00000205 s
240000th push: 0.00000131 s
250000th push: 0.00000186 s
260000th push: 0.00000192 s
270000th push: 0.00000164 s
280000th push: 0.00000273 s
290000th push: 0.00000205 s
300000th push: 0.00000189 s
-------------
    100k push: 0.18285982 s (546k push / s)

310000th push: 0.00000239 s
320000th push: 0.00000201 s
330000th push: 0.00000208 s
340000th push: 0.00000168 s
350000th push: 0.00000218 s
360000th push: 0.00000292 s
370000th push: 0.00000157 s
380000th push: 0.00000248 s
390000th push: 0.00000195 s
400000th push: 0.00000154 s
-------------
    100k push: 0.19235480 s (519k push / s)

410000th push: 0.00000419 s
420000th push: 0.00000184 s
430000th push: 0.00000244 s
440000th push: 0.00000194 s
450000th push: 0.00000321 s
460000th push: 0.00000330 s
470000th push: 0.00000166 s
480000th push: 0.00000131 s
490000th push: 0.00000262 s
500000th push: 0.00000290 s
-------------
    100k push: 0.19202019 s (520k push / s)

510000th push: 0.00000190 s
520000th push: 0.00000132 s
530000th push: 0.00000224 s
540000th push: 0.00000131 s
550000th push: 0.00000286 s
560000th push: 0.00000431 s
570000th push: 0.00000437 s
580000th push: 0.00000252 s
590000th push: 0.00000211 s
600000th push: 0.00000378 s
-------------
    100k push: 0.18988794 s (526k push / s)

610000th push: 0.00000184 s
620000th push: 0.00000228 s
630000th push: 0.00000253 s
640000th push: 0.00000121 s
650000th push: 0.00000121 s
660000th push: 0.00000165 s
670000th push: 0.00000206 s
680000th push: 0.00000180 s
690000th push: 0.00000179 s
700000th push: 0.00000136 s
-------------
    100k push: 0.18632166 s (536k push / s)

710000th push: 0.00000211 s
720000th push: 0.00000188 s
730000th push: 0.00000151 s
740000th push: 0.00000225 s
750000th push: 0.00000183 s
760000th push: 0.00000179 s
770000th push: 0.00000126 s
780000th push: 0.00000178 s
790000th push: 0.00000137 s
800000th push: 0.00000527 s
-------------
    100k push: 0.19035277 s (525k push / s)

810000th push: 0.00000145 s
820000th push: 0.00000286 s
830000th push: 0.00000236 s
840000th push: 0.00000347 s
850000th push: 0.00000459 s
860000th push: 0.00000172 s
870000th push: 0.00000232 s
880000th push: 0.00000139 s
890000th push: 0.00000235 s
900000th push: 0.00000264 s
-------------
    100k push: 0.19204452 s (520k push / s)

910000th push: 0.00000182 s
920000th push: 0.00000183 s
930000th push: 0.00000136 s
940000th push: 0.00000336 s
950000th push: 0.00000233 s
960000th push: 0.00000217 s
970000th push: 0.00000131 s
980000th push: 0.00000275 s
990000th push: 0.00000176 s
1000000th push: 0.00000151 s
-------------
    100k push: 0.19062751 s (524k push / s)

1010000th push: 0.00000622 s
1020000th push: 0.00000289 s
1030000th push: 0.00000177 s
1040000th push: 0.00000299 s
1050000th push: 0.00000132 s
1060000th push: 0.00000131 s
1070000th push: 0.00000205 s
1080000th push: 0.00000267 s
1090000th push: 0.00000264 s
1100000th push: 0.00000343 s
-------------
    100k push: 0.18512920 s (540k push / s)

1110000th push: 0.00000221 s
1120000th push: 0.00000238 s
1130000th push: 0.00000202 s
1140000th push: 0.00000127 s
1150000th push: 0.00000178 s
1160000th push: 0.00000142 s
1170000th push: 0.00000126 s
1180000th push: 0.00000131 s
1190000th push: 0.00000187 s
1200000th push: 0.00000170 s
-------------
    100k push: 0.19092332 s (523k push / s)

1210000th push: 0.00001042 s
1220000th push: 0.00000156 s
1230000th push: 0.00000216 s
1240000th push: 0.00000132 s
1250000th push: 0.00000226 s
1260000th push: 0.00000227 s
1270000th push: 0.00000192 s
1280000th push: 0.00000187 s
1290000th push: 0.00000185 s
1300000th push: 0.00000241 s
-------------
    100k push: 0.18984049 s (526k push / s)

1310000th push: 0.00000190 s
1320000th push: 0.00000124 s
1330000th push: 0.00000172 s
1340000th push: 0.00000888 s
1350000th push: 0.00000190 s
1360000th push: 0.00000196 s
1370000th push: 0.00000175 s
1380000th push: 0.00000287 s
1390000th push: 0.00000190 s
1400000th push: 0.00000211 s
-------------
    100k push: 0.19098941 s (523k push / s)

1410000th push: 0.00000223 s
1420000th push: 0.00000249 s
1430000th push: 0.00000142 s
1440000th push: 0.00000130 s
1450000th push: 0.00000188 s
1460000th push: 0.00001738 s
1470000th push: 0.00000271 s
1480000th push: 0.00000201 s
1490000th push: 0.00000133 s
1500000th push: 0.00000187 s
-------------
    100k push: 0.18912811 s (528k push / s)

1510000th push: 0.00000179 s
1520000th push: 0.00000181 s
1530000th push: 0.00000273 s
1540000th push: 0.00000392 s
1550000th push: 0.00000115 s
1560000th push: 0.00000136 s
1570000th push: 0.00000301 s
1580000th push: 0.00000124 s
pushed 1582788 items in 3.0 s

still a heap with 1582803 items? YES - 1.699 sec


