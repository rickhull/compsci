RUBYLIB=lib ruby-prof  examples/binary_tree.rb -- 
/proc/loadavg 0.05 0.03 0.00 1/82 4806
#
# 3 seconds worth of pushes
#

100th push: 0.00002039 s
200th push: 0.00001435 s
300th push: 0.00001463 s
400th push: 0.00001727 s
500th push: 0.00001723 s
600th push: 0.00001562 s
700th push: 0.00001699 s
800th push: 0.00001583 s
900th push: 0.00001629 s
1000th push: 0.00001557 s
-----------
    1k push: 0.3451 s (2897 push / s)

1100th push: 0.00001620 s
1200th push: 0.00001405 s
1300th push: 0.00001723 s
1400th push: 0.00001857 s
1500th push: 0.00001711 s
1600th push: 0.00001634 s
1700th push: 0.00001706 s
1800th push: 0.00001960 s
1900th push: 0.00001713 s
2000th push: 0.00001776 s
-----------
    1k push: 1.0310 s (969 push / s)

2100th push: 0.00001880 s
2200th push: 0.00001825 s
2300th push: 0.00001967 s
2400th push: 0.00001847 s
2500th push: 0.00001973 s
2600th push: 0.00001896 s
2700th push: 0.00004919 s
2800th push: 0.00001931 s
2900th push: 0.00001998 s
pushed 2919 items in 3.0 s

#
# 30 inserts, puts, df_search
#

[50, 65, 84, 69, 77, 78, 95, 88, 35, 65, 22, 48, 9, 41, 16, 39, 18, 71, 33, 98, 68, 51, 85, 33, 25, 18, 60, 56, 32, 53]
                                       50                                       
                   65                                      84                   
         69                  77                  78                  95         
    88        35        65        22        48         9        41        16    
  39   18   71   33   98   68   51   85   33   25   18   60   56   32   53 
#<CompSci::NaryTree:0x0055c6740cc0e8 @root=#<CompSci::ChildNode:0x2ae33a06604ci @value=50 @children=[65, 84]>, @child_slots=2, @open_parent=#<CompSci::ChildNode:0x2ae33a06573ci @value=16 @children=[53]>>
RUBYLIB=lib ruby-prof  examples/heap.rb -- 
#
# 3 seconds worth of pushes
#

10000th push: 0.00003314 s
20000th push: 0.00002130 s
30000th push: 0.00003332 s
40000th push: 0.00002154 s
50000th push: 0.00001267 s
60000th push: 0.00002124 s
70000th push: 0.00006535 s
80000th push: 0.00002228 s
90000th push: 0.00003897 s
100000th push: 0.00002266 s
-------------
    100k push: 2.75424388 s (36k push / s)

pushed 108927 items in 3.0 s

still a heap with 108928 items? YES - 1.509 sec

#
# display the results of push and pop
#

push: 80 33 48 97 12 41 3 47 23 3 49 90 55 84 10 34 50 95 32 8 2 61 68 22 43 32 78 16 41 42
array: [97, 95, 90, 80, 68, 78, 84, 47, 50, 8, 61, 43, 55, 41, 42, 33, 34, 23, 32, 3, 2, 12, 49, 22, 41, 32, 48, 3, 16, 10]
heap: true
                                       97                                       
                   95                                      90                   
         80                  68                  78                  84         
    47        50         8        61        43        55        41        42    
  33   34   23   32   3    2    12   49   22   41   32   48   3    16   10 


pop: 97
array: [95, 80, 90, 50, 68, 78, 84, 47, 32, 8, 61, 43, 55, 41, 42, 33, 34, 23, 10, 3, 2, 12, 49, 22, 41, 32, 48, 3, 16]
heap: true
                                       95                                       
                   80                                      90                   
         50                  68                  78                  84         
    47        32         8        61        43        55        41        42    
  33   34   23   10   3    2    12   49   22   41   32   48   3    16 


pop: 95 90 84 80 78 68 61 55 50
array: [49, 47, 48, 34, 41, 43, 42, 33, 32, 8, 12, 3, 32, 41, 16, 2, 22, 23, 10, 3]
heap: true
                                       49                                       
                   47                                      48                   
         34                  41                  43                  42         
    33        32         8        12         3        32        41        16    
  2    22   23   10   3  


push: 35 34 49 12 39 31 55 67 59 19 64 16 39 62 84 89 54 68 21 22 48 47 67 21 6 65 31 17 6 96
array: [96, 84, 89, 68, 67, 64, 59, 49, 67, 48, 65, 48, 43, 49, 55, 33, 39, 54, 62, 35, 47, 21, 41, 17, 39, 31, 32, 41, 42, 16, 19, 2, 16, 22, 34, 23, 32, 10, 21, 3, 22, 8, 47, 12, 6, 34, 31, 3, 6, 12]
heap: true
                                       96                                       
                   84                                      89                   
         68                  67                  64                  59         
    49        67        48        65        48        43        49        55    
  33   39   54   62   35   47   21   41   17   39   31   32   41   42   16   19 
2 16 22 34 23 32 10 21 3 22 8 47 12 6 34 31 3 6 12 

Measure Mode: wall_time
Thread ID: 47122786540560
Fiber ID: 47122787954040
Total: 4.519149
Sort by: self_time

 %self      total      self      wait     child     calls  name
 10.86      1.057     0.491     0.000     0.566   358086   Heap#heapish?
  7.19      2.086     0.325     0.000     1.761   248934  *Heap#sift_up
  5.72      3.002     0.258     0.000     2.743      130   Kernel#loop
  5.11      0.231     0.231     0.000     0.000   996134   Array#[]
  4.51      0.355     0.204     0.000     0.152   109105  *Array#initialize
  4.25      0.314     0.192     0.000     0.122   249477   <Class::CompSci::CompleteNaryTree>#parent_idx
  3.45      0.236     0.156     0.000     0.080   358215   BasicObject#!=
  3.43      2.327     0.155     0.000     2.172   108988   Heap#push
  3.14      0.142     0.142     0.000     0.000   576294   Integer#*
  2.65      0.120     0.120     0.000     0.000   546024   Integer#+
  2.37      0.107     0.107     0.000     0.000   467143   Integer#==
  2.08      0.242     0.094     0.000     0.148   108940   <Module::CompSci::Timer>#since
  1.98      0.090     0.090     0.000     0.000   358465   Integer#-
  1.93      0.087     0.087     0.000     0.000   358148   Kernel#class
  1.80      0.081     0.081     0.000     0.000   358086   Integer#<=>
  1.73      0.078     0.078     0.000     0.000   327238   Array#length
  1.55      0.117     0.070     0.000     0.046   108954   <Module::CompSci::Timer>#now
  1.52      0.069     0.069     0.000     0.000   279962   Array#[]=
  1.48      0.477     0.067     0.000     0.410   109102   <Class::CompSci::CompleteNaryTree>#children_idx
  1.43      0.064     0.064     0.000     0.000   248934   Integer#<=
  1.41      0.064     0.064     0.000     0.000   248962   BasicObject#!
  1.34      0.061     0.061     0.000     0.000   249735   Integer#/
  1.33      0.060     0.060     0.000     0.000   218040   Array#<<
  1.26      0.412     0.057     0.000     0.355   109107  *Class#new
  1.17      0.053     0.053     0.000     0.000   218764   Integer#<
  1.11      0.050     0.050     0.000     0.000   108988   Kernel#rand
  1.03      0.046     0.046     0.000     0.000   108954   <Module::Process>#clock_gettime
  0.92      0.042     0.042     0.000     0.000   108927   Float#>
  0.69      0.031     0.031     0.000     0.000   108940   Float#-
  0.62      0.028     0.028     0.000     0.000   108937   Integer#%
  0.02      1.514     0.001     0.000     1.513   218166  *Array#each
  0.00      0.000     0.000     0.000     0.000       17   String#%
  0.00      0.000     0.000     0.000     0.000      328   Integer#to_s
  0.00      0.002     0.000     0.000     0.002      129   <Class::CompSci::CompleteNaryTree>#gen
  0.00      0.000     0.000     0.000     0.000      146   String#+
  0.00      0.001     0.000     0.000     0.001       45  *Heap#sift_down
  0.00      0.000     0.000     0.000     0.000      129   String#ljust
  0.00      4.519     0.000     0.000     4.519        2   Global#[No method]
  0.00      1.509     0.000     0.000     1.509       11   <Module::CompSci::Timer>#elapsed
  0.00      0.000     0.000     0.000     0.000       73   IO#write
  0.00      0.000     0.000     0.000     0.000      129   String#rjust
  0.00      0.000     0.000     0.000     0.000        4   Array#inspect
  0.00      0.000     0.000     0.000     0.000       45   Heap#heapiest
  0.00      0.000     0.000     0.000     0.000      258   String#size
  0.00      0.003     0.000     0.000     0.003       42   IO#puts
  0.00      0.001     0.000     0.000     0.001       60   Kernel#tap
  0.00      0.000     0.000     0.000     0.000      129   Integer#**
  0.00      0.003     0.000     0.000     0.003       42   Kernel#puts
  0.00      0.000     0.000     0.000     0.000        3   Array#join
  0.00      0.000     0.000     0.000     0.000      129   Array#max
  0.00      0.000     0.000     0.000     0.000        8   IO#set_encoding
  0.00      0.001     0.000     0.000     0.001       10   Heap#pop
  0.00      0.000     0.000     0.000     0.000       45   Array#first
  0.00      1.510     0.000     0.000     1.510   109057  *Heap#heap?
  0.00      0.000     0.000     0.000     0.000       45   Integer#>=
  0.00      0.003     0.000     0.000     0.003        4   CompSci::CompleteNaryTree#display
  0.00      0.000     0.000     0.000     0.000       22   Module#method_added
  0.00      0.002     0.000     0.000     0.002        6  *Kernel#require
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_enter
  0.00      0.000     0.000     0.000     0.000        3   <Module::Gem>#find_unresolved_default_spec
  0.00      0.000     0.000     0.000     0.000        2   Heap#initialize
  0.00      0.000     0.000     0.000     0.000        9   <Class::Thread>#current
  0.00      0.000     0.000     0.000     0.000        3   MonitorMixin#mon_exit
  0.00      0.003     0.000     0.000     0.003        4   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000       10   Array#unshift
  0.00      0.000     0.000     0.000     0.000        1   Module#attr_reader
  0.00      0.000     0.000     0.000     0.000        7   BasicObject#singleton_method_added
  0.00      0.000     0.000     0.000     0.000       10   Array#pop
