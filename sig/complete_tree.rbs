module CompSci
  # A CompleteTree can very efficiently use an array for storage using
  # simple arithmetic to determine parent child relationships.
  #
  class CompleteTree
    @array: Array[untyped]
    @child_slots: Integer

    def self.parent_idx: (Integer idx, Integer n) -> Integer
    def self.children_idx: (Integer idx, Integer n) -> Array[Integer]
    def self.gen_lookup: (Integer idx, Integer n) -> Integer
    def self.gen: (Integer idx, Integer n) -> Integer
    def self.generation: (Integer idx, Integer n) -> [Integer, Integer]

    attr_reader array: Array[untyped]

    def initialize: (?array: Array[untyped], ?child_slots: Integer) -> void

    def push: (untyped val) -> untyped
    def pop: () -> untyped
    def size: () -> Integer
    def last_idx: () -> (Integer | nil)
    def display: (?width: Integer) -> Array[String]
    alias to_s display
  end
end
