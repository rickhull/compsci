module CompSci
  class Elo
    @initial: Integer
    @k: Integer
    @c: Float

    attr_reader initial: Integer
    attr_reader k: Integer
    attr_reader c: Float

    def initialize: (?initial: Integer, ?k: Integer, ?c: Integer | Float) ->
      void
    def expected: (Integer rating_a, Integer rating_b) -> Float
    def update: (Integer rating_a, Integer rating_b, Float outcome) ->
      [Integer, Integer]

    CHESS: Elo
    DEFAULT: Elo

    def self.expected: (Integer rating_a, Integer rating_b) -> Float
    def self.update: (Integer rating_a, Integer rating_b, Float outcome) ->
      [Integer, Integer]

    class Player
      @elo: Elo
      @rating: Integer
      @skill: Float
      @wins: Integer
      @losses: Integer
      @draws: Integer

      include Comparable

      def self.init_pool: (Integer count, ?elo: Elo?) -> Array[Player]
      def self.avg_rating: (Array[Player]) -> Integer
      def self.roll: (?type: Symbol) -> Float
      def self.skill_roll: (?Float skill_a, ?Float skill_b, ?type: Symbol) ->
        Float

      attr_accessor rating: Integer
      attr_accessor elo: Elo
      attr_accessor skill: Float
      attr_accessor wins: Integer
      attr_accessor losses: Integer
      attr_accessor draws: Integer

      def initialize: (?elo: Elo?, ?skill: Float) -> void
      def <=>: (Player opponent) -> Integer
      def update: (Player opp, Float outcome) -> [Integer, Integer]
      def simulate: (Player opp, ?type: Symbol) -> Float
      def record: () -> String
      def to_s: () -> String
    end
  end
end
